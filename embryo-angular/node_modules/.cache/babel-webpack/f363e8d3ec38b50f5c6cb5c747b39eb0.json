{"ast":null,"code":"import escapeHits, { tagConfig } from '../../lib/escape-highlight';\nimport { checkRendering } from '../../lib/utils';\nvar usage = 'Usage:\\nvar customAutcomplete = connectAutocomplete(function render(params, isFirstRendering) {\\n  // params = {\\n  //   indices,\\n  //   refine,\\n  //   currentRefinement\\n  // }\\n});\\nsearch.addWiget(customAutcomplete({\\n  [ indices ],\\n  [ escapeHits = false ]\\n}));\\nFull documentation available at https://community.algolia.com/instantsearch.js/connectors/connectAutocomplete.html\\n';\n/**\n * @typedef {Object} Index\n * @property {string} index Name of the index.\n * @property {string} label Label of the index (for display purpose).\n * @property {Object[]} hits The hits resolved from the index matching the query.\n * @property {Object} results The full results object from Algolia API.\n */\n\n/**\n * @typedef {Object} AutocompleteRenderingOptions\n * @property {Index[]} indices The indices you provided with their hits and results and the main index as first position.\n * @property {function(string)} refine Search into the indices with the query provided.\n * @property {string} currentRefinement The actual value of the query.\n * @property {Object} widgetParams All original widget options forwarded to the `renderFn`.\n */\n\n/**\n * @typedef {Object} CustomAutocompleteWidgetOptions\n * @property {{value: string, label: string}[]} [indices = []] Name of the others indices to search into.\n * @property {boolean} [escapeHits = false] If true, escape HTML tags from `hits[i]._highlightResult`.\n */\n\n/**\n * **Autocomplete** connector provides the logic to build a widget that will give the user the ability to search into multiple indices.\n *\n * This connector provides a `refine()` function to search for a query and a `currentRefinement` as the current query used to search.\n *\n * THere's a complete example available on how to write a custom **Autocomplete** widget:\n * [autocomplete.js](https://github.com/algolia/instantsearch.js/blob/develop/dev/app/custom-widgets/jquery/autocomplete.js)\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/autocomplete/js/\n * @param {function(AutocompleteRenderingOptions, boolean)} renderFn Rendering function for the custom **Autocomplete** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomAutocompleteWidgetOptions)} Re-usable widget factory for a custom **Autocomplete** widget.\n */\n\nexport default function connectAutocomplete(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _widgetParams$indices = widgetParams.indices,\n        indices = _widgetParams$indices === undefined ? [] : _widgetParams$indices; // user passed a wrong `indices` option type\n\n    if (!Array.isArray(indices)) {\n      throw new Error(usage);\n    }\n\n    return {\n      getConfiguration: function getConfiguration() {\n        return widgetParams.escapeHits ? tagConfig : undefined;\n      },\n      init: function init(_ref) {\n        var _this = this;\n\n        var instantSearchInstance = _ref.instantSearchInstance,\n            helper = _ref.helper;\n        this._refine = this.refine(helper);\n        this.indices = [{\n          helper: helper,\n          label: 'primary',\n          index: helper.getIndex(),\n          results: undefined,\n          hits: []\n        }]; // add additionnal indices into `this.indices`\n\n        indices.forEach(function (_ref2) {\n          var label = _ref2.label,\n              value = _ref2.value;\n          var derivedHelper = helper.derive(function (searchParameters) {\n            return searchParameters.setIndex(value);\n          });\n\n          _this.indices.push({\n            label: label,\n            index: value,\n            helper: derivedHelper,\n            results: undefined,\n            hits: []\n          }); // update results then trigger render after a search from any helper\n\n\n          derivedHelper.on('result', function (results) {\n            return _this.saveResults({\n              results: results,\n              label: label\n            });\n          });\n        });\n        this.instantSearchInstance = instantSearchInstance;\n        this.renderWithAllIndices({\n          isFirstRendering: true\n        });\n      },\n      saveResults: function saveResults(_ref3) {\n        var results = _ref3.results,\n            label = _ref3.label;\n        var derivedIndex = this.indices.find(function (i) {\n          return i.label === label;\n        });\n\n        if (widgetParams.escapeHits && results.hits && results.hits.length > 0) {\n          results.hits = escapeHits(results.hits);\n        }\n\n        derivedIndex.results = results;\n        derivedIndex.hits = results && results.hits && Array.isArray(results.hits) ? results.hits : [];\n        this.renderWithAllIndices();\n      },\n      refine: function refine(helper) {\n        return function (query) {\n          return helper.setQuery(query).search();\n        };\n      },\n      render: function render(_ref4) {\n        var results = _ref4.results;\n        this.saveResults({\n          results: results,\n          label: this.indices[0].label\n        });\n      },\n      renderWithAllIndices: function renderWithAllIndices() {\n        var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            _ref5$isFirstRenderin = _ref5.isFirstRendering,\n            isFirstRendering = _ref5$isFirstRenderin === undefined ? false : _ref5$isFirstRenderin;\n\n        var currentRefinement = this.indices[0].helper.state.query;\n        renderFn({\n          widgetParams: widgetParams,\n          currentRefinement: currentRefinement,\n          // we do not want to provide the `helper` to the end-user\n          indices: this.indices.map(function (_ref6) {\n            var index = _ref6.index,\n                label = _ref6.label,\n                hits = _ref6.hits,\n                results = _ref6.results;\n            return {\n              index: index,\n              label: label,\n              hits: hits,\n              results: results\n            };\n          }),\n          instantSearchInstance: this.instantSearchInstance,\n          refine: this._refine\n        }, isFirstRendering);\n      },\n      dispose: function dispose() {\n        // detach every derived indices from the main helper instance\n        this.indices.slice(1).forEach(function (_ref7) {\n          var helper = _ref7.helper;\n          return helper.detach();\n        });\n        unmountFn();\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/autocomplete/connectAutocomplete.js"],"names":["escapeHits","tagConfig","checkRendering","usage","connectAutocomplete","renderFn","unmountFn","widgetParams","arguments","length","undefined","_widgetParams$indices","indices","Array","isArray","Error","getConfiguration","init","_ref","_this","instantSearchInstance","helper","_refine","refine","label","index","getIndex","results","hits","forEach","_ref2","value","derivedHelper","derive","searchParameters","setIndex","push","on","saveResults","renderWithAllIndices","isFirstRendering","_ref3","derivedIndex","find","i","query","setQuery","search","render","_ref4","_ref5","_ref5$isFirstRenderin","currentRefinement","state","map","_ref6","dispose","slice","_ref7","detach"],"mappings":"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","sourcesContent":["import escapeHits, { tagConfig } from '../../lib/escape-highlight';\nimport { checkRendering } from '../../lib/utils';\n\nvar usage = 'Usage:\\nvar customAutcomplete = connectAutocomplete(function render(params, isFirstRendering) {\\n  // params = {\\n  //   indices,\\n  //   refine,\\n  //   currentRefinement\\n  // }\\n});\\nsearch.addWiget(customAutcomplete({\\n  [ indices ],\\n  [ escapeHits = false ]\\n}));\\nFull documentation available at https://community.algolia.com/instantsearch.js/connectors/connectAutocomplete.html\\n';\n\n/**\n * @typedef {Object} Index\n * @property {string} index Name of the index.\n * @property {string} label Label of the index (for display purpose).\n * @property {Object[]} hits The hits resolved from the index matching the query.\n * @property {Object} results The full results object from Algolia API.\n */\n\n/**\n * @typedef {Object} AutocompleteRenderingOptions\n * @property {Index[]} indices The indices you provided with their hits and results and the main index as first position.\n * @property {function(string)} refine Search into the indices with the query provided.\n * @property {string} currentRefinement The actual value of the query.\n * @property {Object} widgetParams All original widget options forwarded to the `renderFn`.\n */\n\n/**\n * @typedef {Object} CustomAutocompleteWidgetOptions\n * @property {{value: string, label: string}[]} [indices = []] Name of the others indices to search into.\n * @property {boolean} [escapeHits = false] If true, escape HTML tags from `hits[i]._highlightResult`.\n */\n\n/**\n * **Autocomplete** connector provides the logic to build a widget that will give the user the ability to search into multiple indices.\n *\n * This connector provides a `refine()` function to search for a query and a `currentRefinement` as the current query used to search.\n *\n * THere's a complete example available on how to write a custom **Autocomplete** widget:\n * [autocomplete.js](https://github.com/algolia/instantsearch.js/blob/develop/dev/app/custom-widgets/jquery/autocomplete.js)\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/autocomplete/js/\n * @param {function(AutocompleteRenderingOptions, boolean)} renderFn Rendering function for the custom **Autocomplete** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomAutocompleteWidgetOptions)} Re-usable widget factory for a custom **Autocomplete** widget.\n */\nexport default function connectAutocomplete(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _widgetParams$indices = widgetParams.indices,\n        indices = _widgetParams$indices === undefined ? [] : _widgetParams$indices;\n\n    // user passed a wrong `indices` option type\n\n    if (!Array.isArray(indices)) {\n      throw new Error(usage);\n    }\n\n    return {\n      getConfiguration: function getConfiguration() {\n        return widgetParams.escapeHits ? tagConfig : undefined;\n      },\n      init: function init(_ref) {\n        var _this = this;\n\n        var instantSearchInstance = _ref.instantSearchInstance,\n            helper = _ref.helper;\n\n        this._refine = this.refine(helper);\n\n        this.indices = [{\n          helper: helper,\n          label: 'primary',\n          index: helper.getIndex(),\n          results: undefined,\n          hits: []\n        }];\n\n        // add additionnal indices into `this.indices`\n        indices.forEach(function (_ref2) {\n          var label = _ref2.label,\n              value = _ref2.value;\n\n          var derivedHelper = helper.derive(function (searchParameters) {\n            return searchParameters.setIndex(value);\n          });\n\n          _this.indices.push({\n            label: label,\n            index: value,\n            helper: derivedHelper,\n            results: undefined,\n            hits: []\n          });\n\n          // update results then trigger render after a search from any helper\n          derivedHelper.on('result', function (results) {\n            return _this.saveResults({ results: results, label: label });\n          });\n        });\n\n        this.instantSearchInstance = instantSearchInstance;\n        this.renderWithAllIndices({ isFirstRendering: true });\n      },\n      saveResults: function saveResults(_ref3) {\n        var results = _ref3.results,\n            label = _ref3.label;\n\n        var derivedIndex = this.indices.find(function (i) {\n          return i.label === label;\n        });\n\n        if (widgetParams.escapeHits && results.hits && results.hits.length > 0) {\n          results.hits = escapeHits(results.hits);\n        }\n\n        derivedIndex.results = results;\n        derivedIndex.hits = results && results.hits && Array.isArray(results.hits) ? results.hits : [];\n\n        this.renderWithAllIndices();\n      },\n      refine: function refine(helper) {\n        return function (query) {\n          return helper.setQuery(query).search();\n        };\n      },\n      render: function render(_ref4) {\n        var results = _ref4.results;\n\n        this.saveResults({ results: results, label: this.indices[0].label });\n      },\n      renderWithAllIndices: function renderWithAllIndices() {\n        var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            _ref5$isFirstRenderin = _ref5.isFirstRendering,\n            isFirstRendering = _ref5$isFirstRenderin === undefined ? false : _ref5$isFirstRenderin;\n\n        var currentRefinement = this.indices[0].helper.state.query;\n\n        renderFn({\n          widgetParams: widgetParams,\n          currentRefinement: currentRefinement,\n          // we do not want to provide the `helper` to the end-user\n          indices: this.indices.map(function (_ref6) {\n            var index = _ref6.index,\n                label = _ref6.label,\n                hits = _ref6.hits,\n                results = _ref6.results;\n            return {\n              index: index,\n              label: label,\n              hits: hits,\n              results: results\n            };\n          }),\n          instantSearchInstance: this.instantSearchInstance,\n          refine: this._refine\n        }, isFirstRendering);\n      },\n      dispose: function dispose() {\n        // detach every derived indices from the main helper instance\n        this.indices.slice(1).forEach(function (_ref7) {\n          var helper = _ref7.helper;\n          return helper.detach();\n        });\n\n        unmountFn();\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}