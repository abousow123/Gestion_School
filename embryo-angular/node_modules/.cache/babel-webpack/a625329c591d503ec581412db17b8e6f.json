{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport { checkRendering } from '../../lib/utils.js';\nimport { tagConfig, escapeFacets } from '../../lib/escape-highlight.js';\nimport isEqual from 'lodash/isEqual';\nvar usage = 'Usage:\\nvar customRefinementList = connectRefinementList(function render(params) {\\n  // params = {\\n  //   isFromSearch,\\n  //   createURL,\\n  //   items,\\n  //   refine,\\n  //   searchForItems,\\n  //   instantSearchInstance,\\n  //   canRefine,\\n  //   toggleShowMore,\\n  //   isShowingMore,\\n  //   widgetParams,\\n  // }\\n});\\n\\nsearch.addWidget(\\n  customRefinementList({\\n    attributeName,\\n    [ operator = \\'or\\' ],\\n    [ limit ],\\n    [ showMoreLimit ],\\n    [ sortBy = [\\'isRefined\\', \\'count:desc\\', \\'name:asc\\'] ],\\n    [ escapeFacetValues = false ],\\n    [ transformItems ]\\n  })\\n);\\n\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectRefinementList.html\\n';\nexport var checkUsage = function checkUsage(_ref) {\n  var attributeName = _ref.attributeName,\n      operator = _ref.operator,\n      showMoreLimit = _ref.showMoreLimit,\n      limit = _ref.limit,\n      message = _ref.message;\n  var noAttributeName = attributeName === undefined;\n  var invalidOperator = !/^(and|or)$/.test(operator);\n  var invalidShowMoreLimit = showMoreLimit !== undefined ? isNaN(showMoreLimit) || showMoreLimit < limit : false;\n\n  if (noAttributeName || invalidOperator || invalidShowMoreLimit) {\n    throw new Error(message);\n  }\n};\n/**\n * @typedef {Object} RefinementListItem\n * @property {string} value The value of the refinement list item.\n * @property {string} label Human-readable value of the refinement list item.\n * @property {number} count Number of matched results after refinement is applied.\n * @property {boolean} isRefined Indicates if the list item is refined.\n */\n\n/**\n * @typedef {Object} CustomRefinementListWidgetOptions\n * @property {string} attributeName The name of the attribute in the records.\n * @property {\"and\"|\"or\"} [operator = 'or'] How the filters are combined together.\n * @property {number} [limit = 10] The max number of items to display when\n * `showMoreLimit` is not set or if the widget is showing less value.\n * @property {number} [showMoreLimit] The max number of items to display if the widget\n * is showing more items.\n * @property {string[]|function} [sortBy = ['isRefined', 'count:desc', 'name:asc']] How to sort refinements. Possible values: `count|isRefined|name:asc|name:desc`.\n * @property {boolean} [escapeFacetValues = false] Escapes the content of the facet values.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * @typedef {Object} RefinementListRenderingOptions\n * @property {RefinementListItem[]} items The list of filtering values returned from Algolia API.\n * @property {function(item.value): string} createURL Creates the next state url for a selected refinement.\n * @property {function(item.value)} refine Action to apply selected refinements.\n * @property {function} searchForItems Searches for values inside the list.\n * @property {boolean} isFromSearch `true` if the values are from an index search.\n * @property {boolean} canRefine `true` if a refinement can be applied.\n * @property {boolean} canToggleShowMore `true` if the toggleShowMore button can be activated (enough items to display more or\n * already displaying more than `limit` items)\n * @property {Object} widgetParams All original `CustomRefinementListWidgetOptions` forwarded to the `renderFn`.\n * @property {boolean} isShowingMore True if the menu is displaying all the menu items.\n * @property {function} toggleShowMore Toggles the number of values displayed between `limit` and `showMoreLimit`.\n */\n\n/**\n * **RefinementList** connector provides the logic to build a custom widget that will let the\n * user filter the results based on the values of a specific facet.\n *\n * This connector provides a `toggleShowMore()` function to display more or less items and a `refine()`\n * function to select an item.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/refinement-list/js/\n * @param {function(RefinementListRenderingOptions, boolean)} renderFn Rendering function for the custom **RefinementList** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomRefinementListWidgetOptions)} Re-usable widget factory for a custom **RefinementList** widget.\n * @example\n * // custom `renderFn` to render the custom RefinementList widget\n * function renderFn(RefinementListRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     RefinementListRenderingOptions.widgetParams.containerNode\n *       .html('<ul></ul>')\n *   }\n *\n *     RefinementListRenderingOptions.widgetParams.containerNode\n *       .find('li[data-refine-value]')\n *       .each(function() { $(this).off('click'); });\n *\n *   if (RefinementListRenderingOptions.canRefine) {\n *     var list = RefinementListRenderingOptions.items.map(function(item) {\n *       return `\n *         <li data-refine-value=\"${item.value}\">\n *           <input type=\"checkbox\" value=\"${item.value}\" ${item.isRefined ? 'checked' : ''} />\n *           <a href=\"${RefinementListRenderingOptions.createURL(item.value)}\">\n *             ${item.label} (${item.count})\n *           </a>\n *         </li>\n *       `;\n *     });\n *\n *     RefinementListRenderingOptions.widgetParams.containerNode.find('ul').html(list);\n *     RefinementListRenderingOptions.widgetParams.containerNode\n *       .find('li[data-refine-value]')\n *       .each(function() {\n *         $(this).on('click', function(event) {\n *           event.stopPropagation();\n *           event.preventDefault();\n *\n *           RefinementListRenderingOptions.refine($(this).data('refine-value'));\n *         });\n *       });\n *   } else {\n *     RefinementListRenderingOptions.widgetParams.containerNode.find('ul').html('');\n *   }\n * }\n *\n * // connect `renderFn` to RefinementList logic\n * var customRefinementList = instantsearch.connectors.connectRefinementList(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customRefinementList({\n *     containerNode: $('#custom-refinement-list-container'),\n *     attributeName: 'categories',\n *     limit: 10,\n *   })\n * );\n */\n\nexport default function connectRefinementList(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var attributeName = widgetParams.attributeName,\n        _widgetParams$operato = widgetParams.operator,\n        operator = _widgetParams$operato === undefined ? 'or' : _widgetParams$operato,\n        _widgetParams$limit = widgetParams.limit,\n        limit = _widgetParams$limit === undefined ? 10 : _widgetParams$limit,\n        showMoreLimit = widgetParams.showMoreLimit,\n        _widgetParams$sortBy = widgetParams.sortBy,\n        sortBy = _widgetParams$sortBy === undefined ? ['isRefined', 'count:desc', 'name:asc'] : _widgetParams$sortBy,\n        _widgetParams$escapeF = widgetParams.escapeFacetValues,\n        escapeFacetValues = _widgetParams$escapeF === undefined ? false : _widgetParams$escapeF,\n        _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n    checkUsage({\n      message: usage,\n      attributeName: attributeName,\n      operator: operator,\n      showMoreLimit: showMoreLimit,\n      limit: limit\n    });\n\n    var formatItems = function formatItems(_ref2) {\n      var label = _ref2.name,\n          item = _objectWithoutProperties(_ref2, ['name']);\n\n      return _extends({}, item, {\n        label: label,\n        value: label,\n        highlighted: label\n      });\n    };\n\n    var _render = function _render(_ref3) {\n      var items = _ref3.items,\n          state = _ref3.state,\n          createURL = _ref3.createURL,\n          helperSpecializedSearchFacetValues = _ref3.helperSpecializedSearchFacetValues,\n          refine = _ref3.refine,\n          isFromSearch = _ref3.isFromSearch,\n          isFirstSearch = _ref3.isFirstSearch,\n          isShowingMore = _ref3.isShowingMore,\n          toggleShowMore = _ref3.toggleShowMore,\n          hasExhaustiveItems = _ref3.hasExhaustiveItems,\n          instantSearchInstance = _ref3.instantSearchInstance; // Compute a specific createURL method able to link to any facet value state change\n\n      var _createURL = function _createURL(facetValue) {\n        return createURL(state.toggleRefinement(attributeName, facetValue));\n      }; // Do not mistake searchForFacetValues and searchFacetValues which is the actual search\n      // function\n\n\n      var searchFacetValues = helperSpecializedSearchFacetValues && helperSpecializedSearchFacetValues(state, createURL, helperSpecializedSearchFacetValues, refine, instantSearchInstance);\n      renderFn({\n        createURL: _createURL,\n        items: items,\n        refine: refine,\n        searchForItems: searchFacetValues,\n        instantSearchInstance: instantSearchInstance,\n        isFromSearch: isFromSearch,\n        canRefine: isFromSearch || items.length > 0,\n        widgetParams: widgetParams,\n        isShowingMore: isShowingMore,\n        canToggleShowMore: showMoreLimit ? isShowingMore || !hasExhaustiveItems : false,\n        toggleShowMore: toggleShowMore,\n        hasExhaustiveItems: hasExhaustiveItems\n      }, isFirstSearch);\n    };\n\n    var lastResultsFromMainSearch = void 0;\n    var searchForFacetValues = void 0;\n    var refine = void 0;\n\n    var createSearchForFacetValues = function createSearchForFacetValues(helper) {\n      return function (state, createURL, helperSpecializedSearchFacetValues, toggleRefinement, instantSearchInstance) {\n        return function (query) {\n          if (query === '' && lastResultsFromMainSearch) {\n            // render with previous data from the helper.\n            _render({\n              items: lastResultsFromMainSearch,\n              state: state,\n              createURL: createURL,\n              helperSpecializedSearchFacetValues: helperSpecializedSearchFacetValues,\n              refine: toggleRefinement,\n              isFromSearch: false,\n              isFirstSearch: false,\n              instantSearchInstance: instantSearchInstance,\n              hasExhaustiveItems: false // SFFV should not be used with show more\n\n            });\n          } else {\n            var tags = {\n              highlightPreTag: escapeFacetValues ? tagConfig.highlightPreTag : undefined,\n              highlightPostTag: escapeFacetValues ? tagConfig.highlightPostTag : undefined\n            };\n            helper.searchForFacetValues(attributeName, query, limit, tags).then(function (results) {\n              var facetValues = escapeFacetValues ? escapeFacets(results.facetHits) : results.facetHits;\n              var normalizedFacetValues = transformItems(facetValues.map(function (_ref4) {\n                var value = _ref4.value,\n                    item = _objectWithoutProperties(_ref4, ['value']);\n\n                return _extends({}, item, {\n                  value: value,\n                  label: value\n                });\n              }));\n\n              _render({\n                items: normalizedFacetValues,\n                state: state,\n                createURL: createURL,\n                helperSpecializedSearchFacetValues: helperSpecializedSearchFacetValues,\n                refine: toggleRefinement,\n                isFromSearch: true,\n                isFirstSearch: false,\n                instantSearchInstance: instantSearchInstance,\n                hasExhaustiveItems: false // SFFV should not be used with show more\n\n              });\n            });\n          }\n        };\n      };\n    };\n\n    return {\n      isShowingMore: false,\n      // Provide the same function to the `renderFn` so that way the user\n      // has to only bind it once when `isFirstRendering` for instance\n      toggleShowMore: function toggleShowMore() {},\n      cachedToggleShowMore: function cachedToggleShowMore() {\n        this.toggleShowMore();\n      },\n      createToggleShowMore: function createToggleShowMore(renderOptions) {\n        var _this = this;\n\n        return function () {\n          _this.isShowingMore = !_this.isShowingMore;\n\n          _this.render(renderOptions);\n        };\n      },\n      getLimit: function getLimit() {\n        return this.isShowingMore ? showMoreLimit : limit;\n      },\n      getConfiguration: function getConfiguration() {\n        var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var widgetConfiguration = _defineProperty({}, operator === 'and' ? 'facets' : 'disjunctiveFacets', [attributeName]);\n\n        if (limit !== undefined) {\n          var currentMaxValuesPerFacet = configuration.maxValuesPerFacet || 0;\n\n          if (showMoreLimit === undefined) {\n            widgetConfiguration.maxValuesPerFacet = Math.max(currentMaxValuesPerFacet, limit);\n          } else {\n            widgetConfiguration.maxValuesPerFacet = Math.max(currentMaxValuesPerFacet, limit, showMoreLimit);\n          }\n        }\n\n        return widgetConfiguration;\n      },\n      init: function init(_ref5) {\n        var helper = _ref5.helper,\n            createURL = _ref5.createURL,\n            instantSearchInstance = _ref5.instantSearchInstance;\n        this.cachedToggleShowMore = this.cachedToggleShowMore.bind(this);\n\n        refine = function refine(facetValue) {\n          return helper.toggleRefinement(attributeName, facetValue).search();\n        };\n\n        searchForFacetValues = createSearchForFacetValues(helper);\n\n        _render({\n          items: [],\n          state: helper.state,\n          createURL: createURL,\n          helperSpecializedSearchFacetValues: searchForFacetValues,\n          refine: refine,\n          isFromSearch: false,\n          isFirstSearch: true,\n          instantSearchInstance: instantSearchInstance,\n          isShowingMore: this.isShowingMore,\n          toggleShowMore: this.cachedToggleShowMore,\n          hasExhaustiveItems: true\n        });\n      },\n      render: function render(renderOptions) {\n        var results = renderOptions.results,\n            state = renderOptions.state,\n            createURL = renderOptions.createURL,\n            instantSearchInstance = renderOptions.instantSearchInstance;\n        var facetValues = results.getFacetValues(attributeName, {\n          sortBy: sortBy\n        });\n        var items = transformItems(facetValues.slice(0, this.getLimit()).map(formatItems));\n        var maxValuesPerFacetConfig = state.getQueryParameter('maxValuesPerFacet');\n        var currentLimit = this.getLimit(); // If the limit is the max number of facet retrieved it is impossible to know\n        // if the facets are exhaustive. The only moment we are sure it is exhaustive\n        // is when it is strictly under the number requested unless we know that another\n        // widget has requested more values (maxValuesPerFacet > getLimit()).\n        // Because this is used for making the search of facets unable or not, it is important\n        // to be conservative here.\n\n        var hasExhaustiveItems = maxValuesPerFacetConfig > currentLimit ? facetValues.length <= currentLimit : facetValues.length < currentLimit;\n        lastResultsFromMainSearch = items;\n        this.toggleShowMore = this.createToggleShowMore(renderOptions);\n\n        _render({\n          items: items,\n          state: state,\n          createURL: createURL,\n          helperSpecializedSearchFacetValues: searchForFacetValues,\n          refine: refine,\n          isFromSearch: false,\n          isFirstSearch: false,\n          instantSearchInstance: instantSearchInstance,\n          isShowingMore: this.isShowingMore,\n          toggleShowMore: this.cachedToggleShowMore,\n          hasExhaustiveItems: hasExhaustiveItems\n        });\n      },\n      dispose: function dispose(_ref6) {\n        var state = _ref6.state;\n        unmountFn();\n\n        if (operator === 'and') {\n          return state.removeFacetRefinement(attributeName).removeFacet(attributeName);\n        } else {\n          return state.removeDisjunctiveFacetRefinement(attributeName).removeDisjunctiveFacet(attributeName);\n        }\n      },\n      getWidgetState: function getWidgetState(uiState, _ref7) {\n        var searchParameters = _ref7.searchParameters;\n        var values = operator === 'or' ? searchParameters.getDisjunctiveRefinements(attributeName) : searchParameters.getConjunctiveRefinements(attributeName);\n\n        if (values.length === 0 || uiState.refinementList && isEqual(values, uiState.refinementList[attributeName])) {\n          return uiState;\n        }\n\n        return _extends({}, uiState, {\n          refinementList: _extends({}, uiState.refinementList, _defineProperty({}, attributeName, values))\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref8) {\n        var uiState = _ref8.uiState;\n        var values = uiState.refinementList && uiState.refinementList[attributeName];\n        if (values === undefined) return searchParameters;\n        return values.reduce(function (sp, v) {\n          return operator === 'or' ? sp.addDisjunctiveFacetRefinement(attributeName, v) : sp.addFacetRefinement(attributeName, v);\n        }, searchParameters.clearRefinements(attributeName));\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/refinement-list/connectRefinementList.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","_objectWithoutProperties","keys","indexOf","checkRendering","tagConfig","escapeFacets","isEqual","usage","checkUsage","_ref","attributeName","operator","showMoreLimit","limit","message","noAttributeName","undefined","invalidOperator","test","invalidShowMoreLimit","isNaN","Error","connectRefinementList","renderFn","unmountFn","widgetParams","_widgetParams$operato","_widgetParams$limit","_widgetParams$sortBy","sortBy","_widgetParams$escapeF","escapeFacetValues","_widgetParams$transfo","transformItems","items","formatItems","_ref2","label","name","item","highlighted","_render","_ref3","state","createURL","helperSpecializedSearchFacetValues","refine","isFromSearch","isFirstSearch","isShowingMore","toggleShowMore","hasExhaustiveItems","instantSearchInstance","_createURL","facetValue","toggleRefinement","searchFacetValues","searchForItems","canRefine","canToggleShowMore","lastResultsFromMainSearch","searchForFacetValues","createSearchForFacetValues","helper","query","tags","highlightPreTag","highlightPostTag","then","results","facetValues","facetHits","normalizedFacetValues","map","_ref4","cachedToggleShowMore","createToggleShowMore","renderOptions","_this","render","getLimit","getConfiguration","configuration","widgetConfiguration","currentMaxValuesPerFacet","maxValuesPerFacet","Math","max","init","_ref5","bind","search","getFacetValues","slice","maxValuesPerFacetConfig","getQueryParameter","currentLimit","dispose","_ref6","removeFacetRefinement","removeFacet","removeDisjunctiveFacetRefinement","removeDisjunctiveFacet","getWidgetState","uiState","_ref7","searchParameters","values","getDisjunctiveRefinements","getConjunctiveRefinements","refinementList","getWidgetSearchParameters","_ref8","reduce","sp","v","addDisjunctiveFacetRefinement","addFacetRefinement","clearRefinements"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nimport { checkRendering } from '../../lib/utils.js';\nimport { tagConfig, escapeFacets } from '../../lib/escape-highlight.js';\nimport isEqual from 'lodash/isEqual';\n\nvar usage = 'Usage:\\nvar customRefinementList = connectRefinementList(function render(params) {\\n  // params = {\\n  //   isFromSearch,\\n  //   createURL,\\n  //   items,\\n  //   refine,\\n  //   searchForItems,\\n  //   instantSearchInstance,\\n  //   canRefine,\\n  //   toggleShowMore,\\n  //   isShowingMore,\\n  //   widgetParams,\\n  // }\\n});\\n\\nsearch.addWidget(\\n  customRefinementList({\\n    attributeName,\\n    [ operator = \\'or\\' ],\\n    [ limit ],\\n    [ showMoreLimit ],\\n    [ sortBy = [\\'isRefined\\', \\'count:desc\\', \\'name:asc\\'] ],\\n    [ escapeFacetValues = false ],\\n    [ transformItems ]\\n  })\\n);\\n\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectRefinementList.html\\n';\n\nexport var checkUsage = function checkUsage(_ref) {\n  var attributeName = _ref.attributeName,\n      operator = _ref.operator,\n      showMoreLimit = _ref.showMoreLimit,\n      limit = _ref.limit,\n      message = _ref.message;\n\n  var noAttributeName = attributeName === undefined;\n  var invalidOperator = !/^(and|or)$/.test(operator);\n  var invalidShowMoreLimit = showMoreLimit !== undefined ? isNaN(showMoreLimit) || showMoreLimit < limit : false;\n\n  if (noAttributeName || invalidOperator || invalidShowMoreLimit) {\n    throw new Error(message);\n  }\n};\n\n/**\n * @typedef {Object} RefinementListItem\n * @property {string} value The value of the refinement list item.\n * @property {string} label Human-readable value of the refinement list item.\n * @property {number} count Number of matched results after refinement is applied.\n * @property {boolean} isRefined Indicates if the list item is refined.\n */\n\n/**\n * @typedef {Object} CustomRefinementListWidgetOptions\n * @property {string} attributeName The name of the attribute in the records.\n * @property {\"and\"|\"or\"} [operator = 'or'] How the filters are combined together.\n * @property {number} [limit = 10] The max number of items to display when\n * `showMoreLimit` is not set or if the widget is showing less value.\n * @property {number} [showMoreLimit] The max number of items to display if the widget\n * is showing more items.\n * @property {string[]|function} [sortBy = ['isRefined', 'count:desc', 'name:asc']] How to sort refinements. Possible values: `count|isRefined|name:asc|name:desc`.\n * @property {boolean} [escapeFacetValues = false] Escapes the content of the facet values.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * @typedef {Object} RefinementListRenderingOptions\n * @property {RefinementListItem[]} items The list of filtering values returned from Algolia API.\n * @property {function(item.value): string} createURL Creates the next state url for a selected refinement.\n * @property {function(item.value)} refine Action to apply selected refinements.\n * @property {function} searchForItems Searches for values inside the list.\n * @property {boolean} isFromSearch `true` if the values are from an index search.\n * @property {boolean} canRefine `true` if a refinement can be applied.\n * @property {boolean} canToggleShowMore `true` if the toggleShowMore button can be activated (enough items to display more or\n * already displaying more than `limit` items)\n * @property {Object} widgetParams All original `CustomRefinementListWidgetOptions` forwarded to the `renderFn`.\n * @property {boolean} isShowingMore True if the menu is displaying all the menu items.\n * @property {function} toggleShowMore Toggles the number of values displayed between `limit` and `showMoreLimit`.\n */\n\n/**\n * **RefinementList** connector provides the logic to build a custom widget that will let the\n * user filter the results based on the values of a specific facet.\n *\n * This connector provides a `toggleShowMore()` function to display more or less items and a `refine()`\n * function to select an item.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/refinement-list/js/\n * @param {function(RefinementListRenderingOptions, boolean)} renderFn Rendering function for the custom **RefinementList** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomRefinementListWidgetOptions)} Re-usable widget factory for a custom **RefinementList** widget.\n * @example\n * // custom `renderFn` to render the custom RefinementList widget\n * function renderFn(RefinementListRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     RefinementListRenderingOptions.widgetParams.containerNode\n *       .html('<ul></ul>')\n *   }\n *\n *     RefinementListRenderingOptions.widgetParams.containerNode\n *       .find('li[data-refine-value]')\n *       .each(function() { $(this).off('click'); });\n *\n *   if (RefinementListRenderingOptions.canRefine) {\n *     var list = RefinementListRenderingOptions.items.map(function(item) {\n *       return `\n *         <li data-refine-value=\"${item.value}\">\n *           <input type=\"checkbox\" value=\"${item.value}\" ${item.isRefined ? 'checked' : ''} />\n *           <a href=\"${RefinementListRenderingOptions.createURL(item.value)}\">\n *             ${item.label} (${item.count})\n *           </a>\n *         </li>\n *       `;\n *     });\n *\n *     RefinementListRenderingOptions.widgetParams.containerNode.find('ul').html(list);\n *     RefinementListRenderingOptions.widgetParams.containerNode\n *       .find('li[data-refine-value]')\n *       .each(function() {\n *         $(this).on('click', function(event) {\n *           event.stopPropagation();\n *           event.preventDefault();\n *\n *           RefinementListRenderingOptions.refine($(this).data('refine-value'));\n *         });\n *       });\n *   } else {\n *     RefinementListRenderingOptions.widgetParams.containerNode.find('ul').html('');\n *   }\n * }\n *\n * // connect `renderFn` to RefinementList logic\n * var customRefinementList = instantsearch.connectors.connectRefinementList(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customRefinementList({\n *     containerNode: $('#custom-refinement-list-container'),\n *     attributeName: 'categories',\n *     limit: 10,\n *   })\n * );\n */\nexport default function connectRefinementList(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var attributeName = widgetParams.attributeName,\n        _widgetParams$operato = widgetParams.operator,\n        operator = _widgetParams$operato === undefined ? 'or' : _widgetParams$operato,\n        _widgetParams$limit = widgetParams.limit,\n        limit = _widgetParams$limit === undefined ? 10 : _widgetParams$limit,\n        showMoreLimit = widgetParams.showMoreLimit,\n        _widgetParams$sortBy = widgetParams.sortBy,\n        sortBy = _widgetParams$sortBy === undefined ? ['isRefined', 'count:desc', 'name:asc'] : _widgetParams$sortBy,\n        _widgetParams$escapeF = widgetParams.escapeFacetValues,\n        escapeFacetValues = _widgetParams$escapeF === undefined ? false : _widgetParams$escapeF,\n        _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n\n\n    checkUsage({\n      message: usage,\n      attributeName: attributeName,\n      operator: operator,\n      showMoreLimit: showMoreLimit,\n      limit: limit\n    });\n\n    var formatItems = function formatItems(_ref2) {\n      var label = _ref2.name,\n          item = _objectWithoutProperties(_ref2, ['name']);\n\n      return _extends({}, item, {\n        label: label,\n        value: label,\n        highlighted: label\n      });\n    };\n\n    var _render = function _render(_ref3) {\n      var items = _ref3.items,\n          state = _ref3.state,\n          createURL = _ref3.createURL,\n          helperSpecializedSearchFacetValues = _ref3.helperSpecializedSearchFacetValues,\n          refine = _ref3.refine,\n          isFromSearch = _ref3.isFromSearch,\n          isFirstSearch = _ref3.isFirstSearch,\n          isShowingMore = _ref3.isShowingMore,\n          toggleShowMore = _ref3.toggleShowMore,\n          hasExhaustiveItems = _ref3.hasExhaustiveItems,\n          instantSearchInstance = _ref3.instantSearchInstance;\n\n      // Compute a specific createURL method able to link to any facet value state change\n      var _createURL = function _createURL(facetValue) {\n        return createURL(state.toggleRefinement(attributeName, facetValue));\n      };\n\n      // Do not mistake searchForFacetValues and searchFacetValues which is the actual search\n      // function\n      var searchFacetValues = helperSpecializedSearchFacetValues && helperSpecializedSearchFacetValues(state, createURL, helperSpecializedSearchFacetValues, refine, instantSearchInstance);\n\n      renderFn({\n        createURL: _createURL,\n        items: items,\n        refine: refine,\n        searchForItems: searchFacetValues,\n        instantSearchInstance: instantSearchInstance,\n        isFromSearch: isFromSearch,\n        canRefine: isFromSearch || items.length > 0,\n        widgetParams: widgetParams,\n        isShowingMore: isShowingMore,\n        canToggleShowMore: showMoreLimit ? isShowingMore || !hasExhaustiveItems : false,\n        toggleShowMore: toggleShowMore,\n        hasExhaustiveItems: hasExhaustiveItems\n      }, isFirstSearch);\n    };\n\n    var lastResultsFromMainSearch = void 0;\n    var searchForFacetValues = void 0;\n    var refine = void 0;\n\n    var createSearchForFacetValues = function createSearchForFacetValues(helper) {\n      return function (state, createURL, helperSpecializedSearchFacetValues, toggleRefinement, instantSearchInstance) {\n        return function (query) {\n          if (query === '' && lastResultsFromMainSearch) {\n            // render with previous data from the helper.\n            _render({\n              items: lastResultsFromMainSearch,\n              state: state,\n              createURL: createURL,\n              helperSpecializedSearchFacetValues: helperSpecializedSearchFacetValues,\n              refine: toggleRefinement,\n              isFromSearch: false,\n              isFirstSearch: false,\n              instantSearchInstance: instantSearchInstance,\n              hasExhaustiveItems: false // SFFV should not be used with show more\n            });\n          } else {\n            var tags = {\n              highlightPreTag: escapeFacetValues ? tagConfig.highlightPreTag : undefined,\n              highlightPostTag: escapeFacetValues ? tagConfig.highlightPostTag : undefined\n            };\n\n            helper.searchForFacetValues(attributeName, query, limit, tags).then(function (results) {\n              var facetValues = escapeFacetValues ? escapeFacets(results.facetHits) : results.facetHits;\n\n              var normalizedFacetValues = transformItems(facetValues.map(function (_ref4) {\n                var value = _ref4.value,\n                    item = _objectWithoutProperties(_ref4, ['value']);\n\n                return _extends({}, item, {\n                  value: value,\n                  label: value\n                });\n              }));\n\n              _render({\n                items: normalizedFacetValues,\n                state: state,\n                createURL: createURL,\n                helperSpecializedSearchFacetValues: helperSpecializedSearchFacetValues,\n                refine: toggleRefinement,\n                isFromSearch: true,\n                isFirstSearch: false,\n                instantSearchInstance: instantSearchInstance,\n                hasExhaustiveItems: false // SFFV should not be used with show more\n              });\n            });\n          }\n        };\n      };\n    };\n\n    return {\n      isShowingMore: false,\n\n      // Provide the same function to the `renderFn` so that way the user\n      // has to only bind it once when `isFirstRendering` for instance\n      toggleShowMore: function toggleShowMore() {},\n      cachedToggleShowMore: function cachedToggleShowMore() {\n        this.toggleShowMore();\n      },\n      createToggleShowMore: function createToggleShowMore(renderOptions) {\n        var _this = this;\n\n        return function () {\n          _this.isShowingMore = !_this.isShowingMore;\n          _this.render(renderOptions);\n        };\n      },\n      getLimit: function getLimit() {\n        return this.isShowingMore ? showMoreLimit : limit;\n      },\n\n\n      getConfiguration: function getConfiguration() {\n        var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var widgetConfiguration = _defineProperty({}, operator === 'and' ? 'facets' : 'disjunctiveFacets', [attributeName]);\n\n        if (limit !== undefined) {\n          var currentMaxValuesPerFacet = configuration.maxValuesPerFacet || 0;\n          if (showMoreLimit === undefined) {\n            widgetConfiguration.maxValuesPerFacet = Math.max(currentMaxValuesPerFacet, limit);\n          } else {\n            widgetConfiguration.maxValuesPerFacet = Math.max(currentMaxValuesPerFacet, limit, showMoreLimit);\n          }\n        }\n\n        return widgetConfiguration;\n      },\n\n      init: function init(_ref5) {\n        var helper = _ref5.helper,\n            createURL = _ref5.createURL,\n            instantSearchInstance = _ref5.instantSearchInstance;\n\n        this.cachedToggleShowMore = this.cachedToggleShowMore.bind(this);\n\n        refine = function refine(facetValue) {\n          return helper.toggleRefinement(attributeName, facetValue).search();\n        };\n\n        searchForFacetValues = createSearchForFacetValues(helper);\n\n        _render({\n          items: [],\n          state: helper.state,\n          createURL: createURL,\n          helperSpecializedSearchFacetValues: searchForFacetValues,\n          refine: refine,\n          isFromSearch: false,\n          isFirstSearch: true,\n          instantSearchInstance: instantSearchInstance,\n          isShowingMore: this.isShowingMore,\n          toggleShowMore: this.cachedToggleShowMore,\n          hasExhaustiveItems: true\n        });\n      },\n      render: function render(renderOptions) {\n        var results = renderOptions.results,\n            state = renderOptions.state,\n            createURL = renderOptions.createURL,\n            instantSearchInstance = renderOptions.instantSearchInstance;\n\n\n        var facetValues = results.getFacetValues(attributeName, { sortBy: sortBy });\n        var items = transformItems(facetValues.slice(0, this.getLimit()).map(formatItems));\n\n        var maxValuesPerFacetConfig = state.getQueryParameter('maxValuesPerFacet');\n        var currentLimit = this.getLimit();\n        // If the limit is the max number of facet retrieved it is impossible to know\n        // if the facets are exhaustive. The only moment we are sure it is exhaustive\n        // is when it is strictly under the number requested unless we know that another\n        // widget has requested more values (maxValuesPerFacet > getLimit()).\n        // Because this is used for making the search of facets unable or not, it is important\n        // to be conservative here.\n        var hasExhaustiveItems = maxValuesPerFacetConfig > currentLimit ? facetValues.length <= currentLimit : facetValues.length < currentLimit;\n\n        lastResultsFromMainSearch = items;\n\n        this.toggleShowMore = this.createToggleShowMore(renderOptions);\n\n        _render({\n          items: items,\n          state: state,\n          createURL: createURL,\n          helperSpecializedSearchFacetValues: searchForFacetValues,\n          refine: refine,\n          isFromSearch: false,\n          isFirstSearch: false,\n          instantSearchInstance: instantSearchInstance,\n          isShowingMore: this.isShowingMore,\n          toggleShowMore: this.cachedToggleShowMore,\n          hasExhaustiveItems: hasExhaustiveItems\n        });\n      },\n      dispose: function dispose(_ref6) {\n        var state = _ref6.state;\n\n        unmountFn();\n\n        if (operator === 'and') {\n          return state.removeFacetRefinement(attributeName).removeFacet(attributeName);\n        } else {\n          return state.removeDisjunctiveFacetRefinement(attributeName).removeDisjunctiveFacet(attributeName);\n        }\n      },\n      getWidgetState: function getWidgetState(uiState, _ref7) {\n        var searchParameters = _ref7.searchParameters;\n\n        var values = operator === 'or' ? searchParameters.getDisjunctiveRefinements(attributeName) : searchParameters.getConjunctiveRefinements(attributeName);\n\n        if (values.length === 0 || uiState.refinementList && isEqual(values, uiState.refinementList[attributeName])) {\n          return uiState;\n        }\n\n        return _extends({}, uiState, {\n          refinementList: _extends({}, uiState.refinementList, _defineProperty({}, attributeName, values))\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref8) {\n        var uiState = _ref8.uiState;\n\n        var values = uiState.refinementList && uiState.refinementList[attributeName];\n        if (values === undefined) return searchParameters;\n        return values.reduce(function (sp, v) {\n          return operator === 'or' ? sp.addDisjunctiveFacetRefinement(attributeName, v) : sp.addFacetRefinement(attributeName, v);\n        }, searchParameters.clearRefinements(attributeName));\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}