{"ast":null,"code":"import escapeHits, { tagConfig } from '../../lib/escape-highlight.js';\nimport { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customHits = connectHits(function render(params, isFirstRendering) {\\n  // params = {\\n  //   hits,\\n  //   results,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customHits({\\n    [ escapeHits = false ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectHits.html\\n';\n/**\n * @typedef {Object} HitsRenderingOptions\n * @property {Object[]} hits The matched hits from Algolia API.\n * @property {Object} results The complete results response from Algolia API.\n * @property {Object} widgetParams All original widget options forwarded to the `renderFn`.\n */\n\n/**\n * @typedef {Object} CustomHitsWidgetOptions\n * @property {boolean} [escapeHits = false] If true, escape HTML tags from `hits[i]._highlightResult`.\n * @property {function(Object[]):Object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * **Hits** connector provides the logic to create custom widgets that will render the results retrieved from Algolia.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/hits/js/\n * @param {function(HitsRenderingOptions, boolean)} renderFn Rendering function for the custom **Hits** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomHitsWidgetOptions)} Re-usable widget factory for a custom **Hits** widget.\n * @example\n * // custom `renderFn` to render the custom Hits widget\n * function renderFn(HitsRenderingOptions) {\n *   HitsRenderingOptions.widgetParams.containerNode.html(\n *     HitsRenderingOptions.hits.map(function(hit) {\n *       return '<div>' + hit._highlightResult.name.value + '</div>';\n *     })\n *   );\n * }\n *\n * // connect `renderFn` to Hits logic\n * var customHits = instantsearch.connectors.connectHits(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customHits({\n *     containerNode: $('#custom-hits-container'),\n *   })\n * );\n */\n\nexport default function connectHits(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n    return {\n      getConfiguration: function getConfiguration() {\n        return widgetParams.escapeHits ? tagConfig : undefined;\n      },\n      init: function init(_ref) {\n        var instantSearchInstance = _ref.instantSearchInstance;\n        renderFn({\n          hits: [],\n          results: undefined,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var results = _ref2.results,\n            instantSearchInstance = _ref2.instantSearchInstance;\n        results.hits = transformItems(results.hits);\n\n        if (widgetParams.escapeHits && results.hits && results.hits.length > 0) {\n          results.hits = escapeHits(results.hits);\n        }\n\n        renderFn({\n          hits: results.hits,\n          results: results,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose() {\n        unmountFn();\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/hits/connectHits.js"],"names":["escapeHits","tagConfig","checkRendering","usage","connectHits","renderFn","unmountFn","widgetParams","arguments","length","undefined","_widgetParams$transfo","transformItems","items","getConfiguration","init","_ref","instantSearchInstance","hits","results","render","_ref2","dispose"],"mappings":"AAAA,OAAOA,UAAP,IAAqBC,SAArB,QAAsC,+BAAtC;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA,IAAIC,KAAK,GAAG,uZAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,SAA/B,EAA0C;AACvDJ,EAAAA,cAAc,CAACG,QAAD,EAAWF,KAAX,CAAd;AAEA,SAAO,YAAY;AACjB,QAAII,YAAY,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAvF;AACA,QAAIG,qBAAqB,GAAGJ,YAAY,CAACK,cAAzC;AAAA,QACIA,cAAc,GAAGD,qBAAqB,KAAKD,SAA1B,GAAsC,UAAUG,KAAV,EAAiB;AAC1E,aAAOA,KAAP;AACD,KAFoB,GAEjBF,qBAHJ;AAMA,WAAO;AACLG,MAAAA,gBAAgB,EAAE,SAASA,gBAAT,GAA4B;AAC5C,eAAOP,YAAY,CAACP,UAAb,GAA0BC,SAA1B,GAAsCS,SAA7C;AACD,OAHI;AAILK,MAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC,IAAd,EAAoB;AACxB,YAAIC,qBAAqB,GAAGD,IAAI,CAACC,qBAAjC;AAEAZ,QAAAA,QAAQ,CAAC;AACPa,UAAAA,IAAI,EAAE,EADC;AAEPC,UAAAA,OAAO,EAAET,SAFF;AAGPO,UAAAA,qBAAqB,EAAEA,qBAHhB;AAIPV,UAAAA,YAAY,EAAEA;AAJP,SAAD,EAKL,IALK,CAAR;AAMD,OAbI;AAcLa,MAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AAC7B,YAAIF,OAAO,GAAGE,KAAK,CAACF,OAApB;AAAA,YACIF,qBAAqB,GAAGI,KAAK,CAACJ,qBADlC;AAGAE,QAAAA,OAAO,CAACD,IAAR,GAAeN,cAAc,CAACO,OAAO,CAACD,IAAT,CAA7B;;AAEA,YAAIX,YAAY,CAACP,UAAb,IAA2BmB,OAAO,CAACD,IAAnC,IAA2CC,OAAO,CAACD,IAAR,CAAaT,MAAb,GAAsB,CAArE,EAAwE;AACtEU,UAAAA,OAAO,CAACD,IAAR,GAAelB,UAAU,CAACmB,OAAO,CAACD,IAAT,CAAzB;AACD;;AAEDb,QAAAA,QAAQ,CAAC;AACPa,UAAAA,IAAI,EAAEC,OAAO,CAACD,IADP;AAEPC,UAAAA,OAAO,EAAEA,OAFF;AAGPF,UAAAA,qBAAqB,EAAEA,qBAHhB;AAIPV,UAAAA,YAAY,EAAEA;AAJP,SAAD,EAKL,KALK,CAAR;AAMD,OA9BI;AA+BLe,MAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1BhB,QAAAA,SAAS;AACV;AAjCI,KAAP;AAmCD,GA3CD;AA4CD","sourcesContent":["import escapeHits, { tagConfig } from '../../lib/escape-highlight.js';\nimport { checkRendering } from '../../lib/utils.js';\n\nvar usage = 'Usage:\\nvar customHits = connectHits(function render(params, isFirstRendering) {\\n  // params = {\\n  //   hits,\\n  //   results,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customHits({\\n    [ escapeHits = false ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectHits.html\\n';\n\n/**\n * @typedef {Object} HitsRenderingOptions\n * @property {Object[]} hits The matched hits from Algolia API.\n * @property {Object} results The complete results response from Algolia API.\n * @property {Object} widgetParams All original widget options forwarded to the `renderFn`.\n */\n\n/**\n * @typedef {Object} CustomHitsWidgetOptions\n * @property {boolean} [escapeHits = false] If true, escape HTML tags from `hits[i]._highlightResult`.\n * @property {function(Object[]):Object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * **Hits** connector provides the logic to create custom widgets that will render the results retrieved from Algolia.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/hits/js/\n * @param {function(HitsRenderingOptions, boolean)} renderFn Rendering function for the custom **Hits** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomHitsWidgetOptions)} Re-usable widget factory for a custom **Hits** widget.\n * @example\n * // custom `renderFn` to render the custom Hits widget\n * function renderFn(HitsRenderingOptions) {\n *   HitsRenderingOptions.widgetParams.containerNode.html(\n *     HitsRenderingOptions.hits.map(function(hit) {\n *       return '<div>' + hit._highlightResult.name.value + '</div>';\n *     })\n *   );\n * }\n *\n * // connect `renderFn` to Hits logic\n * var customHits = instantsearch.connectors.connectHits(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customHits({\n *     containerNode: $('#custom-hits-container'),\n *   })\n * );\n */\nexport default function connectHits(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n\n\n    return {\n      getConfiguration: function getConfiguration() {\n        return widgetParams.escapeHits ? tagConfig : undefined;\n      },\n      init: function init(_ref) {\n        var instantSearchInstance = _ref.instantSearchInstance;\n\n        renderFn({\n          hits: [],\n          results: undefined,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var results = _ref2.results,\n            instantSearchInstance = _ref2.instantSearchInstance;\n\n        results.hits = transformItems(results.hits);\n\n        if (widgetParams.escapeHits && results.hits && results.hits.length > 0) {\n          results.hits = escapeHits(results.hits);\n        }\n\n        renderFn({\n          hits: results.hits,\n          results: results,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose() {\n        unmountFn();\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}