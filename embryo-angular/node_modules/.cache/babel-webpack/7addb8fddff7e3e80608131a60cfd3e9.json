{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nimport some from 'lodash/some';\nimport find from 'lodash/find';\nimport { checkRendering, warn } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customHitsPerPage = connectHitsPerPage(function render(params, isFirstRendering) {\\n  // params = {\\n  //   items,\\n  //   refine,\\n  //   hasNoResults,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customHitsPerPage({\\n    items: [\\n      {value: 5, label: \\'5 results per page\\', default: true},\\n      {value: 10, label: \\'10 results per page\\'},\\n      {value: 42, label: \\'42 results per page\\'},\\n    ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectHitsPerPage.html\\n';\n/**\n * @typedef {Object} HitsPerPageRenderingOptionsItem\n * @property {number} value Number of hits to display per page.\n * @property {string} label Label to display in the option.\n * @property {boolean} isRefined Indicates if it's the current refined value.\n */\n\n/**\n * @typedef {Object} HitsPerPageWidgetOptionsItem\n * @property {number} value Number of hits to display per page.\n * @property {string} label Label to display in the option.\n * @property {boolean} default The default hits per page on first search.\n */\n\n/**\n * @typedef {Object} HitsPerPageRenderingOptions\n * @property {HitsPerPageRenderingOptionsItem[]} items Array of objects defining the different values and labels.\n * @property {function(number)} refine Sets the number of hits per page and trigger a search.\n * @property {boolean} hasNoResults `true` if the last search contains no result.\n * @property {Object} widgetParams Original `HitsPerPageWidgetOptions` forwarded to `renderFn`.\n */\n\n/**\n * @typedef {Object} HitsPerPageWidgetOptions\n * @property {HitsPerPageWidgetOptionsItem[]} items Array of objects defining the different values and labels.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * **HitsPerPage** connector provides the logic to create custom widget that will\n * allow a user to choose to display more or less results from Algolia.\n *\n * This connector provides a `refine()` function to change the hits per page configuration and trigger a new search.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/hits-per-page/js/\n * @param {function(HitsPerPageRenderingOptions, boolean)} renderFn Rendering function for the custom **HitsPerPage** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(HitsPerPageWidgetOptions)} Re-usable widget factory for a custom **HitsPerPage** widget.\n * @example\n * // custom `renderFn` to render the custom HitsPerPage widget\n * function renderFn(HitsPerPageRenderingOptions, isFirstRendering) {\n *   var containerNode = HitsPerPageRenderingOptions.widgetParams.containerNode\n *   var items = HitsPerPageRenderingOptions.items\n *   var refine = HitsPerPageRenderingOptions.refine\n *\n *   if (isFirstRendering) {\n *     var markup = '<select></select>';\n *     containerNode.append(markup);\n *   }\n *\n *   const itemsHTML = items.map(({value, label, isRefined}) => `\n *     <option\n *       value=\"${value}\"\n *       ${isRefined ? 'selected' : ''}\n *     >\n *       ${label}\n *     </option>\n *   `);\n *\n *   containerNode\n *     .find('select')\n *     .html(itemsHTML);\n *\n *   containerNode\n *     .find('select')\n *     .off('change')\n *     .on('change', e => { refine(e.target.value); });\n * }\n *\n * // connect `renderFn` to HitsPerPage logic\n * var customHitsPerPage = instantsearch.connectors.connectHitsPerPage(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customHitsPerPage({\n *     containerNode: $('#custom-hits-per-page-container'),\n *     items: [\n *       {value: 6, label: '6 per page', default: true},\n *       {value: 12, label: '12 per page'},\n *       {value: 24, label: '24 per page'},\n *     ],\n *   })\n * );\n */\n\nexport default function connectHitsPerPage(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var userItems = widgetParams.items,\n        _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n    var items = userItems;\n\n    if (!items) {\n      throw new Error(usage);\n    }\n\n    var defaultValues = items.filter(function (item) {\n      return item.default;\n    });\n\n    if (defaultValues.length > 1) {\n      throw new Error('[Error][hitsPerPageSelector] more than one default value is specified in `items[]`\\nThe first one will be picked, you should probably set only one default value');\n    }\n\n    var defaultValue = find(userItems, function (item) {\n      return item.default === true;\n    });\n    return {\n      getConfiguration: function getConfiguration() {\n        return defaultValues.length > 0 ? {\n          hitsPerPage: defaultValues[0].value\n        } : {};\n      },\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            state = _ref.state,\n            instantSearchInstance = _ref.instantSearchInstance;\n        var isCurrentInOptions = some(items, function (item) {\n          return Number(state.hitsPerPage) === Number(item.value);\n        });\n\n        if (!isCurrentInOptions) {\n          if (state.hitsPerPage === undefined) {\n            if (window.console) {\n              warn('[hitsPerPageSelector] hitsPerPage not defined.\\n  You should probably set the value `hitsPerPage`\\n  using the searchParameters attribute of the instantsearch constructor.');\n            }\n          } else if (window.console) {\n            warn('[hitsPerPageSelector] No item in `items`\\n  with `value: hitsPerPage` (hitsPerPage: ' + state.hitsPerPage + ')');\n          }\n\n          items = [{\n            value: '',\n            label: ''\n          }].concat(_toConsumableArray(items));\n        }\n\n        this.setHitsPerPage = function (value) {\n          return !value && value !== 0 ? helper.setQueryParameter('hitsPerPage', undefined).search() : helper.setQueryParameter('hitsPerPage', value).search();\n        };\n\n        renderFn({\n          items: transformItems(this._normalizeItems(state)),\n          refine: this.setHitsPerPage,\n          hasNoResults: true,\n          widgetParams: widgetParams,\n          instantSearchInstance: instantSearchInstance\n        }, true);\n      },\n      render: function render(_ref2) {\n        var state = _ref2.state,\n            results = _ref2.results,\n            instantSearchInstance = _ref2.instantSearchInstance;\n        var hasNoResults = results.nbHits === 0;\n        renderFn({\n          items: transformItems(this._normalizeItems(state)),\n          refine: this.setHitsPerPage,\n          hasNoResults: hasNoResults,\n          widgetParams: widgetParams,\n          instantSearchInstance: instantSearchInstance\n        }, false);\n      },\n      _normalizeItems: function _normalizeItems(_ref3) {\n        var hitsPerPage = _ref3.hitsPerPage;\n        return items.map(function (item) {\n          return _extends({}, item, {\n            isRefined: Number(item.value) === Number(hitsPerPage)\n          });\n        });\n      },\n      dispose: function dispose() {\n        unmountFn();\n      },\n      getWidgetState: function getWidgetState(uiState, _ref4) {\n        var searchParameters = _ref4.searchParameters;\n        var hitsPerPage = searchParameters.hitsPerPage;\n\n        if (defaultValue && hitsPerPage === defaultValue.value || hitsPerPage === undefined || uiState.hitsPerPage === hitsPerPage) {\n          return uiState;\n        }\n\n        return _extends({}, uiState, {\n          hitsPerPage: hitsPerPage\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n        var uiState = _ref5.uiState;\n        var hitsPerPage = uiState.hitsPerPage;\n        if (hitsPerPage) return searchParameters.setQueryParameter('hitsPerPage', uiState.hitsPerPage);\n\n        if (defaultValue) {\n          return searchParameters.setQueryParameter('hitsPerPage', defaultValue.value);\n        }\n\n        return searchParameters.setQueryParameter('hitsPerPage', undefined);\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/hits-per-page/connectHitsPerPage.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_toConsumableArray","arr","Array","isArray","arr2","from","some","find","checkRendering","warn","usage","connectHitsPerPage","renderFn","unmountFn","widgetParams","undefined","userItems","items","_widgetParams$transfo","transformItems","Error","defaultValues","filter","item","default","defaultValue","getConfiguration","hitsPerPage","value","init","_ref","helper","state","instantSearchInstance","isCurrentInOptions","Number","window","console","label","concat","setHitsPerPage","setQueryParameter","search","_normalizeItems","refine","hasNoResults","render","_ref2","results","nbHits","_ref3","map","isRefined","dispose","getWidgetState","uiState","_ref4","searchParameters","getWidgetSearchParameters","_ref5"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport some from 'lodash/some';\nimport find from 'lodash/find';\n\nimport { checkRendering, warn } from '../../lib/utils.js';\n\nvar usage = 'Usage:\\nvar customHitsPerPage = connectHitsPerPage(function render(params, isFirstRendering) {\\n  // params = {\\n  //   items,\\n  //   refine,\\n  //   hasNoResults,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customHitsPerPage({\\n    items: [\\n      {value: 5, label: \\'5 results per page\\', default: true},\\n      {value: 10, label: \\'10 results per page\\'},\\n      {value: 42, label: \\'42 results per page\\'},\\n    ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectHitsPerPage.html\\n';\n\n/**\n * @typedef {Object} HitsPerPageRenderingOptionsItem\n * @property {number} value Number of hits to display per page.\n * @property {string} label Label to display in the option.\n * @property {boolean} isRefined Indicates if it's the current refined value.\n */\n\n/**\n * @typedef {Object} HitsPerPageWidgetOptionsItem\n * @property {number} value Number of hits to display per page.\n * @property {string} label Label to display in the option.\n * @property {boolean} default The default hits per page on first search.\n */\n\n/**\n * @typedef {Object} HitsPerPageRenderingOptions\n * @property {HitsPerPageRenderingOptionsItem[]} items Array of objects defining the different values and labels.\n * @property {function(number)} refine Sets the number of hits per page and trigger a search.\n * @property {boolean} hasNoResults `true` if the last search contains no result.\n * @property {Object} widgetParams Original `HitsPerPageWidgetOptions` forwarded to `renderFn`.\n */\n\n/**\n * @typedef {Object} HitsPerPageWidgetOptions\n * @property {HitsPerPageWidgetOptionsItem[]} items Array of objects defining the different values and labels.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * **HitsPerPage** connector provides the logic to create custom widget that will\n * allow a user to choose to display more or less results from Algolia.\n *\n * This connector provides a `refine()` function to change the hits per page configuration and trigger a new search.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/hits-per-page/js/\n * @param {function(HitsPerPageRenderingOptions, boolean)} renderFn Rendering function for the custom **HitsPerPage** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(HitsPerPageWidgetOptions)} Re-usable widget factory for a custom **HitsPerPage** widget.\n * @example\n * // custom `renderFn` to render the custom HitsPerPage widget\n * function renderFn(HitsPerPageRenderingOptions, isFirstRendering) {\n *   var containerNode = HitsPerPageRenderingOptions.widgetParams.containerNode\n *   var items = HitsPerPageRenderingOptions.items\n *   var refine = HitsPerPageRenderingOptions.refine\n *\n *   if (isFirstRendering) {\n *     var markup = '<select></select>';\n *     containerNode.append(markup);\n *   }\n *\n *   const itemsHTML = items.map(({value, label, isRefined}) => `\n *     <option\n *       value=\"${value}\"\n *       ${isRefined ? 'selected' : ''}\n *     >\n *       ${label}\n *     </option>\n *   `);\n *\n *   containerNode\n *     .find('select')\n *     .html(itemsHTML);\n *\n *   containerNode\n *     .find('select')\n *     .off('change')\n *     .on('change', e => { refine(e.target.value); });\n * }\n *\n * // connect `renderFn` to HitsPerPage logic\n * var customHitsPerPage = instantsearch.connectors.connectHitsPerPage(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customHitsPerPage({\n *     containerNode: $('#custom-hits-per-page-container'),\n *     items: [\n *       {value: 6, label: '6 per page', default: true},\n *       {value: 12, label: '12 per page'},\n *       {value: 24, label: '24 per page'},\n *     ],\n *   })\n * );\n */\nexport default function connectHitsPerPage(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var userItems = widgetParams.items,\n        _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n\n    var items = userItems;\n\n    if (!items) {\n      throw new Error(usage);\n    }\n\n    var defaultValues = items.filter(function (item) {\n      return item.default;\n    });\n    if (defaultValues.length > 1) {\n      throw new Error('[Error][hitsPerPageSelector] more than one default value is specified in `items[]`\\nThe first one will be picked, you should probably set only one default value');\n    }\n\n    var defaultValue = find(userItems, function (item) {\n      return item.default === true;\n    });\n\n    return {\n      getConfiguration: function getConfiguration() {\n        return defaultValues.length > 0 ? { hitsPerPage: defaultValues[0].value } : {};\n      },\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            state = _ref.state,\n            instantSearchInstance = _ref.instantSearchInstance;\n\n        var isCurrentInOptions = some(items, function (item) {\n          return Number(state.hitsPerPage) === Number(item.value);\n        });\n\n        if (!isCurrentInOptions) {\n          if (state.hitsPerPage === undefined) {\n            if (window.console) {\n              warn('[hitsPerPageSelector] hitsPerPage not defined.\\n  You should probably set the value `hitsPerPage`\\n  using the searchParameters attribute of the instantsearch constructor.');\n            }\n          } else if (window.console) {\n            warn('[hitsPerPageSelector] No item in `items`\\n  with `value: hitsPerPage` (hitsPerPage: ' + state.hitsPerPage + ')');\n          }\n\n          items = [{ value: '', label: '' }].concat(_toConsumableArray(items));\n        }\n\n        this.setHitsPerPage = function (value) {\n          return !value && value !== 0 ? helper.setQueryParameter('hitsPerPage', undefined).search() : helper.setQueryParameter('hitsPerPage', value).search();\n        };\n\n        renderFn({\n          items: transformItems(this._normalizeItems(state)),\n          refine: this.setHitsPerPage,\n          hasNoResults: true,\n          widgetParams: widgetParams,\n          instantSearchInstance: instantSearchInstance\n        }, true);\n      },\n      render: function render(_ref2) {\n        var state = _ref2.state,\n            results = _ref2.results,\n            instantSearchInstance = _ref2.instantSearchInstance;\n\n        var hasNoResults = results.nbHits === 0;\n\n        renderFn({\n          items: transformItems(this._normalizeItems(state)),\n          refine: this.setHitsPerPage,\n          hasNoResults: hasNoResults,\n          widgetParams: widgetParams,\n          instantSearchInstance: instantSearchInstance\n        }, false);\n      },\n      _normalizeItems: function _normalizeItems(_ref3) {\n        var hitsPerPage = _ref3.hitsPerPage;\n\n        return items.map(function (item) {\n          return _extends({}, item, {\n            isRefined: Number(item.value) === Number(hitsPerPage)\n          });\n        });\n      },\n      dispose: function dispose() {\n        unmountFn();\n      },\n      getWidgetState: function getWidgetState(uiState, _ref4) {\n        var searchParameters = _ref4.searchParameters;\n\n        var hitsPerPage = searchParameters.hitsPerPage;\n        if (defaultValue && hitsPerPage === defaultValue.value || hitsPerPage === undefined || uiState.hitsPerPage === hitsPerPage) {\n          return uiState;\n        }\n\n        return _extends({}, uiState, {\n          hitsPerPage: hitsPerPage\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n        var uiState = _ref5.uiState;\n\n        var hitsPerPage = uiState.hitsPerPage;\n        if (hitsPerPage) return searchParameters.setQueryParameter('hitsPerPage', uiState.hitsPerPage);\n        if (defaultValue) {\n          return searchParameters.setQueryParameter('hitsPerPage', defaultValue.value);\n        }\n        return searchParameters.setQueryParameter('hitsPerPage', undefined);\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}