{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { checkRendering, escapeRefinement, unescapeRefinement } from '../../lib/utils.js';\nimport find from 'lodash/find';\nvar usage = 'Usage:\\nvar customToggle = connectToggle(function render(params, isFirstRendering) {\\n  // params = {\\n  //   value,\\n  //   createURL,\\n  //   refine,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customToggle({\\n    attributeName,\\n    label,\\n    [ values = {on: true, off: undefined} ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectToggle.html\\n';\n/**\n * @typedef {Object} ToggleValue\n * @property {string} name Human-readable name of the filter.\n * @property {boolean} isRefined `true` if the toggle is on.\n * @property {number} count Number of results matched after applying the toggle refinement.\n * @property {Object} onFacetValue Value of the toggle when it's on.\n * @property {Object} offFacetValue Value of the toggle when it's off.\n */\n\n/**\n * @typedef {Object} CustomToggleWidgetOptions\n * @property {string} attributeName Name of the attribute for faceting (eg. \"free_shipping\").\n * @property {string} label Human-readable name of the filter (eg. \"Free Shipping\").\n * @property {Object} [values = {on: true, off: undefined}] Values to filter on when toggling.\n */\n\n/**\n * @typedef {Object} ToggleRenderingOptions\n * @property {ToggleValue} value The current toggle value.\n * @property {function(): string} createURL Creates an URL for the next state.\n * @property {function(value)} refine Updates to the next state by applying the toggle refinement.\n * @property {Object} widgetParams All original `CustomToggleWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * **Toggle** connector provides the logic to build a custom widget that will provide\n * an on/off filtering feature based on an attribute value or values.\n *\n * Two modes are implemented in the custom widget:\n *  - with or without the value filtered\n *  - switch between two values.\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/toggle-refinement/js/\n * @param {function(ToggleRenderingOptions, boolean)} renderFn Rendering function for the custom **Toggle** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomToggleWidgetOptions)} Re-usable widget factory for a custom **Toggle** widget.\n * @example\n * // custom `renderFn` to render the custom ClearAll widget\n * function renderFn(ToggleRenderingOptions, isFirstRendering) {\n *   ToggleRenderingOptions.widgetParams.containerNode\n *     .find('a')\n *     .off('click');\n *\n *   var buttonHTML = `\n *     <a href=\"${ToggleRenderingOptions.createURL()}\">\n *       <input\n *         type=\"checkbox\"\n *         value=\"${ToggleRenderingOptions.value.name}\"\n *         ${ToggleRenderingOptions.value.isRefined ? 'checked' : ''}\n *       />\n *       ${ToggleRenderingOptions.value.name} (${ToggleRenderingOptions.value.count})\n *     </a>\n *   `;\n *\n *   ToggleRenderingOptions.widgetParams.containerNode.html(buttonHTML);\n *   ToggleRenderingOptions.widgetParams.containerNode\n *     .find('a')\n *     .on('click', function(event) {\n *       event.preventDefault();\n *       event.stopPropagation();\n *\n *       ToggleRenderingOptions.refine(ToggleRenderingOptions.value);\n *     });\n * }\n *\n * // connect `renderFn` to Toggle logic\n * var customToggle = instantsearch.connectors.connectToggle(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customToggle({\n *     containerNode: $('#custom-toggle-container'),\n *     attributeName: 'free_shipping',\n *     label: 'Free Shipping (toggle single value)',\n *   })\n * );\n */\n\nexport default function connectToggle(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var attributeName = widgetParams.attributeName,\n        label = widgetParams.label,\n        _widgetParams$values = widgetParams.values,\n        userValues = _widgetParams$values === undefined ? {\n      on: true,\n      off: undefined\n    } : _widgetParams$values;\n\n    if (!attributeName || !label) {\n      throw new Error(usage);\n    }\n\n    var hasAnOffValue = userValues.off !== undefined;\n    var on = userValues ? escapeRefinement(userValues.on) : undefined;\n    var off = userValues ? escapeRefinement(userValues.off) : undefined;\n    return {\n      getConfiguration: function getConfiguration() {\n        return {\n          disjunctiveFacets: [attributeName]\n        };\n      },\n      _toggleRefinement: function _toggleRefinement(helper) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            isRefined = _ref.isRefined; // Checking\n\n\n        if (!isRefined) {\n          if (hasAnOffValue) {\n            helper.removeDisjunctiveFacetRefinement(attributeName, off);\n          }\n\n          helper.addDisjunctiveFacetRefinement(attributeName, on);\n        } else {\n          // Unchecking\n          helper.removeDisjunctiveFacetRefinement(attributeName, on);\n\n          if (hasAnOffValue) {\n            helper.addDisjunctiveFacetRefinement(attributeName, off);\n          }\n        }\n\n        helper.search();\n      },\n      init: function init(_ref2) {\n        var _this = this;\n\n        var state = _ref2.state,\n            helper = _ref2.helper,\n            createURL = _ref2.createURL,\n            instantSearchInstance = _ref2.instantSearchInstance;\n\n        this._createURL = function (isCurrentlyRefined) {\n          return function () {\n            return createURL(state.removeDisjunctiveFacetRefinement(attributeName, isCurrentlyRefined ? on : off).addDisjunctiveFacetRefinement(attributeName, isCurrentlyRefined ? off : on));\n          };\n        };\n\n        this.toggleRefinement = function (opts) {\n          _this._toggleRefinement(helper, opts);\n        };\n\n        var isRefined = state.isDisjunctiveFacetRefined(attributeName, on); // no need to refine anything at init if no custom off values\n\n        if (hasAnOffValue) {\n          // Add filtering on the 'off' value if set\n          if (!isRefined) {\n            var currentPage = helper.getPage();\n            helper.addDisjunctiveFacetRefinement(attributeName, off).setPage(currentPage);\n          }\n        }\n\n        var onFacetValue = {\n          name: label,\n          isRefined: isRefined,\n          count: 0\n        };\n        var offFacetValue = {\n          name: label,\n          isRefined: hasAnOffValue && !isRefined,\n          count: 0\n        };\n        var value = {\n          name: label,\n          isRefined: isRefined,\n          count: null,\n          onFacetValue: onFacetValue,\n          offFacetValue: offFacetValue\n        };\n        renderFn({\n          value: value,\n          createURL: this._createURL(value.isRefined),\n          refine: this.toggleRefinement,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref3) {\n        var helper = _ref3.helper,\n            results = _ref3.results,\n            state = _ref3.state,\n            instantSearchInstance = _ref3.instantSearchInstance;\n        var isRefined = helper.state.isDisjunctiveFacetRefined(attributeName, on);\n        var offValue = off === undefined ? false : off;\n        var allFacetValues = results.getFacetValues(attributeName);\n        var onData = find(allFacetValues, function (_ref4) {\n          var name = _ref4.name;\n          return name === unescapeRefinement(on);\n        });\n        var onFacetValue = {\n          name: label,\n          isRefined: onData !== undefined ? onData.isRefined : false,\n          count: onData === undefined ? null : onData.count\n        };\n        var offData = hasAnOffValue ? find(allFacetValues, function (_ref5) {\n          var name = _ref5.name;\n          return name === unescapeRefinement(offValue);\n        }) : undefined;\n        var offFacetValue = {\n          name: label,\n          isRefined: offData !== undefined ? offData.isRefined : false,\n          count: offData === undefined ? allFacetValues.reduce(function (total, _ref6) {\n            var count = _ref6.count;\n            return total + count;\n          }, 0) : offData.count\n        }; // what will we show by default,\n        // if checkbox is not checked, show: [ ] free shipping (countWhenChecked)\n        // if checkbox is checked, show: [x] free shipping (countWhenNotChecked)\n\n        var nextRefinement = isRefined ? offFacetValue : onFacetValue;\n        var value = {\n          name: label,\n          isRefined: isRefined,\n          count: nextRefinement === undefined ? null : nextRefinement.count,\n          onFacetValue: onFacetValue,\n          offFacetValue: offFacetValue\n        };\n        renderFn({\n          value: value,\n          state: state,\n          createURL: this._createURL(value.isRefined),\n          refine: this.toggleRefinement,\n          helper: helper,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose(_ref7) {\n        var state = _ref7.state;\n        unmountFn();\n        var nextState = state.removeDisjunctiveFacetRefinement(attributeName).removeDisjunctiveFacet(attributeName);\n        return nextState;\n      },\n      getWidgetState: function getWidgetState(uiState, _ref8) {\n        var searchParameters = _ref8.searchParameters;\n        var isRefined = searchParameters.isDisjunctiveFacetRefined(attributeName, on);\n\n        if (!isRefined || uiState && uiState.toggle && uiState.toggle[attributeName] === isRefined) {\n          return uiState;\n        }\n\n        return _extends({}, uiState, {\n          toggle: _extends({}, uiState.toggle, _defineProperty({}, attributeName, isRefined))\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref9) {\n        var uiState = _ref9.uiState;\n        var isRefined = Boolean(uiState.toggle && uiState.toggle[attributeName]);\n\n        if (isRefined) {\n          if (hasAnOffValue) return searchParameters.removeDisjunctiveFacetRefinement(attributeName, off).addDisjunctiveFacetRefinement(attributeName, on);\n          return searchParameters.addDisjunctiveFacetRefinement(attributeName, on);\n        }\n\n        if (hasAnOffValue) return searchParameters.removeDisjunctiveFacetRefinement(attributeName, on).addDisjunctiveFacetRefinement(attributeName, off);\n        return searchParameters.removeDisjunctiveFacetRefinement(attributeName, on);\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/toggle/connectToggle.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","checkRendering","escapeRefinement","unescapeRefinement","find","usage","connectToggle","renderFn","unmountFn","widgetParams","undefined","attributeName","label","_widgetParams$values","values","userValues","on","off","Error","hasAnOffValue","getConfiguration","disjunctiveFacets","_toggleRefinement","helper","_ref","isRefined","removeDisjunctiveFacetRefinement","addDisjunctiveFacetRefinement","search","init","_ref2","_this","state","createURL","instantSearchInstance","_createURL","isCurrentlyRefined","toggleRefinement","opts","isDisjunctiveFacetRefined","currentPage","getPage","setPage","onFacetValue","name","count","offFacetValue","refine","render","_ref3","results","offValue","allFacetValues","getFacetValues","onData","_ref4","offData","_ref5","reduce","total","_ref6","nextRefinement","dispose","_ref7","nextState","removeDisjunctiveFacet","getWidgetState","uiState","_ref8","searchParameters","toggle","getWidgetSearchParameters","_ref9","Boolean"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { checkRendering, escapeRefinement, unescapeRefinement } from '../../lib/utils.js';\n\nimport find from 'lodash/find';\n\nvar usage = 'Usage:\\nvar customToggle = connectToggle(function render(params, isFirstRendering) {\\n  // params = {\\n  //   value,\\n  //   createURL,\\n  //   refine,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customToggle({\\n    attributeName,\\n    label,\\n    [ values = {on: true, off: undefined} ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectToggle.html\\n';\n\n/**\n * @typedef {Object} ToggleValue\n * @property {string} name Human-readable name of the filter.\n * @property {boolean} isRefined `true` if the toggle is on.\n * @property {number} count Number of results matched after applying the toggle refinement.\n * @property {Object} onFacetValue Value of the toggle when it's on.\n * @property {Object} offFacetValue Value of the toggle when it's off.\n */\n\n/**\n * @typedef {Object} CustomToggleWidgetOptions\n * @property {string} attributeName Name of the attribute for faceting (eg. \"free_shipping\").\n * @property {string} label Human-readable name of the filter (eg. \"Free Shipping\").\n * @property {Object} [values = {on: true, off: undefined}] Values to filter on when toggling.\n */\n\n/**\n * @typedef {Object} ToggleRenderingOptions\n * @property {ToggleValue} value The current toggle value.\n * @property {function(): string} createURL Creates an URL for the next state.\n * @property {function(value)} refine Updates to the next state by applying the toggle refinement.\n * @property {Object} widgetParams All original `CustomToggleWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * **Toggle** connector provides the logic to build a custom widget that will provide\n * an on/off filtering feature based on an attribute value or values.\n *\n * Two modes are implemented in the custom widget:\n *  - with or without the value filtered\n *  - switch between two values.\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/toggle-refinement/js/\n * @param {function(ToggleRenderingOptions, boolean)} renderFn Rendering function for the custom **Toggle** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomToggleWidgetOptions)} Re-usable widget factory for a custom **Toggle** widget.\n * @example\n * // custom `renderFn` to render the custom ClearAll widget\n * function renderFn(ToggleRenderingOptions, isFirstRendering) {\n *   ToggleRenderingOptions.widgetParams.containerNode\n *     .find('a')\n *     .off('click');\n *\n *   var buttonHTML = `\n *     <a href=\"${ToggleRenderingOptions.createURL()}\">\n *       <input\n *         type=\"checkbox\"\n *         value=\"${ToggleRenderingOptions.value.name}\"\n *         ${ToggleRenderingOptions.value.isRefined ? 'checked' : ''}\n *       />\n *       ${ToggleRenderingOptions.value.name} (${ToggleRenderingOptions.value.count})\n *     </a>\n *   `;\n *\n *   ToggleRenderingOptions.widgetParams.containerNode.html(buttonHTML);\n *   ToggleRenderingOptions.widgetParams.containerNode\n *     .find('a')\n *     .on('click', function(event) {\n *       event.preventDefault();\n *       event.stopPropagation();\n *\n *       ToggleRenderingOptions.refine(ToggleRenderingOptions.value);\n *     });\n * }\n *\n * // connect `renderFn` to Toggle logic\n * var customToggle = instantsearch.connectors.connectToggle(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customToggle({\n *     containerNode: $('#custom-toggle-container'),\n *     attributeName: 'free_shipping',\n *     label: 'Free Shipping (toggle single value)',\n *   })\n * );\n */\nexport default function connectToggle(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var attributeName = widgetParams.attributeName,\n        label = widgetParams.label,\n        _widgetParams$values = widgetParams.values,\n        userValues = _widgetParams$values === undefined ? { on: true, off: undefined } : _widgetParams$values;\n\n\n    if (!attributeName || !label) {\n      throw new Error(usage);\n    }\n\n    var hasAnOffValue = userValues.off !== undefined;\n    var on = userValues ? escapeRefinement(userValues.on) : undefined;\n    var off = userValues ? escapeRefinement(userValues.off) : undefined;\n\n    return {\n      getConfiguration: function getConfiguration() {\n        return {\n          disjunctiveFacets: [attributeName]\n        };\n      },\n      _toggleRefinement: function _toggleRefinement(helper) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            isRefined = _ref.isRefined;\n\n        // Checking\n        if (!isRefined) {\n          if (hasAnOffValue) {\n            helper.removeDisjunctiveFacetRefinement(attributeName, off);\n          }\n          helper.addDisjunctiveFacetRefinement(attributeName, on);\n        } else {\n          // Unchecking\n          helper.removeDisjunctiveFacetRefinement(attributeName, on);\n          if (hasAnOffValue) {\n            helper.addDisjunctiveFacetRefinement(attributeName, off);\n          }\n        }\n\n        helper.search();\n      },\n      init: function init(_ref2) {\n        var _this = this;\n\n        var state = _ref2.state,\n            helper = _ref2.helper,\n            createURL = _ref2.createURL,\n            instantSearchInstance = _ref2.instantSearchInstance;\n\n        this._createURL = function (isCurrentlyRefined) {\n          return function () {\n            return createURL(state.removeDisjunctiveFacetRefinement(attributeName, isCurrentlyRefined ? on : off).addDisjunctiveFacetRefinement(attributeName, isCurrentlyRefined ? off : on));\n          };\n        };\n\n        this.toggleRefinement = function (opts) {\n          _this._toggleRefinement(helper, opts);\n        };\n\n        var isRefined = state.isDisjunctiveFacetRefined(attributeName, on);\n\n        // no need to refine anything at init if no custom off values\n        if (hasAnOffValue) {\n          // Add filtering on the 'off' value if set\n          if (!isRefined) {\n            var currentPage = helper.getPage();\n            helper.addDisjunctiveFacetRefinement(attributeName, off).setPage(currentPage);\n          }\n        }\n\n        var onFacetValue = {\n          name: label,\n          isRefined: isRefined,\n          count: 0\n        };\n\n        var offFacetValue = {\n          name: label,\n          isRefined: hasAnOffValue && !isRefined,\n          count: 0\n        };\n\n        var value = {\n          name: label,\n          isRefined: isRefined,\n          count: null,\n          onFacetValue: onFacetValue,\n          offFacetValue: offFacetValue\n        };\n\n        renderFn({\n          value: value,\n          createURL: this._createURL(value.isRefined),\n          refine: this.toggleRefinement,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref3) {\n        var helper = _ref3.helper,\n            results = _ref3.results,\n            state = _ref3.state,\n            instantSearchInstance = _ref3.instantSearchInstance;\n\n        var isRefined = helper.state.isDisjunctiveFacetRefined(attributeName, on);\n        var offValue = off === undefined ? false : off;\n        var allFacetValues = results.getFacetValues(attributeName);\n\n        var onData = find(allFacetValues, function (_ref4) {\n          var name = _ref4.name;\n          return name === unescapeRefinement(on);\n        });\n        var onFacetValue = {\n          name: label,\n          isRefined: onData !== undefined ? onData.isRefined : false,\n          count: onData === undefined ? null : onData.count\n        };\n\n        var offData = hasAnOffValue ? find(allFacetValues, function (_ref5) {\n          var name = _ref5.name;\n          return name === unescapeRefinement(offValue);\n        }) : undefined;\n        var offFacetValue = {\n          name: label,\n          isRefined: offData !== undefined ? offData.isRefined : false,\n          count: offData === undefined ? allFacetValues.reduce(function (total, _ref6) {\n            var count = _ref6.count;\n            return total + count;\n          }, 0) : offData.count\n        };\n\n        // what will we show by default,\n        // if checkbox is not checked, show: [ ] free shipping (countWhenChecked)\n        // if checkbox is checked, show: [x] free shipping (countWhenNotChecked)\n        var nextRefinement = isRefined ? offFacetValue : onFacetValue;\n\n        var value = {\n          name: label,\n          isRefined: isRefined,\n          count: nextRefinement === undefined ? null : nextRefinement.count,\n          onFacetValue: onFacetValue,\n          offFacetValue: offFacetValue\n        };\n\n        renderFn({\n          value: value,\n          state: state,\n          createURL: this._createURL(value.isRefined),\n          refine: this.toggleRefinement,\n          helper: helper,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose(_ref7) {\n        var state = _ref7.state;\n\n        unmountFn();\n\n        var nextState = state.removeDisjunctiveFacetRefinement(attributeName).removeDisjunctiveFacet(attributeName);\n\n        return nextState;\n      },\n      getWidgetState: function getWidgetState(uiState, _ref8) {\n        var searchParameters = _ref8.searchParameters;\n\n        var isRefined = searchParameters.isDisjunctiveFacetRefined(attributeName, on);\n\n        if (!isRefined || uiState && uiState.toggle && uiState.toggle[attributeName] === isRefined) {\n          return uiState;\n        }\n\n        return _extends({}, uiState, {\n          toggle: _extends({}, uiState.toggle, _defineProperty({}, attributeName, isRefined))\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref9) {\n        var uiState = _ref9.uiState;\n\n        var isRefined = Boolean(uiState.toggle && uiState.toggle[attributeName]);\n\n        if (isRefined) {\n          if (hasAnOffValue) return searchParameters.removeDisjunctiveFacetRefinement(attributeName, off).addDisjunctiveFacetRefinement(attributeName, on);\n\n          return searchParameters.addDisjunctiveFacetRefinement(attributeName, on);\n        }\n\n        if (hasAnOffValue) return searchParameters.removeDisjunctiveFacetRefinement(attributeName, on).addDisjunctiveFacetRefinement(attributeName, off);\n\n        return searchParameters.removeDisjunctiveFacetRefinement(attributeName, on);\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}