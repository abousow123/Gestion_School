{"ast":null,"code":"import _classCallCheck from \"/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, Pipe, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n/** This allows support [(ngModel)] and ngControl. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction BarRating_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵlistener(\"click\", function BarRating_div_4_Template_div_click_0_listener($event) {\n      var unit_r2 = ctx.$implicit;\n      return unit_r2.click($event);\n    })(\"mouseenter\", function BarRating_div_4_Template_div_mouseenter_0_listener() {\n      var unit_r2 = ctx.$implicit;\n      return unit_r2.enter();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var unit_r2 = ctx.$implicit;\n    ɵngcc0.ɵɵclassProp(\"br-fraction\", unit_r2.fraction)(\"br-selected\", unit_r2.selected)(\"br-active\", unit_r2.active);\n  }\n}\n\nfunction BarRating_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵpipe(2, \"rateTitle\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r1.nextRate, ctx_r1.titles));\n  }\n}\n\nvar RATING_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return BarRating;\n  }),\n  multi: true\n};\n/** This allows control required validation. */\n\nvar RATING_VALUE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return BarRating;\n  }),\n  multi: true\n};\n\nvar BarRating = /*#__PURE__*/function () {\n  function BarRating(changeDetectorRef) {\n    _classCallCheck(this, BarRating);\n\n    this.changeDetectorRef = changeDetectorRef;\n    this.contexts = [];\n    /** Maximal rating that can be given using this widget. */\n\n    this.max = 5;\n    /** A flag indicating if rating can be updated. */\n\n    this.readOnly = false;\n    /** Set the theme */\n\n    this.theme = 'default';\n    /** Show rating title */\n\n    this.showText = false;\n    /** Replace rate value with a title */\n\n    this.titles = [];\n    /** A flag indicating if rating is required for form validation. */\n\n    this.required = false;\n    /**\n     * An event fired when a user is hovering over a given rating.\n     * Event's payload equals to the rating being hovered over.\n     */\n\n    this.hover = new EventEmitter();\n    /**\n     * An event fired when a user stops hovering over a given rating.\n     * Event's payload equals to the rating of the last item being hovered over.\n     */\n\n    this.leave = new EventEmitter();\n    /**\n     * An event fired when a user selects a new rating.\n     * Event's payload equals to the newly selected rating.\n     */\n\n    this.rateChange = new EventEmitter(true);\n\n    this.onChange = function (_) {};\n\n    this.onTouched = function () {};\n  }\n\n  _createClass(BarRating, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.rate) {\n        this.update(this.rate);\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      this.contexts = Array.from({\n        length: this.max\n      }, function (context, i) {\n        return {\n          selected: false,\n          fraction: false,\n          active: false,\n          click: function click(e) {\n            return _this.handleClick(e, i + 1);\n          },\n          enter: function enter() {\n            return _this.handleEnter(i + 1);\n          }\n        };\n      });\n      this.updateState(this.rate);\n    }\n  }, {\n    key: \"update\",\n    value: function update(newRate) {\n      var internalChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!this.readOnly && !this.disabled && this.rate !== newRate) {\n        this.rate = newRate;\n        this.rateChange.emit(this.rate);\n      }\n\n      if (internalChange) {\n        this.onChange(this.rate);\n        this.onTouched();\n      }\n\n      this.updateState(this.rate);\n    }\n    /** Reset rate value */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.leave.emit(this.nextRate);\n      this.updateState(this.rate);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(nextValue) {\n      var _this2 = this;\n\n      /** Set rate value as text */\n      this.nextRate = nextValue - 1;\n      /** Set the rating */\n\n      this.contexts = Array.from({\n        length: this.max\n      }, function (context, index) {\n        return {\n          selected: index + 1 <= nextValue,\n          fraction: (index + 1 === Math.round(nextValue) && nextValue % 1) >= 0.5,\n          active: false,\n          click: function click(e) {\n            return _this2.handleClick(e, index);\n          },\n          enter: function enter() {\n            return _this2.handleEnter(index);\n          }\n        };\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(e, value) {\n      /** (NOT TESTED) Remove 300ms click delay on touch devices */\n      e.preventDefault();\n      e.stopPropagation();\n      this.update(value + 1);\n    }\n  }, {\n    key: \"handleEnter\",\n    value: function handleEnter(index) {\n      if (!this.disabled && !this.readOnly) {\n        /** Add selected class for rating hover */\n        this.contexts.map(function (context, i) {\n          context.active = i <= index;\n          context.fraction = false;\n          context.selected = false;\n        });\n        this.nextRate = index;\n        this.hover.emit(index);\n      }\n    }\n    /** This is the initial value set to the component */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.update(value, false);\n      this.changeDetectorRef.markForCheck();\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(c) {\n      return this.required && !c.value ? {\n        required: true\n      } : null;\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n  }]);\n\n  return BarRating;\n}();\n\nBarRating.ɵfac = function BarRating_Factory(t) {\n  return new (t || BarRating)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nBarRating.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BarRating,\n  selectors: [[\"bar-rating\"]],\n  inputs: {\n    max: \"max\",\n    readOnly: \"readOnly\",\n    theme: \"theme\",\n    showText: \"showText\",\n    titles: \"titles\",\n    required: \"required\",\n    rate: \"rate\"\n  },\n  outputs: {\n    hover: \"hover\",\n    leave: \"leave\",\n    rateChange: \"rateChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([RATING_VALUE_ACCESSOR, RATING_VALUE_VALIDATOR]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 10,\n  vars: 9,\n  consts: [[1, \"br-units\", 3, \"mouseleave\"], [\"class\", \"br-unit\", 3, \"br-fraction\", \"br-selected\", \"br-active\", \"click\", \"mouseenter\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"br-text\", 4, \"ngIf\"], [1, \"br-unit\", 3, \"click\", \"mouseenter\"], [1, \"br-text\"]],\n  template: function BarRating_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵtext(1, \"\\n\\n  \");\n      ɵngcc0.ɵɵelementStart(2, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"mouseleave\", function BarRating_Template_div_mouseleave_2_listener() {\n        return ctx.reset();\n      });\n      ɵngcc0.ɵɵtext(3, \"\\n\\n    \");\n      ɵngcc0.ɵɵtemplate(4, BarRating_div_4_Template, 1, 6, \"div\", 1);\n      ɵngcc0.ɵɵtext(5, \"\\n  \");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtext(6, \"\\n\\n  \");\n      ɵngcc0.ɵɵtemplate(7, BarRating_div_7_Template, 3, 4, \"div\", 2);\n      ɵngcc0.ɵɵtext(8, \"\\n\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtext(9, \"\\n\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMapInterpolate1(\"br br-\", ctx.theme, \"\");\n      ɵngcc0.ɵɵclassProp(\"br-readonly\", ctx.readOnly)(\"br-disabled\", ctx.disabled);\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.contexts);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showText);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgForOf, ɵngcc1.NgIf];\n  },\n  pipes: function pipes() {\n    return [BarRatingPipe];\n  },\n  styles: [\"*[_ngcontent-%COMP%]{box-sizing:border-box}.br[_ngcontent-%COMP%]{margin:15px 0;position:relative}.br-units[_ngcontent-%COMP%]{display:flex;flex-wrap:nowrap}.br-unit[_ngcontent-%COMP%]{-webkit-font-smoothing:antialiased;cursor:pointer;text-rendering:auto}.br-disabled[_ngcontent-%COMP%]   .br-unit[_ngcontent-%COMP%], .br-readonly[_ngcontent-%COMP%]   .br-unit[_ngcontent-%COMP%]{cursor:default}\"],\n  changeDetection: 0\n});\n\nBarRating.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }];\n};\n\nBarRating.propDecorators = {\n  rate: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  readOnly: [{\n    type: Input\n  }],\n  theme: [{\n    type: Input\n  }],\n  showText: [{\n    type: Input\n  }],\n  titles: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  hover: [{\n    type: Output\n  }],\n  leave: [{\n    type: Output\n  }],\n  rateChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarRating, [{\n    type: Component,\n    args: [{\n      selector: 'bar-rating',\n      template: \"<div class=\\\"br br-{{theme}}\\\"\\n     [class.br-readonly]=\\\"readOnly\\\"\\n     [class.br-disabled]=\\\"disabled\\\">\\n\\n  <div class=\\\"br-units\\\" (mouseleave)=\\\"reset()\\\">\\n\\n    <div class=\\\"br-unit\\\" *ngFor=\\\"let unit of contexts\\\"\\n         [class.br-fraction]=\\\"unit.fraction\\\"\\n         [class.br-selected]=\\\"unit.selected\\\"\\n         [class.br-active]=\\\"unit.active\\\"\\n         (click)=\\\"unit.click($event)\\\"\\n         (mouseenter)=\\\"unit.enter()\\\"></div>\\n  </div>\\n\\n  <div *ngIf=\\\"showText\\\" class=\\\"br-text\\\">{{ nextRate | rateTitle: titles }}</div>\\n</div>\\n\",\n      providers: [RATING_VALUE_ACCESSOR, RATING_VALUE_VALIDATOR],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\"*{box-sizing:border-box}.br{margin:15px 0;position:relative}.br-units{display:flex;flex-wrap:nowrap}.br-unit{-webkit-font-smoothing:antialiased;cursor:pointer;text-rendering:auto}.br-disabled .br-unit,.br-readonly .br-unit{cursor:default}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    max: [{\n      type: Input\n    }],\n    readOnly: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    showText: [{\n      type: Input\n    }],\n    titles: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    hover: [{\n      type: Output\n    }],\n    leave: [{\n      type: Output\n    }],\n    rateChange: [{\n      type: Output\n    }],\n    rate: [{\n      type: Input\n    }]\n  });\n})();\n\nvar BarRatingPipe = /*#__PURE__*/function () {\n  function BarRatingPipe() {\n    _classCallCheck(this, BarRatingPipe);\n  }\n\n  _createClass(BarRatingPipe, [{\n    key: \"transform\",\n    value: function transform() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var titles = arguments.length > 1 ? arguments[1] : undefined;\n\n      /** Initialize value with 0 in case of undefined */\n      return titles[value] || value + 1;\n    }\n  }]);\n\n  return BarRatingPipe;\n}();\n\nBarRatingPipe.ɵfac = function BarRatingPipe_Factory(t) {\n  return new (t || BarRatingPipe)();\n};\n\nBarRatingPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"rateTitle\",\n  type: BarRatingPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarRatingPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'rateTitle'\n    }]\n  }], null, null);\n})();\n\nvar BarRatingModule = function BarRatingModule() {\n  _classCallCheck(this, BarRatingModule);\n};\n\nBarRatingModule.ɵfac = function BarRatingModule_Factory(t) {\n  return new (t || BarRatingModule)();\n};\n\nBarRatingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: BarRatingModule\n});\nBarRatingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BarRatingModule, {\n    declarations: function declarations() {\n      return [BarRating, BarRatingPipe];\n    },\n    imports: function imports() {\n      return [CommonModule, FormsModule];\n    },\n    exports: function exports() {\n      return [BarRating];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarRatingModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [BarRating, BarRatingPipe],\n      imports: [CommonModule, FormsModule],\n      exports: [BarRating]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BarRating, BarRatingModule, BarRatingPipe as ɵa };","map":{"version":3,"sources":["../../../projects/ngx-bar-rating/src/lib/bar-rating.ts","../../../projects/ngx-bar-rating/src/lib/bar-rating.pipe.ts","../../../projects/ngx-bar-rating/src/lib/bar-rating.module.ts","../../../projects/ngx-bar-rating/src/ngx-bar-rating.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  forwardRef\n} from '@angular/core';\nimport { ControlValueAccessor, Validator, NG_VALIDATORS, NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';\n\n/** This allows support [(ngModel)] and ngControl. */\nconst RATING_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => BarRating),\n  multi: true\n};\n\n/** This allows control required validation. */\nconst RATING_VALUE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => BarRating),\n  multi: true,\n};\n\n@Component({\n  selector: 'bar-rating',\n  templateUrl: './bar-rating.html',\n  styleUrls: ['./bar-rating.scss'],\n  providers: [RATING_VALUE_ACCESSOR, RATING_VALUE_VALIDATOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarRating implements OnInit, OnChanges, ControlValueAccessor, Validator {\n\n  contexts: { fraction: boolean, selected: boolean, active: boolean, click: (e) => void, enter: () => void }[] = [];\n  nextRate: number;\n  disabled: boolean;\n\n  /** Current rating. Can be a decimal value like 3.14 */\n  @Input() rate;\n\n  /** Maximal rating that can be given using this widget. */\n  @Input() max = 5;\n\n  /** A flag indicating if rating can be updated. */\n  @Input() readOnly = false;\n\n  /** Set the theme */\n  @Input() theme = 'default';\n\n  /** Show rating title */\n  @Input() showText = false;\n\n  /** Replace rate value with a title */\n  @Input() titles = [];\n\n  /** A flag indicating if rating is required for form validation. */\n  @Input() required = false;\n\n  /**\n   * An event fired when a user is hovering over a given rating.\n   * Event's payload equals to the rating being hovered over.\n   */\n  @Output() hover = new EventEmitter<number>();\n\n  /**\n   * An event fired when a user stops hovering over a given rating.\n   * Event's payload equals to the rating of the last item being hovered over.\n   */\n  @Output() leave = new EventEmitter<number>();\n\n  /**\n   * An event fired when a user selects a new rating.\n   * Event's payload equals to the newly selected rating.\n   */\n  @Output() rateChange = new EventEmitter<number>(true);\n\n  constructor(private changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.rate) {\n      this.update(this.rate);\n    }\n  }\n\n  ngOnInit(): void {\n    this.contexts = Array.from({ length: this.max }, (context, i) => ({\n      selected: false,\n      fraction: false,\n      active: false,\n      click: (e) => this.handleClick(e, i + 1),\n      enter: () => this.handleEnter(i + 1)\n    }));\n\n    this.updateState(this.rate);\n  }\n\n  update(newRate: number, internalChange = true): void {\n    if (!this.readOnly && !this.disabled && this.rate !== newRate) {\n      this.rate = newRate;\n      this.rateChange.emit(this.rate);\n    }\n    if (internalChange) {\n      this.onChange(this.rate);\n      this.onTouched();\n    }\n    this.updateState(this.rate);\n  }\n\n  /** Reset rate value */\n  reset(): void {\n    this.leave.emit(this.nextRate);\n    this.updateState(this.rate);\n  }\n\n  private updateState(nextValue): void {\n    /** Set rate value as text */\n    this.nextRate = nextValue - 1;\n    /** Set the rating */\n    this.contexts = Array.from({ length: this.max }, (context, index) => ({\n      selected: index + 1 <= nextValue,\n      fraction: (index + 1 === Math.round(nextValue) && nextValue % 1) >= 0.5,\n      active: false,\n      click: (e) => this.handleClick(e, index),\n      enter: () => this.handleEnter(index)\n    }));\n  }\n\n  private handleClick(e, value): void {\n    /** (NOT TESTED) Remove 300ms click delay on touch devices */\n    e.preventDefault();\n    e.stopPropagation();\n    this.update(value + 1);\n  }\n\n  private handleEnter(index): void {\n    if (!this.disabled && !this.readOnly) {\n      /** Add selected class for rating hover */\n      this.contexts.map((context, i) => {\n        context.active = i <= index;\n        context.fraction = false;\n        context.selected = false;\n      });\n      this.nextRate = index;\n      this.hover.emit(index);\n    }\n  }\n\n  /** This is the initial value set to the component */\n  writeValue(value: number): void {\n    this.update(value, false);\n    this.changeDetectorRef.markForCheck();\n  }\n\n  validate(c: FormControl): { required: boolean } | null {\n    return (this.required && !c.value) ? { required: true } : null;\n  }\n\n  onChange = (_: any) => {\n  };\n  onTouched = () => {\n  };\n\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'rateTitle'\n})\nexport class BarRatingPipe implements PipeTransform {\n\n  transform(value: number = 0, titles?: any): string {\n    /** Initialize value with 0 in case of undefined */\n    return titles[value] || value + 1;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { BarRating } from './bar-rating';\nimport { BarRatingPipe } from './bar-rating.pipe';\n\n@NgModule({\n  declarations: [BarRating, BarRatingPipe],\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  exports: [BarRating]\n})\nexport class BarRatingModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {BarRatingPipe as ɵa} from './lib/bar-rating.pipe';"]},"metadata":{},"sourceType":"module"}