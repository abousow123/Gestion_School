{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customSearchBox = connectSearchBox(function render(params, isFirstRendering) {\\n  // params = {\\n  //   query,\\n  //   onHistoryChange,\\n  //   refine,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  //   clear,\\n  // }\\n});\\nsearch.addWidget(\\n  customSearchBox({\\n    [ queryHook ],\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectSearchBox.html\\n';\n/**\n * @typedef {Object} CustomSearchBoxWidgetOptions\n * @property {function(string, function(string))} [queryHook = undefined] A function that will be called every time\n * a new value for the query is set. The first parameter is the query and the second is a\n * function to actually trigger the search. The function takes the query as the parameter.\n *\n * This queryHook can be used to debounce the number of searches done from the searchBox.\n */\n\n/**\n * @typedef {Object} SearchBoxRenderingOptions\n * @property {string} query The query from the last search.\n * @property {function(SearchParameters)} onHistoryChange Registers a callback when the browser history changes.\n * @property {function(string)} refine Sets a new query and searches.\n * @property {function()} clear Remove the query and perform search.\n * @property {Object} widgetParams All original `CustomSearchBoxWidgetOptions` forwarded to the `renderFn`.\n * @property {boolean} isSearchStalled `true` if the search results takes more than a certain time to come back\n * from Algolia servers. This can be configured on the InstantSearch constructor with the attribute\n * `stalledSearchDelay` which is 200ms, by default.\n */\n\n/**\n * **SearchBox** connector provides the logic to build a widget that will let the user search for a query.\n *\n * The connector provides to the rendering: `refine()` to set the query. The behaviour of this function\n * may be impacted by the `queryHook` widget parameter.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/search-box/js/\n * @param {function(SearchBoxRenderingOptions, boolean)} renderFn Rendering function for the custom **SearchBox** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomSearchBoxWidgetOptions)} Re-usable widget factory for a custom **SearchBox** widget.\n * @example\n * // custom `renderFn` to render the custom SearchBox widget\n * function renderFn(SearchBoxRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     SearchBoxRenderingOptions.widgetParams.containerNode.html('<input type=\"text\" />');\n *     SearchBoxRenderingOptions.widgetParams.containerNode\n *       .find('input')\n *       .on('keyup', function() {\n *         SearchBoxRenderingOptions.refine($(this).val());\n *       });\n *     SearchBoxRenderingOptions.widgetParams.containerNode\n *       .find('input')\n *       .val(SearchBoxRenderingOptions.query);\n *   }\n * }\n *\n * // connect `renderFn` to SearchBox logic\n * var customSearchBox = instantsearch.connectors.connectSearchBox(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customSearchBox({\n *     containerNode: $('#custom-searchbox'),\n *   })\n * );\n */\n\nexport default function connectSearchBox(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var queryHook = widgetParams.queryHook;\n\n    function clear(helper) {\n      return function () {\n        helper.setQuery('');\n        helper.search();\n      };\n    }\n\n    return {\n      _clear: function _clear() {},\n      _cachedClear: function _cachedClear() {\n        this._clear();\n      },\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            onHistoryChange = _ref.onHistoryChange,\n            instantSearchInstance = _ref.instantSearchInstance;\n        this._cachedClear = this._cachedClear.bind(this);\n        this._clear = clear(helper);\n\n        this._refine = function () {\n          var previousQuery = void 0;\n\n          var setQueryAndSearch = function setQueryAndSearch(q) {\n            var doSearch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            if (q !== helper.state.query) {\n              previousQuery = helper.state.query;\n              helper.setQuery(q);\n            }\n\n            if (doSearch && previousQuery !== undefined && previousQuery !== q) helper.search();\n          };\n\n          return queryHook ? function (q) {\n            return queryHook(q, setQueryAndSearch);\n          } : setQueryAndSearch;\n        }();\n\n        this._onHistoryChange = onHistoryChange;\n        renderFn({\n          query: helper.state.query,\n          onHistoryChange: this._onHistoryChange,\n          refine: this._refine,\n          clear: this._cachedClear,\n          widgetParams: widgetParams,\n          instantSearchInstance: instantSearchInstance\n        }, true);\n      },\n      render: function render(_ref2) {\n        var helper = _ref2.helper,\n            instantSearchInstance = _ref2.instantSearchInstance,\n            searchMetadata = _ref2.searchMetadata;\n        this._clear = clear(helper);\n        renderFn({\n          query: helper.state.query,\n          onHistoryChange: this._onHistoryChange,\n          refine: this._refine,\n          clear: this._cachedClear,\n          widgetParams: widgetParams,\n          instantSearchInstance: instantSearchInstance,\n          isSearchStalled: searchMetadata.isSearchStalled\n        }, false);\n      },\n      dispose: function dispose(_ref3) {\n        var state = _ref3.state;\n        unmountFn();\n        return state.setQuery('');\n      },\n      getWidgetState: function getWidgetState(uiState, _ref4) {\n        var searchParameters = _ref4.searchParameters;\n        var query = searchParameters.query;\n\n        if (query === '' || uiState && uiState.query === query) {\n          return uiState;\n        }\n\n        return _extends({}, uiState, {\n          query: query\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n        var uiState = _ref5.uiState;\n        return searchParameters.setQuery(uiState.query || '');\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","checkRendering","usage","connectSearchBox","renderFn","unmountFn","widgetParams","undefined","queryHook","clear","helper","setQuery","search","_clear","_cachedClear","init","_ref","onHistoryChange","instantSearchInstance","bind","_refine","previousQuery","setQueryAndSearch","q","doSearch","state","query","_onHistoryChange","refine","render","_ref2","searchMetadata","isSearchStalled","dispose","_ref3","getWidgetState","uiState","_ref4","searchParameters","getWidgetSearchParameters","_ref5"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport { checkRendering } from '../../lib/utils.js';\n\nvar usage = 'Usage:\\nvar customSearchBox = connectSearchBox(function render(params, isFirstRendering) {\\n  // params = {\\n  //   query,\\n  //   onHistoryChange,\\n  //   refine,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  //   clear,\\n  // }\\n});\\nsearch.addWidget(\\n  customSearchBox({\\n    [ queryHook ],\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectSearchBox.html\\n';\n\n/**\n * @typedef {Object} CustomSearchBoxWidgetOptions\n * @property {function(string, function(string))} [queryHook = undefined] A function that will be called every time\n * a new value for the query is set. The first parameter is the query and the second is a\n * function to actually trigger the search. The function takes the query as the parameter.\n *\n * This queryHook can be used to debounce the number of searches done from the searchBox.\n */\n\n/**\n * @typedef {Object} SearchBoxRenderingOptions\n * @property {string} query The query from the last search.\n * @property {function(SearchParameters)} onHistoryChange Registers a callback when the browser history changes.\n * @property {function(string)} refine Sets a new query and searches.\n * @property {function()} clear Remove the query and perform search.\n * @property {Object} widgetParams All original `CustomSearchBoxWidgetOptions` forwarded to the `renderFn`.\n * @property {boolean} isSearchStalled `true` if the search results takes more than a certain time to come back\n * from Algolia servers. This can be configured on the InstantSearch constructor with the attribute\n * `stalledSearchDelay` which is 200ms, by default.\n */\n\n/**\n * **SearchBox** connector provides the logic to build a widget that will let the user search for a query.\n *\n * The connector provides to the rendering: `refine()` to set the query. The behaviour of this function\n * may be impacted by the `queryHook` widget parameter.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/search-box/js/\n * @param {function(SearchBoxRenderingOptions, boolean)} renderFn Rendering function for the custom **SearchBox** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomSearchBoxWidgetOptions)} Re-usable widget factory for a custom **SearchBox** widget.\n * @example\n * // custom `renderFn` to render the custom SearchBox widget\n * function renderFn(SearchBoxRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     SearchBoxRenderingOptions.widgetParams.containerNode.html('<input type=\"text\" />');\n *     SearchBoxRenderingOptions.widgetParams.containerNode\n *       .find('input')\n *       .on('keyup', function() {\n *         SearchBoxRenderingOptions.refine($(this).val());\n *       });\n *     SearchBoxRenderingOptions.widgetParams.containerNode\n *       .find('input')\n *       .val(SearchBoxRenderingOptions.query);\n *   }\n * }\n *\n * // connect `renderFn` to SearchBox logic\n * var customSearchBox = instantsearch.connectors.connectSearchBox(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customSearchBox({\n *     containerNode: $('#custom-searchbox'),\n *   })\n * );\n */\nexport default function connectSearchBox(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var queryHook = widgetParams.queryHook;\n\n\n    function clear(helper) {\n      return function () {\n        helper.setQuery('');\n        helper.search();\n      };\n    }\n\n    return {\n      _clear: function _clear() {},\n      _cachedClear: function _cachedClear() {\n        this._clear();\n      },\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            onHistoryChange = _ref.onHistoryChange,\n            instantSearchInstance = _ref.instantSearchInstance;\n\n        this._cachedClear = this._cachedClear.bind(this);\n        this._clear = clear(helper);\n\n        this._refine = function () {\n          var previousQuery = void 0;\n\n          var setQueryAndSearch = function setQueryAndSearch(q) {\n            var doSearch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            if (q !== helper.state.query) {\n              previousQuery = helper.state.query;\n              helper.setQuery(q);\n            }\n            if (doSearch && previousQuery !== undefined && previousQuery !== q) helper.search();\n          };\n\n          return queryHook ? function (q) {\n            return queryHook(q, setQueryAndSearch);\n          } : setQueryAndSearch;\n        }();\n\n        this._onHistoryChange = onHistoryChange;\n\n        renderFn({\n          query: helper.state.query,\n          onHistoryChange: this._onHistoryChange,\n          refine: this._refine,\n          clear: this._cachedClear,\n          widgetParams: widgetParams,\n          instantSearchInstance: instantSearchInstance\n        }, true);\n      },\n      render: function render(_ref2) {\n        var helper = _ref2.helper,\n            instantSearchInstance = _ref2.instantSearchInstance,\n            searchMetadata = _ref2.searchMetadata;\n\n        this._clear = clear(helper);\n\n        renderFn({\n          query: helper.state.query,\n          onHistoryChange: this._onHistoryChange,\n          refine: this._refine,\n          clear: this._cachedClear,\n          widgetParams: widgetParams,\n          instantSearchInstance: instantSearchInstance,\n          isSearchStalled: searchMetadata.isSearchStalled\n        }, false);\n      },\n      dispose: function dispose(_ref3) {\n        var state = _ref3.state;\n\n        unmountFn();\n        return state.setQuery('');\n      },\n      getWidgetState: function getWidgetState(uiState, _ref4) {\n        var searchParameters = _ref4.searchParameters;\n\n        var query = searchParameters.query;\n\n        if (query === '' || uiState && uiState.query === query) {\n          return uiState;\n        }\n\n        return _extends({}, uiState, {\n          query: query\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n        var uiState = _ref5.uiState;\n\n        return searchParameters.setQuery(uiState.query || '');\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}