{"ast":null,"code":"import isUndefined from 'lodash/isUndefined';\nimport isBoolean from 'lodash/isBoolean';\nimport isString from 'lodash/isString';\nimport isArray from 'lodash/isArray';\nimport isPlainObject from 'lodash/isPlainObject';\nimport isFunction from 'lodash/isFunction';\nimport isEmpty from 'lodash/isEmpty';\nimport map from 'lodash/map';\nimport reduce from 'lodash/reduce';\nimport filter from 'lodash/filter';\nimport { getRefinements, clearRefinements, checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customCurrentRefinedValues = connectCurrentRefinedValues(function renderFn(params, isFirstRendering) {\\n  // params = {\\n  //   attributes,\\n  //   clearAllClick,\\n  //   clearAllPosition,\\n  //   clearAllURL,\\n  //   refine,\\n  //   createURL,\\n  //   refinements,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customCurrentRefinedValues({\\n    [ attributes = [] ],\\n    [ onlyListedAttributes = false ],\\n    [ clearsQuery = false ],\\n    [ transformItems ],\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectCurrentRefinedValues.html\\n';\n/**\n * @typedef {Object} CurrentRefinement\n * @property {\"facet\"|\"exclude\"|\"disjunctive\"|\"hierarchical\"|\"numeric\"|\"query\"} type Type of refinement\n * @property {string} attributeName Attribute on which the refinement is applied\n * @property {string} name value of the refinement\n * @property {number} [numericValue] value if the attribute is numeric and used with a numeric filter\n * @property {boolean} [exhaustive] `true` if the count is exhaustive, only if applicable\n * @property {number} [count] number of items found, if applicable\n * @property {string} [query] value of the query if the type is query\n */\n\n/**\n * @typedef {Object} CurrentRefinedValuesRenderingOptions\n * @property {Object.<string, object>} attributes Original `CurrentRefinedValuesWidgetOptions.attributes` mapped by keys.\n * @property {function} clearAllClick Clears all the currently refined values.\n * @property {function} clearAllURL Generate a URL which leads to a state where all the refinements have been cleared.\n * @property {function(item)} refine Clears a single refinement.\n * @property {function(item): string} createURL Creates an individual url where a single refinement is cleared.\n * @property {CurrentRefinement[]} refinements All the current refinements.\n * @property {Object} widgetParams All original `CustomCurrentRefinedValuesWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * @typedef {Object} CurrentRefinedValuesAttributes\n * @property {string} name Mandatory field which is the name of the attribute.\n * @property {string} label The label to apply on a refinement per attribute.\n */\n\n/**\n * @typedef {Object} CustomCurrentRefinedValuesWidgetOptions\n * @property {CurrentRefinedValuesAttributes[]} [attributes = []] Specification for the display of\n * refinements per attribute (default: `[]`). By default, the widget will display all the filters\n * set with no special treatment for the label.\n * @property {boolean} [onlyListedAttributes = false] Limit the displayed refinement to the list specified.\n * @property {boolean} [clearsQuery = false] Clears also the active search query when using clearAll.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * **CurrentRefinedValues** connector provides the logic to build a widget that will give\n * the user the ability to see all the currently applied filters and, remove some or all of\n * them.\n *\n * This provides a `refine(item)` function to remove a selected refinement and a `clearAllClick`\n * function to clear all the filters. Those functions can see their behaviour change based on\n * the widget options used.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/current-refinements/js/\n * @param {function(CurrentRefinedValuesRenderingOptions)} renderFn Rendering function for the custom **CurrentRefinedValues** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomCurrentRefinedValuesWidgetOptions)} Re-usable widget factory for a custom **CurrentRefinedValues** widget.\n * @example\n * // custom `renderFn` to render the custom ClearAll widget\n * function renderFn(CurrentRefinedValuesRenderingOptions, isFirstRendering) {\n *   var containerNode = CurrentRefinedValuesRenderingOptions.widgetParams.containerNode;\n *   if (isFirstRendering) {\n *     containerNode\n *       .html('<ul id=\"refinements\"></ul><div id=\"cta-container\"></div>');\n *   }\n *\n *   containerNode\n *     .find('#cta-container > a')\n *     .off('click');\n *\n *   containerNode\n *     .find('li > a')\n *     .each(function() { $(this).off('click') });\n *\n *   if (CurrentRefinedValuesRenderingOptions.refinements\n *       && CurrentRefinedValuesRenderingOptions.refinements.length > 0) {\n *     containerNode\n *       .find('#cta-container')\n *       .html('<a href=\"' + CurrentRefinedValuesRenderingOptions.clearAllURL + '\">Clear all </a>');\n *\n *     containerNode\n *       .find('#cta-container > a')\n *       .on('click', function(event) {\n *         event.preventDefault();\n *         CurrentRefinedValuesRenderingOptions.clearAllClick();\n *       });\n *\n *     var list = CurrentRefinedValuesRenderingOptions.refinements.map(function(refinement) {\n *       return '<li><a href=\"' + CurrentRefinedValuesRenderingOptions.createURL(refinement) + '\">'\n *         + refinement.computedLabel + ' ' + refinement.count + '</a></li>';\n *     });\n *\n *     CurrentRefinedValuesRenderingOptions.containerNode.find('ul').html(list);\n *     CurrentRefinedValuesRenderingOptions.containerNode.find('li > a').each(function(index) {\n *       $(this).on('click', function(event) {\n *         event.preventDefault();\n *\n *         var refinement = CurrentRefinedValuesRenderingOptions.refinements[index];\n *         CurrentRefinedValuesRenderingOptions.refine(refinement);\n *       });\n *     });\n *   } else {\n *     containerNode.find('#cta-container').html('');\n *     containerNode.find('ul').html('');\n *   }\n * }\n *\n * // connect `renderFn` to CurrentRefinedValues logic\n * var customCurrentRefinedValues = instantsearch.connectors.connectCurrentRefinedValues(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customCurrentRefinedValues({\n *     containerNode: $('#custom-crv-container'),\n *   })\n * );\n */\n\nexport default function connectCurrentRefinedValues(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _widgetParams$attribu = widgetParams.attributes,\n        attributes = _widgetParams$attribu === undefined ? [] : _widgetParams$attribu,\n        _widgetParams$onlyLis = widgetParams.onlyListedAttributes,\n        onlyListedAttributes = _widgetParams$onlyLis === undefined ? false : _widgetParams$onlyLis,\n        _widgetParams$clearsQ = widgetParams.clearsQuery,\n        clearsQuery = _widgetParams$clearsQ === undefined ? false : _widgetParams$clearsQ,\n        _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n    var attributesOK = isArray(attributes) && reduce(attributes, function (res, val) {\n      return res && isPlainObject(val) && isString(val.name) && (isUndefined(val.label) || isString(val.label)) && (isUndefined(val.template) || isString(val.template) || isFunction(val.template)) && (isUndefined(val.transformData) || isFunction(val.transformData));\n    }, true);\n    var showUsage = false || !isArray(attributes) || !attributesOK || !isBoolean(onlyListedAttributes);\n\n    if (showUsage) {\n      throw new Error(usage);\n    }\n\n    var attributeNames = map(attributes, function (attribute) {\n      return attribute.name;\n    });\n    var restrictedTo = onlyListedAttributes ? attributeNames : undefined;\n    var attributesObj = reduce(attributes, function (res, attribute) {\n      res[attribute.name] = attribute;\n      return res;\n    }, {});\n    return {\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            createURL = _ref.createURL,\n            instantSearchInstance = _ref.instantSearchInstance;\n\n        this._clearRefinementsAndSearch = function () {\n          helper.setState(clearRefinements({\n            helper: helper,\n            whiteList: restrictedTo,\n            clearsQuery: clearsQuery\n          })).search();\n        };\n\n        this._createClearAllURL = function () {\n          return createURL(clearRefinements({\n            helper: helper,\n            whiteList: restrictedTo,\n            clearsQuery: clearsQuery\n          }));\n        };\n\n        var refinements = transformItems(getFilteredRefinements({}, helper.state, attributeNames, onlyListedAttributes, clearsQuery));\n\n        var _createURL = function _createURL(refinement) {\n          return createURL(clearRefinementFromState(helper.state, refinement));\n        };\n\n        var _clearRefinement = function _clearRefinement(refinement) {\n          return clearRefinement(helper, refinement);\n        };\n\n        renderFn({\n          attributes: attributesObj,\n          clearAllClick: this._clearRefinementsAndSearch,\n          clearAllURL: this._createClearAllURL(),\n          refine: _clearRefinement,\n          createURL: _createURL,\n          refinements: refinements,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var results = _ref2.results,\n            helper = _ref2.helper,\n            state = _ref2.state,\n            createURL = _ref2.createURL,\n            instantSearchInstance = _ref2.instantSearchInstance;\n        var refinements = transformItems(getFilteredRefinements(results, state, attributeNames, onlyListedAttributes, clearsQuery));\n\n        var _createURL = function _createURL(refinement) {\n          return createURL(clearRefinementFromState(helper.state, refinement));\n        };\n\n        var _clearRefinement = function _clearRefinement(refinement) {\n          return clearRefinement(helper, refinement);\n        };\n\n        renderFn({\n          attributes: attributesObj,\n          clearAllClick: this._clearRefinementsAndSearch,\n          clearAllURL: this._createClearAllURL(),\n          refine: _clearRefinement,\n          createURL: _createURL,\n          refinements: refinements,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose() {\n        unmountFn();\n      }\n    };\n  };\n}\n\nfunction getRestrictedIndexForSort(attributeNames, otherAttributeNames, attributeName) {\n  var idx = attributeNames.indexOf(attributeName);\n\n  if (idx !== -1) {\n    return idx;\n  }\n\n  return attributeNames.length + otherAttributeNames.indexOf(attributeName);\n}\n\nfunction compareRefinements(attributeNames, otherAttributeNames, a, b) {\n  var idxa = getRestrictedIndexForSort(attributeNames, otherAttributeNames, a.attributeName);\n  var idxb = getRestrictedIndexForSort(attributeNames, otherAttributeNames, b.attributeName);\n\n  if (idxa === idxb) {\n    if (a.name === b.name) {\n      return 0;\n    }\n\n    return a.name < b.name ? -1 : 1;\n  }\n\n  return idxa < idxb ? -1 : 1;\n}\n\nfunction getFilteredRefinements(results, state, attributeNames, onlyListedAttributes, clearsQuery) {\n  var refinements = getRefinements(results, state, clearsQuery);\n  var otherAttributeNames = reduce(refinements, function (res, refinement) {\n    if (attributeNames.indexOf(refinement.attributeName) === -1 && res.indexOf(refinement.attributeName === -1)) {\n      res.push(refinement.attributeName);\n    }\n\n    return res;\n  }, []);\n  refinements = refinements.sort(compareRefinements.bind(null, attributeNames, otherAttributeNames));\n\n  if (onlyListedAttributes && !isEmpty(attributeNames)) {\n    refinements = filter(refinements, function (refinement) {\n      return attributeNames.indexOf(refinement.attributeName) !== -1;\n    });\n  }\n\n  return refinements.map(computeLabel);\n}\n\nfunction clearRefinementFromState(state, refinement) {\n  switch (refinement.type) {\n    case 'facet':\n      return state.removeFacetRefinement(refinement.attributeName, refinement.name);\n\n    case 'disjunctive':\n      return state.removeDisjunctiveFacetRefinement(refinement.attributeName, refinement.name);\n\n    case 'hierarchical':\n      return state.clearRefinements(refinement.attributeName);\n\n    case 'exclude':\n      return state.removeExcludeRefinement(refinement.attributeName, refinement.name);\n\n    case 'numeric':\n      return state.removeNumericRefinement(refinement.attributeName, refinement.operator, refinement.numericValue);\n\n    case 'tag':\n      return state.removeTagRefinement(refinement.name);\n\n    case 'query':\n      return state.setQueryParameter('query', '');\n\n    default:\n      throw new Error('clearRefinement: type ' + refinement.type + ' is not handled');\n  }\n}\n\nfunction clearRefinement(helper, refinement) {\n  helper.setState(clearRefinementFromState(helper.state, refinement)).search();\n}\n\nfunction computeLabel(value) {\n  // default to `value.name` if no operators\n  value.computedLabel = value.name;\n\n  if (value.hasOwnProperty('operator') && typeof value.operator === 'string') {\n    var displayedOperator = value.operator;\n    if (value.operator === '>=') displayedOperator = '≥';\n    if (value.operator === '<=') displayedOperator = '≤';\n    value.computedLabel = displayedOperator + ' ' + value.name;\n  }\n\n  return value;\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/current-refined-values/connectCurrentRefinedValues.js"],"names":["isUndefined","isBoolean","isString","isArray","isPlainObject","isFunction","isEmpty","map","reduce","filter","getRefinements","clearRefinements","checkRendering","usage","connectCurrentRefinedValues","renderFn","unmountFn","widgetParams","arguments","length","undefined","_widgetParams$attribu","attributes","_widgetParams$onlyLis","onlyListedAttributes","_widgetParams$clearsQ","clearsQuery","_widgetParams$transfo","transformItems","items","attributesOK","res","val","name","label","template","transformData","showUsage","Error","attributeNames","attribute","restrictedTo","attributesObj","init","_ref","helper","createURL","instantSearchInstance","_clearRefinementsAndSearch","setState","whiteList","search","_createClearAllURL","refinements","getFilteredRefinements","state","_createURL","refinement","clearRefinementFromState","_clearRefinement","clearRefinement","clearAllClick","clearAllURL","refine","render","_ref2","results","dispose","getRestrictedIndexForSort","otherAttributeNames","attributeName","idx","indexOf","compareRefinements","a","b","idxa","idxb","push","sort","bind","computeLabel","type","removeFacetRefinement","removeDisjunctiveFacetRefinement","removeExcludeRefinement","removeNumericRefinement","operator","numericValue","removeTagRefinement","setQueryParameter","value","computedLabel","hasOwnProperty","displayedOperator"],"mappings":"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","sourcesContent":["import isUndefined from 'lodash/isUndefined';\nimport isBoolean from 'lodash/isBoolean';\nimport isString from 'lodash/isString';\nimport isArray from 'lodash/isArray';\nimport isPlainObject from 'lodash/isPlainObject';\nimport isFunction from 'lodash/isFunction';\nimport isEmpty from 'lodash/isEmpty';\n\nimport map from 'lodash/map';\nimport reduce from 'lodash/reduce';\nimport filter from 'lodash/filter';\n\nimport { getRefinements, clearRefinements, checkRendering } from '../../lib/utils.js';\n\nvar usage = 'Usage:\\nvar customCurrentRefinedValues = connectCurrentRefinedValues(function renderFn(params, isFirstRendering) {\\n  // params = {\\n  //   attributes,\\n  //   clearAllClick,\\n  //   clearAllPosition,\\n  //   clearAllURL,\\n  //   refine,\\n  //   createURL,\\n  //   refinements,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customCurrentRefinedValues({\\n    [ attributes = [] ],\\n    [ onlyListedAttributes = false ],\\n    [ clearsQuery = false ],\\n    [ transformItems ],\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectCurrentRefinedValues.html\\n';\n\n/**\n * @typedef {Object} CurrentRefinement\n * @property {\"facet\"|\"exclude\"|\"disjunctive\"|\"hierarchical\"|\"numeric\"|\"query\"} type Type of refinement\n * @property {string} attributeName Attribute on which the refinement is applied\n * @property {string} name value of the refinement\n * @property {number} [numericValue] value if the attribute is numeric and used with a numeric filter\n * @property {boolean} [exhaustive] `true` if the count is exhaustive, only if applicable\n * @property {number} [count] number of items found, if applicable\n * @property {string} [query] value of the query if the type is query\n */\n\n/**\n * @typedef {Object} CurrentRefinedValuesRenderingOptions\n * @property {Object.<string, object>} attributes Original `CurrentRefinedValuesWidgetOptions.attributes` mapped by keys.\n * @property {function} clearAllClick Clears all the currently refined values.\n * @property {function} clearAllURL Generate a URL which leads to a state where all the refinements have been cleared.\n * @property {function(item)} refine Clears a single refinement.\n * @property {function(item): string} createURL Creates an individual url where a single refinement is cleared.\n * @property {CurrentRefinement[]} refinements All the current refinements.\n * @property {Object} widgetParams All original `CustomCurrentRefinedValuesWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * @typedef {Object} CurrentRefinedValuesAttributes\n * @property {string} name Mandatory field which is the name of the attribute.\n * @property {string} label The label to apply on a refinement per attribute.\n */\n\n/**\n * @typedef {Object} CustomCurrentRefinedValuesWidgetOptions\n * @property {CurrentRefinedValuesAttributes[]} [attributes = []] Specification for the display of\n * refinements per attribute (default: `[]`). By default, the widget will display all the filters\n * set with no special treatment for the label.\n * @property {boolean} [onlyListedAttributes = false] Limit the displayed refinement to the list specified.\n * @property {boolean} [clearsQuery = false] Clears also the active search query when using clearAll.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * **CurrentRefinedValues** connector provides the logic to build a widget that will give\n * the user the ability to see all the currently applied filters and, remove some or all of\n * them.\n *\n * This provides a `refine(item)` function to remove a selected refinement and a `clearAllClick`\n * function to clear all the filters. Those functions can see their behaviour change based on\n * the widget options used.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/current-refinements/js/\n * @param {function(CurrentRefinedValuesRenderingOptions)} renderFn Rendering function for the custom **CurrentRefinedValues** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomCurrentRefinedValuesWidgetOptions)} Re-usable widget factory for a custom **CurrentRefinedValues** widget.\n * @example\n * // custom `renderFn` to render the custom ClearAll widget\n * function renderFn(CurrentRefinedValuesRenderingOptions, isFirstRendering) {\n *   var containerNode = CurrentRefinedValuesRenderingOptions.widgetParams.containerNode;\n *   if (isFirstRendering) {\n *     containerNode\n *       .html('<ul id=\"refinements\"></ul><div id=\"cta-container\"></div>');\n *   }\n *\n *   containerNode\n *     .find('#cta-container > a')\n *     .off('click');\n *\n *   containerNode\n *     .find('li > a')\n *     .each(function() { $(this).off('click') });\n *\n *   if (CurrentRefinedValuesRenderingOptions.refinements\n *       && CurrentRefinedValuesRenderingOptions.refinements.length > 0) {\n *     containerNode\n *       .find('#cta-container')\n *       .html('<a href=\"' + CurrentRefinedValuesRenderingOptions.clearAllURL + '\">Clear all </a>');\n *\n *     containerNode\n *       .find('#cta-container > a')\n *       .on('click', function(event) {\n *         event.preventDefault();\n *         CurrentRefinedValuesRenderingOptions.clearAllClick();\n *       });\n *\n *     var list = CurrentRefinedValuesRenderingOptions.refinements.map(function(refinement) {\n *       return '<li><a href=\"' + CurrentRefinedValuesRenderingOptions.createURL(refinement) + '\">'\n *         + refinement.computedLabel + ' ' + refinement.count + '</a></li>';\n *     });\n *\n *     CurrentRefinedValuesRenderingOptions.containerNode.find('ul').html(list);\n *     CurrentRefinedValuesRenderingOptions.containerNode.find('li > a').each(function(index) {\n *       $(this).on('click', function(event) {\n *         event.preventDefault();\n *\n *         var refinement = CurrentRefinedValuesRenderingOptions.refinements[index];\n *         CurrentRefinedValuesRenderingOptions.refine(refinement);\n *       });\n *     });\n *   } else {\n *     containerNode.find('#cta-container').html('');\n *     containerNode.find('ul').html('');\n *   }\n * }\n *\n * // connect `renderFn` to CurrentRefinedValues logic\n * var customCurrentRefinedValues = instantsearch.connectors.connectCurrentRefinedValues(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customCurrentRefinedValues({\n *     containerNode: $('#custom-crv-container'),\n *   })\n * );\n */\nexport default function connectCurrentRefinedValues(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _widgetParams$attribu = widgetParams.attributes,\n        attributes = _widgetParams$attribu === undefined ? [] : _widgetParams$attribu,\n        _widgetParams$onlyLis = widgetParams.onlyListedAttributes,\n        onlyListedAttributes = _widgetParams$onlyLis === undefined ? false : _widgetParams$onlyLis,\n        _widgetParams$clearsQ = widgetParams.clearsQuery,\n        clearsQuery = _widgetParams$clearsQ === undefined ? false : _widgetParams$clearsQ,\n        _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n\n\n    var attributesOK = isArray(attributes) && reduce(attributes, function (res, val) {\n      return res && isPlainObject(val) && isString(val.name) && (isUndefined(val.label) || isString(val.label)) && (isUndefined(val.template) || isString(val.template) || isFunction(val.template)) && (isUndefined(val.transformData) || isFunction(val.transformData));\n    }, true);\n\n    var showUsage = false || !isArray(attributes) || !attributesOK || !isBoolean(onlyListedAttributes);\n\n    if (showUsage) {\n      throw new Error(usage);\n    }\n\n    var attributeNames = map(attributes, function (attribute) {\n      return attribute.name;\n    });\n    var restrictedTo = onlyListedAttributes ? attributeNames : undefined;\n\n    var attributesObj = reduce(attributes, function (res, attribute) {\n      res[attribute.name] = attribute;\n      return res;\n    }, {});\n\n    return {\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            createURL = _ref.createURL,\n            instantSearchInstance = _ref.instantSearchInstance;\n\n        this._clearRefinementsAndSearch = function () {\n          helper.setState(clearRefinements({\n            helper: helper,\n            whiteList: restrictedTo,\n            clearsQuery: clearsQuery\n          })).search();\n        };\n\n        this._createClearAllURL = function () {\n          return createURL(clearRefinements({ helper: helper, whiteList: restrictedTo, clearsQuery: clearsQuery }));\n        };\n\n        var refinements = transformItems(getFilteredRefinements({}, helper.state, attributeNames, onlyListedAttributes, clearsQuery));\n\n        var _createURL = function _createURL(refinement) {\n          return createURL(clearRefinementFromState(helper.state, refinement));\n        };\n        var _clearRefinement = function _clearRefinement(refinement) {\n          return clearRefinement(helper, refinement);\n        };\n\n        renderFn({\n          attributes: attributesObj,\n          clearAllClick: this._clearRefinementsAndSearch,\n          clearAllURL: this._createClearAllURL(),\n          refine: _clearRefinement,\n          createURL: _createURL,\n          refinements: refinements,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var results = _ref2.results,\n            helper = _ref2.helper,\n            state = _ref2.state,\n            createURL = _ref2.createURL,\n            instantSearchInstance = _ref2.instantSearchInstance;\n\n        var refinements = transformItems(getFilteredRefinements(results, state, attributeNames, onlyListedAttributes, clearsQuery));\n\n        var _createURL = function _createURL(refinement) {\n          return createURL(clearRefinementFromState(helper.state, refinement));\n        };\n        var _clearRefinement = function _clearRefinement(refinement) {\n          return clearRefinement(helper, refinement);\n        };\n\n        renderFn({\n          attributes: attributesObj,\n          clearAllClick: this._clearRefinementsAndSearch,\n          clearAllURL: this._createClearAllURL(),\n          refine: _clearRefinement,\n          createURL: _createURL,\n          refinements: refinements,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose() {\n        unmountFn();\n      }\n    };\n  };\n}\n\nfunction getRestrictedIndexForSort(attributeNames, otherAttributeNames, attributeName) {\n  var idx = attributeNames.indexOf(attributeName);\n  if (idx !== -1) {\n    return idx;\n  }\n  return attributeNames.length + otherAttributeNames.indexOf(attributeName);\n}\n\nfunction compareRefinements(attributeNames, otherAttributeNames, a, b) {\n  var idxa = getRestrictedIndexForSort(attributeNames, otherAttributeNames, a.attributeName);\n  var idxb = getRestrictedIndexForSort(attributeNames, otherAttributeNames, b.attributeName);\n  if (idxa === idxb) {\n    if (a.name === b.name) {\n      return 0;\n    }\n    return a.name < b.name ? -1 : 1;\n  }\n  return idxa < idxb ? -1 : 1;\n}\n\nfunction getFilteredRefinements(results, state, attributeNames, onlyListedAttributes, clearsQuery) {\n  var refinements = getRefinements(results, state, clearsQuery);\n  var otherAttributeNames = reduce(refinements, function (res, refinement) {\n    if (attributeNames.indexOf(refinement.attributeName) === -1 && res.indexOf(refinement.attributeName === -1)) {\n      res.push(refinement.attributeName);\n    }\n    return res;\n  }, []);\n  refinements = refinements.sort(compareRefinements.bind(null, attributeNames, otherAttributeNames));\n  if (onlyListedAttributes && !isEmpty(attributeNames)) {\n    refinements = filter(refinements, function (refinement) {\n      return attributeNames.indexOf(refinement.attributeName) !== -1;\n    });\n  }\n  return refinements.map(computeLabel);\n}\n\nfunction clearRefinementFromState(state, refinement) {\n  switch (refinement.type) {\n    case 'facet':\n      return state.removeFacetRefinement(refinement.attributeName, refinement.name);\n    case 'disjunctive':\n      return state.removeDisjunctiveFacetRefinement(refinement.attributeName, refinement.name);\n    case 'hierarchical':\n      return state.clearRefinements(refinement.attributeName);\n    case 'exclude':\n      return state.removeExcludeRefinement(refinement.attributeName, refinement.name);\n    case 'numeric':\n      return state.removeNumericRefinement(refinement.attributeName, refinement.operator, refinement.numericValue);\n    case 'tag':\n      return state.removeTagRefinement(refinement.name);\n    case 'query':\n      return state.setQueryParameter('query', '');\n    default:\n      throw new Error('clearRefinement: type ' + refinement.type + ' is not handled');\n  }\n}\n\nfunction clearRefinement(helper, refinement) {\n  helper.setState(clearRefinementFromState(helper.state, refinement)).search();\n}\n\nfunction computeLabel(value) {\n  // default to `value.name` if no operators\n  value.computedLabel = value.name;\n\n  if (value.hasOwnProperty('operator') && typeof value.operator === 'string') {\n    var displayedOperator = value.operator;\n    if (value.operator === '>=') displayedOperator = '≥';\n    if (value.operator === '<=') displayedOperator = '≤';\n    value.computedLabel = displayedOperator + ' ' + value.name;\n  }\n\n  return value;\n}"]},"metadata":{},"sourceType":"module"}