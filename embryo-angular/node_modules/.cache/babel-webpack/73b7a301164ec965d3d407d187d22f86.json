{"ast":null,"code":"import { Directive, Input, ContentChildren, ElementRef } from '@angular/core';\nimport { NgxCardNumberTemplate, NgxCardNameTemplate, NgxCardExpiryTemplate, NgxCardCvcTemplate } from './inputs';\nimport * as ɵngcc0 from '@angular/core';\nvar defaultPlaceholders = {\n  number: '•••• •••• •••• ••••',\n  name: 'Full Name',\n  expiry: '••/••',\n  cvc: '•••'\n};\nvar defaultMessages = {\n  validDate: 'valid\\nthru',\n  monthYear: 'month/year'\n};\n\nvar NgxCard = function () {\n  function NgxCard(element) {\n    this.element = element;\n    this.formatting = true; // optional - default true\n    // if true, will log helpful messages for setting up Card\n\n    this.debug = false; // optional - default false\n  }\n\n  Object.defineProperty(NgxCard.prototype, \"messages\", {\n    get: function get() {\n      return this._messages;\n    },\n    set: function set(_messages) {\n      this._messages = Object.assign({}, defaultMessages, _messages);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NgxCard.prototype, \"placeholders\", {\n    get: function get() {\n      return this._placeholders;\n    },\n    set: function set(_placeholders) {\n      this._placeholders = Object.assign({}, defaultPlaceholders, _placeholders);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  NgxCard.prototype.ngAfterViewInit = function () {\n    new Card({\n      form: this.element.nativeElement,\n      container: this.container,\n      width: this.width,\n      formSelectors: {\n        numberInput: this.findSelectors(this.numbers),\n        expiryInput: this.findSelectors(this.expiries),\n        cvcInput: this.findSelectors(this.cvcs),\n        nameInput: this.findSelectors(this.names)\n      },\n      formatting: this.formatting,\n      messages: this.messages,\n      placeholders: this.placeholders,\n      masks: this.masks,\n      debug: this.debug\n    });\n  };\n\n  NgxCard.prototype.findSelectors = function (list) {\n    return list.map(function (template) {\n      return template.elementRef.nativeElement.tagName.toLowerCase() + '[name=\"' + template.name + '\"]';\n    }).join(', ');\n  };\n\n  NgxCard.ɵfac = function NgxCard_Factory(t) {\n    return new (t || NgxCard)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NgxCard.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NgxCard,\n    selectors: [[\"\", \"card\", \"\"]],\n    contentQueries: function NgxCard_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxCardNumberTemplate, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxCardNameTemplate, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxCardExpiryTemplate, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxCardCvcTemplate, 1);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.numbers = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.names = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.expiries = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cvcs = _t);\n      }\n    },\n    inputs: {\n      formatting: \"formatting\",\n      debug: \"debug\",\n      messages: \"messages\",\n      placeholders: \"placeholders\",\n      container: \"container\",\n      width: [\"card-width\", \"width\"],\n      masks: \"masks\"\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxCard, [{\n      type: Directive,\n      args: [{\n        selector: '[card]'\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }];\n    }, {\n      formatting: [{\n        type: Input\n      }],\n      debug: [{\n        type: Input\n      }],\n      messages: [{\n        type: Input\n      }],\n      placeholders: [{\n        type: Input\n      }],\n      container: [{\n        type: Input\n      }],\n      width: [{\n        type: Input,\n        args: ['card-width']\n      }],\n      masks: [{\n        type: Input\n      }],\n      numbers: [{\n        type: ContentChildren,\n        args: [NgxCardNumberTemplate, {\n          descendants: true\n        }]\n      }],\n      names: [{\n        type: ContentChildren,\n        args: [NgxCardNameTemplate, {\n          descendants: true\n        }]\n      }],\n      expiries: [{\n        type: ContentChildren,\n        args: [NgxCardExpiryTemplate, {\n          descendants: true\n        }]\n      }],\n      cvcs: [{\n        type: ContentChildren,\n        args: [NgxCardCvcTemplate, {\n          descendants: true\n        }]\n      }]\n    });\n  })();\n\n  return NgxCard;\n}();\n\nexport { NgxCard };\n/** @nocollapse */\n\nNgxCard.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nNgxCard.propDecorators = {\n  'container': [{\n    type: Input\n  }],\n  'width': [{\n    type: Input,\n    args: ['card-width']\n  }],\n  'messages': [{\n    type: Input\n  }],\n  'placeholders': [{\n    type: Input\n  }],\n  'masks': [{\n    type: Input\n  }],\n  'formatting': [{\n    type: Input\n  }],\n  'debug': [{\n    type: Input\n  }],\n  'numbers': [{\n    type: ContentChildren,\n    args: [NgxCardNumberTemplate, {\n      descendants: true\n    }]\n  }],\n  'names': [{\n    type: ContentChildren,\n    args: [NgxCardNameTemplate, {\n      descendants: true\n    }]\n  }],\n  'expiries': [{\n    type: ContentChildren,\n    args: [NgxCardExpiryTemplate, {\n      descendants: true\n    }]\n  }],\n  'cvcs': [{\n    type: ContentChildren,\n    args: [NgxCardCvcTemplate, {\n      descendants: true\n    }]\n  }]\n};\n;","map":{"version":3,"sources":["../../temp/inline/card.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, Input, ContentChildren, QueryList, ElementRef} from '@angular/core';\nimport {NgxCardNumberTemplate, NgxCardNameTemplate, NgxCardExpiryTemplate, NgxCardCvcTemplate} from './inputs';\n\ndeclare var Card;\n\nconst defaultPlaceholders = {\n\tnumber: '•••• •••• •••• ••••',\n\tname: 'Full Name',\n\texpiry: '••/••',\n\tcvc: '•••',\n};\n\nconst defaultMessages = {\n\tvalidDate: 'valid\\nthru',\n\tmonthYear: 'month/year',\n};\n\n\nexport class NgxCard {\n\n\t// a selector or DOM element for the container\n\t// where you want the card to appear\n\t container: any;\n\n\t width: number; // optional — default 350px\n\n\t// Strings for translation - optional\n\t_messages;\n\t set messages(_messages: any) {\n\t\tthis._messages = Object.assign({}, defaultMessages, _messages);\n\t}\n\tget messages() {\n\t\treturn this._messages;\n\t}\n\n\t// Default placeholders for rendered fields - optional\n\t_placeholders;\n\t set placeholders(_placeholders: any) {\n\t\tthis._placeholders = Object.assign({}, defaultPlaceholders, _placeholders);\n\t}\n\tget placeholders() {\n\t\treturn this._placeholders;\n\t}\n\n\t masks: any;\n\n\t formatting: boolean = true; // optional - default true\n\n\t// if true, will log helpful messages for setting up Card\n\t debug: boolean = false; // optional - default false\n\n\t numbers: QueryList<NgxCardNumberTemplate>;\n\t names: QueryList<NgxCardNameTemplate>;\n\t expiries: QueryList<NgxCardExpiryTemplate>;\n\t cvcs: QueryList<NgxCardCvcTemplate>;\n\n\tconstructor(private element: ElementRef) {}\n\n\tngAfterViewInit() {\n\t\tnew Card({\n\t\t\tform: this.element.nativeElement,\n\t\t\tcontainer: this.container,\n\t\t\twidth: this.width,\n\t\t\tformSelectors: {\n\t\t\t\tnumberInput: this.findSelectors(this.numbers),\n\t\t\t\texpiryInput: this.findSelectors(this.expiries),\n\t\t\t\tcvcInput: this.findSelectors(this.cvcs),\n\t\t\t\tnameInput: this.findSelectors(this.names),\n\t\t\t},\n\t\t\tformatting: this.formatting,\n\t\t\tmessages: this.messages,\n\t\t\tplaceholders: this.placeholders,\n\t\t\tmasks: this.masks,\n\t\t\tdebug: this.debug,\n\t\t});\n\t}\n\n\tfindSelectors(list: QueryList<any>): string {\n\t\treturn list.map(template => template.elementRef.nativeElement.tagName.toLowerCase() + '[name=\"' + template.name + '\"]')\n\t\t\t\t   .join(', ');\n\t}\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[card]',\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'container': [{ type: Input },],\n'width': [{ type: Input, args: ['card-width', ] },],\n'messages': [{ type: Input },],\n'placeholders': [{ type: Input },],\n'masks': [{ type: Input },],\n'formatting': [{ type: Input },],\n'debug': [{ type: Input },],\n'numbers': [{ type: ContentChildren, args: [NgxCardNumberTemplate, {descendants: true}, ] },],\n'names': [{ type: ContentChildren, args: [NgxCardNameTemplate, {descendants: true}, ] },],\n'expiries': [{ type: ContentChildren, args: [NgxCardExpiryTemplate, {descendants: true}, ] },],\n'cvcs': [{ type: ContentChildren, args: [NgxCardCvcTemplate, {descendants: true}, ] },],\n};\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]},"metadata":{},"sourceType":"module"}