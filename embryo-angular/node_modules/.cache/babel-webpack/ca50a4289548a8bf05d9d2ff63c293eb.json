{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customStarRating = connectStarRating(function render(params, isFirstRendering) {\\n  // params = {\\n  //   items,\\n  //   createURL,\\n  //   refine,\\n  //   instantSearchInstance,\\n  //   hasNoResults,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customStarRatingI({\\n    attributeName,\\n    [ max=5 ],\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectStarRating.html\\n';\n/**\n * @typedef {Object} StarRatingItems\n * @property {string} name Name corresponding to the number of stars.\n * @property {string} value Number of stars as string.\n * @property {number} count Count of matched results corresponding to the number of stars.\n * @property {boolean[]} stars Array of length of maximum rating value with stars to display or not.\n * @property {boolean} isRefined Indicates if star rating refinement is applied.\n */\n\n/**\n * @typedef {Object} CustomStarRatingWidgetOptions\n * @property {string} attributeName Name of the attribute for faceting (eg. \"free_shipping\").\n * @property {number} [max = 5] The maximum rating value.\n */\n\n/**\n * @typedef {Object} StarRatingRenderingOptions\n * @property {StarRatingItems[]} items Possible star ratings the user can apply.\n * @property {function(string): string} createURL Creates an URL for the next\n * state (takes the item value as parameter). Takes the value of an item as parameter.\n * @property {function(string)} refine Selects a rating to filter the results\n * (takes the filter value as parameter). Takes the value of an item as parameter.\n * @property {boolean} hasNoResults `true` if the last search contains no result.\n * @property {Object} widgetParams All original `CustomStarRatingWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * **StarRating** connector provides the logic to build a custom widget that will let\n * the user refine search results based on ratings.\n *\n * The connector provides to the rendering: `refine()` to select a value and\n * `items` that are the values that can be selected. `refine` should be used\n * with `items.value`.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/rating-menu/js/\n * @param {function(StarRatingRenderingOptions, boolean)} renderFn Rendering function for the custom **StarRating** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomStarRatingWidgetOptions)} Re-usable widget factory for a custom **StarRating** widget.\n * @example\n * // custom `renderFn` to render the custom StarRating widget\n * function renderFn(StarRatingRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     StarRatingRenderingOptions.widgetParams.containerNode.html('<ul></ul>');\n *   }\n *\n *   StarRatingRenderingOptions.widgetParams.containerNode\n *     .find('li[data-refine-value]')\n *     .each(function() { $(this).off('click'); });\n *\n *   var listHTML = StarRatingRenderingOptions.items.map(function(item) {\n *     return '<li data-refine-value=\"' + item.value + '\">' +\n *       '<a href=\"' + StarRatingRenderingOptions.createURL(item.value) + '\">' +\n *       item.stars.map(function(star) { return star === false ? '☆' : '★'; }).join(' ') +\n *       '& up (' + item.count + ')' +\n *       '</a></li>';\n *   });\n *\n *   StarRatingRenderingOptions.widgetParams.containerNode\n *     .find('ul')\n *     .html(listHTML);\n *\n *   StarRatingRenderingOptions.widgetParams.containerNode\n *     .find('li[data-refine-value]')\n *     .each(function() {\n *       $(this).on('click', function(event) {\n *         event.preventDefault();\n *         event.stopPropagation();\n *\n *         StarRatingRenderingOptions.refine($(this).data('refine-value'));\n *       });\n *     });\n * }\n *\n * // connect `renderFn` to StarRating logic\n * var customStarRating = instantsearch.connectors.connectStarRating(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customStarRating({\n *     containerNode: $('#custom-star-rating-container'),\n *     attributeName: 'rating',\n *     max: 5,\n *   })\n * );\n */\n\nexport default function connectStarRating(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var attributeName = widgetParams.attributeName,\n        _widgetParams$max = widgetParams.max,\n        max = _widgetParams$max === undefined ? 5 : _widgetParams$max;\n\n    if (!attributeName) {\n      throw new Error(usage);\n    }\n\n    return {\n      getConfiguration: function getConfiguration() {\n        return {\n          disjunctiveFacets: [attributeName]\n        };\n      },\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            createURL = _ref.createURL,\n            instantSearchInstance = _ref.instantSearchInstance;\n        this._toggleRefinement = this._toggleRefinement.bind(this, helper);\n\n        this._createURL = function (state) {\n          return function (facetValue) {\n            return createURL(state.toggleRefinement(attributeName, facetValue));\n          };\n        };\n\n        renderFn({\n          instantSearchInstance: instantSearchInstance,\n          items: [],\n          hasNoResults: true,\n          refine: this._toggleRefinement,\n          createURL: this._createURL(helper.state),\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var helper = _ref2.helper,\n            results = _ref2.results,\n            state = _ref2.state,\n            instantSearchInstance = _ref2.instantSearchInstance;\n        var facetValues = [];\n        var allValues = {};\n\n        for (var v = max; v >= 0; --v) {\n          allValues[v] = 0;\n        }\n\n        results.getFacetValues(attributeName).forEach(function (facet) {\n          var val = Math.round(facet.name);\n\n          if (!val || val > max) {\n            return;\n          }\n\n          for (var _v = val; _v >= 1; --_v) {\n            allValues[_v] += facet.count;\n          }\n        });\n\n        var refinedStar = this._getRefinedStar(helper.state);\n\n        for (var star = max - 1; star >= 1; --star) {\n          var count = allValues[star];\n\n          if (refinedStar && star !== refinedStar && count === 0) {\n            // skip count==0 when at least 1 refinement is enabled\n            // eslint-disable-next-line no-continue\n            continue;\n          }\n\n          var stars = [];\n\n          for (var i = 1; i <= max; ++i) {\n            stars.push(i <= star);\n          }\n\n          facetValues.push({\n            stars: stars,\n            name: String(star),\n            value: String(star),\n            count: count,\n            isRefined: refinedStar === star\n          });\n        }\n\n        renderFn({\n          instantSearchInstance: instantSearchInstance,\n          items: facetValues,\n          hasNoResults: results.nbHits === 0,\n          refine: this._toggleRefinement,\n          createURL: this._createURL(state),\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose(_ref3) {\n        var state = _ref3.state;\n        unmountFn();\n        var nextState = state.removeDisjunctiveFacetRefinement(attributeName).removeDisjunctiveFacet(attributeName);\n        return nextState;\n      },\n      getWidgetState: function getWidgetState(uiState, _ref4) {\n        var searchParameters = _ref4.searchParameters;\n\n        var refinedStar = this._getRefinedStar(searchParameters);\n\n        if (refinedStar === undefined || uiState && uiState.starRating && uiState.starRating[attributeName] === refinedStar) return uiState;\n        return _extends({}, uiState, {\n          starRating: _extends({}, uiState.starRating, _defineProperty({}, attributeName, refinedStar))\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n        var uiState = _ref5.uiState;\n        var starRatingFromURL = uiState.starRating && uiState.starRating[attributeName];\n\n        var refinedStar = this._getRefinedStar(searchParameters);\n\n        if (starRatingFromURL === refinedStar) return searchParameters;\n        var clearedSearchParam = searchParameters.clearRefinements(attributeName);\n\n        if (starRatingFromURL !== undefined) {\n          for (var val = Number(starRatingFromURL); val <= max; ++val) {\n            clearedSearchParam = clearedSearchParam.addDisjunctiveFacetRefinement(attributeName, val);\n          }\n        }\n\n        return clearedSearchParam;\n      },\n      _toggleRefinement: function _toggleRefinement(helper, facetValue) {\n        var isRefined = this._getRefinedStar(helper.state) === Number(facetValue);\n        helper.clearRefinements(attributeName);\n\n        if (!isRefined) {\n          for (var val = Number(facetValue); val <= max; ++val) {\n            helper.addDisjunctiveFacetRefinement(attributeName, val);\n          }\n        }\n\n        helper.search();\n      },\n      _getRefinedStar: function _getRefinedStar(searchParameters) {\n        var refinedStar = undefined;\n        var refinements = searchParameters.getDisjunctiveRefinements(attributeName);\n        refinements.forEach(function (r) {\n          if (!refinedStar || Number(r) < refinedStar) {\n            refinedStar = Number(r);\n          }\n        });\n        return refinedStar;\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/star-rating/connectStarRating.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","checkRendering","usage","connectStarRating","renderFn","unmountFn","widgetParams","undefined","attributeName","_widgetParams$max","max","Error","getConfiguration","disjunctiveFacets","init","_ref","helper","createURL","instantSearchInstance","_toggleRefinement","bind","_createURL","state","facetValue","toggleRefinement","items","hasNoResults","refine","render","_ref2","results","facetValues","allValues","v","getFacetValues","forEach","facet","val","Math","round","name","_v","count","refinedStar","_getRefinedStar","star","stars","push","String","isRefined","nbHits","dispose","_ref3","nextState","removeDisjunctiveFacetRefinement","removeDisjunctiveFacet","getWidgetState","uiState","_ref4","searchParameters","starRating","getWidgetSearchParameters","_ref5","starRatingFromURL","clearedSearchParam","clearRefinements","Number","addDisjunctiveFacetRefinement","search","refinements","getDisjunctiveRefinements","r"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { checkRendering } from '../../lib/utils.js';\n\nvar usage = 'Usage:\\nvar customStarRating = connectStarRating(function render(params, isFirstRendering) {\\n  // params = {\\n  //   items,\\n  //   createURL,\\n  //   refine,\\n  //   instantSearchInstance,\\n  //   hasNoResults,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customStarRatingI({\\n    attributeName,\\n    [ max=5 ],\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectStarRating.html\\n';\n\n/**\n * @typedef {Object} StarRatingItems\n * @property {string} name Name corresponding to the number of stars.\n * @property {string} value Number of stars as string.\n * @property {number} count Count of matched results corresponding to the number of stars.\n * @property {boolean[]} stars Array of length of maximum rating value with stars to display or not.\n * @property {boolean} isRefined Indicates if star rating refinement is applied.\n */\n\n/**\n * @typedef {Object} CustomStarRatingWidgetOptions\n * @property {string} attributeName Name of the attribute for faceting (eg. \"free_shipping\").\n * @property {number} [max = 5] The maximum rating value.\n */\n\n/**\n * @typedef {Object} StarRatingRenderingOptions\n * @property {StarRatingItems[]} items Possible star ratings the user can apply.\n * @property {function(string): string} createURL Creates an URL for the next\n * state (takes the item value as parameter). Takes the value of an item as parameter.\n * @property {function(string)} refine Selects a rating to filter the results\n * (takes the filter value as parameter). Takes the value of an item as parameter.\n * @property {boolean} hasNoResults `true` if the last search contains no result.\n * @property {Object} widgetParams All original `CustomStarRatingWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * **StarRating** connector provides the logic to build a custom widget that will let\n * the user refine search results based on ratings.\n *\n * The connector provides to the rendering: `refine()` to select a value and\n * `items` that are the values that can be selected. `refine` should be used\n * with `items.value`.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/rating-menu/js/\n * @param {function(StarRatingRenderingOptions, boolean)} renderFn Rendering function for the custom **StarRating** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomStarRatingWidgetOptions)} Re-usable widget factory for a custom **StarRating** widget.\n * @example\n * // custom `renderFn` to render the custom StarRating widget\n * function renderFn(StarRatingRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     StarRatingRenderingOptions.widgetParams.containerNode.html('<ul></ul>');\n *   }\n *\n *   StarRatingRenderingOptions.widgetParams.containerNode\n *     .find('li[data-refine-value]')\n *     .each(function() { $(this).off('click'); });\n *\n *   var listHTML = StarRatingRenderingOptions.items.map(function(item) {\n *     return '<li data-refine-value=\"' + item.value + '\">' +\n *       '<a href=\"' + StarRatingRenderingOptions.createURL(item.value) + '\">' +\n *       item.stars.map(function(star) { return star === false ? '☆' : '★'; }).join(' ') +\n *       '& up (' + item.count + ')' +\n *       '</a></li>';\n *   });\n *\n *   StarRatingRenderingOptions.widgetParams.containerNode\n *     .find('ul')\n *     .html(listHTML);\n *\n *   StarRatingRenderingOptions.widgetParams.containerNode\n *     .find('li[data-refine-value]')\n *     .each(function() {\n *       $(this).on('click', function(event) {\n *         event.preventDefault();\n *         event.stopPropagation();\n *\n *         StarRatingRenderingOptions.refine($(this).data('refine-value'));\n *       });\n *     });\n * }\n *\n * // connect `renderFn` to StarRating logic\n * var customStarRating = instantsearch.connectors.connectStarRating(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customStarRating({\n *     containerNode: $('#custom-star-rating-container'),\n *     attributeName: 'rating',\n *     max: 5,\n *   })\n * );\n */\nexport default function connectStarRating(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var attributeName = widgetParams.attributeName,\n        _widgetParams$max = widgetParams.max,\n        max = _widgetParams$max === undefined ? 5 : _widgetParams$max;\n\n\n    if (!attributeName) {\n      throw new Error(usage);\n    }\n\n    return {\n      getConfiguration: function getConfiguration() {\n        return { disjunctiveFacets: [attributeName] };\n      },\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            createURL = _ref.createURL,\n            instantSearchInstance = _ref.instantSearchInstance;\n\n        this._toggleRefinement = this._toggleRefinement.bind(this, helper);\n        this._createURL = function (state) {\n          return function (facetValue) {\n            return createURL(state.toggleRefinement(attributeName, facetValue));\n          };\n        };\n\n        renderFn({\n          instantSearchInstance: instantSearchInstance,\n          items: [],\n          hasNoResults: true,\n          refine: this._toggleRefinement,\n          createURL: this._createURL(helper.state),\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var helper = _ref2.helper,\n            results = _ref2.results,\n            state = _ref2.state,\n            instantSearchInstance = _ref2.instantSearchInstance;\n\n        var facetValues = [];\n        var allValues = {};\n        for (var v = max; v >= 0; --v) {\n          allValues[v] = 0;\n        }\n        results.getFacetValues(attributeName).forEach(function (facet) {\n          var val = Math.round(facet.name);\n          if (!val || val > max) {\n            return;\n          }\n          for (var _v = val; _v >= 1; --_v) {\n            allValues[_v] += facet.count;\n          }\n        });\n        var refinedStar = this._getRefinedStar(helper.state);\n        for (var star = max - 1; star >= 1; --star) {\n          var count = allValues[star];\n          if (refinedStar && star !== refinedStar && count === 0) {\n            // skip count==0 when at least 1 refinement is enabled\n            // eslint-disable-next-line no-continue\n            continue;\n          }\n          var stars = [];\n          for (var i = 1; i <= max; ++i) {\n            stars.push(i <= star);\n          }\n          facetValues.push({\n            stars: stars,\n            name: String(star),\n            value: String(star),\n            count: count,\n            isRefined: refinedStar === star\n          });\n        }\n\n        renderFn({\n          instantSearchInstance: instantSearchInstance,\n          items: facetValues,\n          hasNoResults: results.nbHits === 0,\n          refine: this._toggleRefinement,\n          createURL: this._createURL(state),\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose(_ref3) {\n        var state = _ref3.state;\n\n        unmountFn();\n\n        var nextState = state.removeDisjunctiveFacetRefinement(attributeName).removeDisjunctiveFacet(attributeName);\n\n        return nextState;\n      },\n      getWidgetState: function getWidgetState(uiState, _ref4) {\n        var searchParameters = _ref4.searchParameters;\n\n        var refinedStar = this._getRefinedStar(searchParameters);\n        if (refinedStar === undefined || uiState && uiState.starRating && uiState.starRating[attributeName] === refinedStar) return uiState;\n        return _extends({}, uiState, {\n          starRating: _extends({}, uiState.starRating, _defineProperty({}, attributeName, refinedStar))\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n        var uiState = _ref5.uiState;\n\n        var starRatingFromURL = uiState.starRating && uiState.starRating[attributeName];\n        var refinedStar = this._getRefinedStar(searchParameters);\n\n        if (starRatingFromURL === refinedStar) return searchParameters;\n\n        var clearedSearchParam = searchParameters.clearRefinements(attributeName);\n\n        if (starRatingFromURL !== undefined) {\n          for (var val = Number(starRatingFromURL); val <= max; ++val) {\n            clearedSearchParam = clearedSearchParam.addDisjunctiveFacetRefinement(attributeName, val);\n          }\n        }\n\n        return clearedSearchParam;\n      },\n      _toggleRefinement: function _toggleRefinement(helper, facetValue) {\n        var isRefined = this._getRefinedStar(helper.state) === Number(facetValue);\n        helper.clearRefinements(attributeName);\n        if (!isRefined) {\n          for (var val = Number(facetValue); val <= max; ++val) {\n            helper.addDisjunctiveFacetRefinement(attributeName, val);\n          }\n        }\n        helper.search();\n      },\n      _getRefinedStar: function _getRefinedStar(searchParameters) {\n        var refinedStar = undefined;\n        var refinements = searchParameters.getDisjunctiveRefinements(attributeName);\n        refinements.forEach(function (r) {\n          if (!refinedStar || Number(r) < refinedStar) {\n            refinedStar = Number(r);\n          }\n        });\n        return refinedStar;\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}