{"ast":null,"code":"import { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customStats = connectStats(function render(params, isFirstRendering) {\\n  // params = {\\n  //   instantSearchInstance,\\n  //   hitsPerPage,\\n  //   nbHits,\\n  //   nbPages,\\n  //   page,\\n  //   processingTimeMS,\\n  //   query,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(customStats());\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectStats.html';\n/**\n * @typedef {Object} StatsRenderingOptions\n * @property {number} hitsPerPage The maximum number of hits per page returned by Algolia.\n * @property {number} nbHits The number of hits in the result set.\n * @property {number} nbPages The number of pages computed for the result set.\n * @property {number} page The current page.\n * @property {number} processingTimeMS The time taken to compute the results inside the Algolia engine.\n * @property {string} query The query used for the current search.\n * @property {object} widgetParams All original `CustomStatsWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * **Stats** connector provides the logic to build a custom widget that will displays\n * search statistics (hits number and processing time).\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/stats/js/\n * @param {function(StatsRenderingOptions, boolean)} renderFn Rendering function for the custom **Stats** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function} Re-usable widget factory for a custom **Stats** widget.\n * @example\n * // custom `renderFn` to render the custom Stats widget\n * function renderFn(StatsRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) return;\n *\n *   StatsRenderingOptions.widgetParams.containerNode\n *     .html(StatsRenderingOptions.nbHits + ' results found in ' + StatsRenderingOptions.processingTimeMS);\n * }\n *\n * // connect `renderFn` to Stats logic\n * var customStatsWidget = instantsearch.connectors.connectStats(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customStatsWidget({\n *     containerNode: $('#custom-stats-container'),\n *   })\n * );\n */\n\nexport default function connectStats(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            instantSearchInstance = _ref.instantSearchInstance;\n        renderFn({\n          instantSearchInstance: instantSearchInstance,\n          hitsPerPage: helper.state.hitsPerPage,\n          nbHits: 0,\n          nbPages: 0,\n          page: helper.state.page,\n          processingTimeMS: -1,\n          query: helper.state.query,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var results = _ref2.results,\n            instantSearchInstance = _ref2.instantSearchInstance;\n        renderFn({\n          instantSearchInstance: instantSearchInstance,\n          hitsPerPage: results.hitsPerPage,\n          nbHits: results.nbHits,\n          nbPages: results.nbPages,\n          page: results.page,\n          processingTimeMS: results.processingTimeMS,\n          query: results.query,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose() {\n        unmountFn();\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/stats/connectStats.js"],"names":["checkRendering","usage","connectStats","renderFn","unmountFn","widgetParams","arguments","length","undefined","init","_ref","helper","instantSearchInstance","hitsPerPage","state","nbHits","nbPages","page","processingTimeMS","query","render","_ref2","results","dispose"],"mappings":"AAAA,SAASA,cAAT,QAA+B,oBAA/B;AAEA,IAAIC,KAAK,GAAG,saAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,SAAhC,EAA2C;AACxDJ,EAAAA,cAAc,CAACG,QAAD,EAAWF,KAAX,CAAd;AAEA,SAAO,YAAY;AACjB,QAAII,YAAY,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAvF;AACA,WAAO;AACLG,MAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC,IAAd,EAAoB;AACxB,YAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,YACIC,qBAAqB,GAAGF,IAAI,CAACE,qBADjC;AAGAT,QAAAA,QAAQ,CAAC;AACPS,UAAAA,qBAAqB,EAAEA,qBADhB;AAEPC,UAAAA,WAAW,EAAEF,MAAM,CAACG,KAAP,CAAaD,WAFnB;AAGPE,UAAAA,MAAM,EAAE,CAHD;AAIPC,UAAAA,OAAO,EAAE,CAJF;AAKPC,UAAAA,IAAI,EAAEN,MAAM,CAACG,KAAP,CAAaG,IALZ;AAMPC,UAAAA,gBAAgB,EAAE,CAAC,CANZ;AAOPC,UAAAA,KAAK,EAAER,MAAM,CAACG,KAAP,CAAaK,KAPb;AAQPd,UAAAA,YAAY,EAAEA;AARP,SAAD,EASL,IATK,CAAR;AAUD,OAfI;AAgBLe,MAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AAC7B,YAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,YACIV,qBAAqB,GAAGS,KAAK,CAACT,qBADlC;AAGAT,QAAAA,QAAQ,CAAC;AACPS,UAAAA,qBAAqB,EAAEA,qBADhB;AAEPC,UAAAA,WAAW,EAAES,OAAO,CAACT,WAFd;AAGPE,UAAAA,MAAM,EAAEO,OAAO,CAACP,MAHT;AAIPC,UAAAA,OAAO,EAAEM,OAAO,CAACN,OAJV;AAKPC,UAAAA,IAAI,EAAEK,OAAO,CAACL,IALP;AAMPC,UAAAA,gBAAgB,EAAEI,OAAO,CAACJ,gBANnB;AAOPC,UAAAA,KAAK,EAAEG,OAAO,CAACH,KAPR;AAQPd,UAAAA,YAAY,EAAEA;AARP,SAAD,EASL,KATK,CAAR;AAUD,OA9BI;AA+BLkB,MAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1BnB,QAAAA,SAAS;AACV;AAjCI,KAAP;AAmCD,GArCD;AAsCD","sourcesContent":["import { checkRendering } from '../../lib/utils.js';\n\nvar usage = 'Usage:\\nvar customStats = connectStats(function render(params, isFirstRendering) {\\n  // params = {\\n  //   instantSearchInstance,\\n  //   hitsPerPage,\\n  //   nbHits,\\n  //   nbPages,\\n  //   page,\\n  //   processingTimeMS,\\n  //   query,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(customStats());\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectStats.html';\n\n/**\n * @typedef {Object} StatsRenderingOptions\n * @property {number} hitsPerPage The maximum number of hits per page returned by Algolia.\n * @property {number} nbHits The number of hits in the result set.\n * @property {number} nbPages The number of pages computed for the result set.\n * @property {number} page The current page.\n * @property {number} processingTimeMS The time taken to compute the results inside the Algolia engine.\n * @property {string} query The query used for the current search.\n * @property {object} widgetParams All original `CustomStatsWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * **Stats** connector provides the logic to build a custom widget that will displays\n * search statistics (hits number and processing time).\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/stats/js/\n * @param {function(StatsRenderingOptions, boolean)} renderFn Rendering function for the custom **Stats** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function} Re-usable widget factory for a custom **Stats** widget.\n * @example\n * // custom `renderFn` to render the custom Stats widget\n * function renderFn(StatsRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) return;\n *\n *   StatsRenderingOptions.widgetParams.containerNode\n *     .html(StatsRenderingOptions.nbHits + ' results found in ' + StatsRenderingOptions.processingTimeMS);\n * }\n *\n * // connect `renderFn` to Stats logic\n * var customStatsWidget = instantsearch.connectors.connectStats(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customStatsWidget({\n *     containerNode: $('#custom-stats-container'),\n *   })\n * );\n */\nexport default function connectStats(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            instantSearchInstance = _ref.instantSearchInstance;\n\n        renderFn({\n          instantSearchInstance: instantSearchInstance,\n          hitsPerPage: helper.state.hitsPerPage,\n          nbHits: 0,\n          nbPages: 0,\n          page: helper.state.page,\n          processingTimeMS: -1,\n          query: helper.state.query,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var results = _ref2.results,\n            instantSearchInstance = _ref2.instantSearchInstance;\n\n        renderFn({\n          instantSearchInstance: instantSearchInstance,\n          hitsPerPage: results.hitsPerPage,\n          nbHits: results.nbHits,\n          nbPages: results.nbPages,\n          page: results.page,\n          processingTimeMS: results.processingTimeMS,\n          query: results.query,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose() {\n        unmountFn();\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}