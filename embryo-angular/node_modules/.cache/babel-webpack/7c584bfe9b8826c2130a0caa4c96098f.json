{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport { checkRendering } from '../../lib/utils.js';\nimport Paginator from './Paginator';\nvar usage = 'Usage:\\nvar customPagination = connectPagination(function render(params, isFirstRendering) {\\n  // params = {\\n  //   createURL,\\n  //   currentRefinement,\\n  //   nbHits,\\n  //   nbPages,\\n  //   pages,\\n  //   refine,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customPagination({\\n    [ maxPages ]\\n    [ padding ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectPagination.html\\n';\n/**\n * @typedef {Object} CustomPaginationWidgetOptions\n * @property {number} [maxPages] The max number of pages to browse.\n * @property {number} [padding=3] The padding of pages to show around the current page\n */\n\n/**\n * @typedef {Object} PaginationRenderingOptions\n * @property {function(page): string} createURL Creates URLs for the next state, the number is the page to generate the URL for.\n * @property {number} currentRefinement The number of the page currently displayed.\n * @property {number} nbHits The number of hits computed for the last query (can be approximated).\n * @property {number} nbPages The number of pages for the result set.\n * @property {number[]} pages The actual pages relevant to the current situation and padding\n * @property {boolean} isFirstPage true if the current page is also the first page\n * @property {boolean} isLastPage true if the current page is also the last page\n * @property {function(page)} refine Sets the current page and trigger a search.\n * @property {Object} widgetParams All original `CustomPaginationWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * **Pagination** connector provides the logic to build a widget that will let the user\n * choose the current page of the results.\n *\n * When using the pagination with Algolia, you should be aware that the engine won't provide you pages\n * beyond the 1000th hits by default. You can find more information on the [Algolia documentation](https://www.algolia.com/doc/guides/searching/pagination/#pagination-limitations).\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/pagination/js/\n * @param {function(PaginationRenderingOptions, boolean)} renderFn Rendering function for the custom **Pagination** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomPaginationWidgetOptions)} Re-usable widget factory for a custom **Pagination** widget.\n * @example\n * // custom `renderFn` to render the custom Pagination widget\n * function renderFn(PaginationRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     PaginationRenderingOptions.widgetParams.containerNode.html('<ul></ul>');\n *   }\n *\n *   // remove event listeners before replacing markup\n *   PaginationRenderingOptions.widgetParams.containerNode\n *     .find('a[data-page]')\n *     .each(function() { $(this).off('click'); });\n *\n *   var pages = PaginationRenderingOptions.pages\n *     .map(function(page) {\n *       return '<li style=\"display: inline-block; margin-right: 10px;\">' +\n *         '<a href=\"' + PaginationRenderingOptions.createURL(page) + '\" data-page=\"' + page + '\">' +\n *         (parseInt(page) + 1) + '</a></li>';\n *     });\n *\n *   PaginationRenderingOptions.widgetParams.containerNode\n *     .find('ul')\n *     .html(pages);\n *\n *   PaginationRenderingOptions.widgetParams.containerNode\n *     .find('a[data-page]')\n *     .each(function() {\n *       $(this).on('click', function(event) {\n *         event.preventDefault();\n *         PaginationRenderingOptions.refine($(this).data('page'));\n *       });\n *     });\n * }\n *\n * // connect `renderFn` to Pagination logic\n * var customPagination = instantsearch.connectors.connectPagination(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customPagination({\n *     containerNode: $('#custom-pagination-container'),\n *     maxPages: 20,\n *     padding: 4,\n *   })\n * );\n */\n\nexport default function connectPagination(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var maxPages = widgetParams.maxPages,\n        _widgetParams$padding = widgetParams.padding,\n        padding = _widgetParams$padding === undefined ? 3 : _widgetParams$padding;\n    var pager = new Paginator({\n      currentPage: 0,\n      total: 0,\n      padding: padding\n    });\n    return {\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            createURL = _ref.createURL,\n            instantSearchInstance = _ref.instantSearchInstance;\n\n        this.refine = function (page) {\n          helper.setPage(page);\n          helper.search();\n        };\n\n        this.createURL = function (state) {\n          return function (page) {\n            return createURL(state.setPage(page));\n          };\n        };\n\n        renderFn({\n          createURL: this.createURL(helper.state),\n          currentRefinement: helper.getPage() || 0,\n          nbHits: 0,\n          nbPages: 0,\n          pages: [],\n          isFirstPage: true,\n          isLastPage: true,\n          refine: this.refine,\n          widgetParams: widgetParams,\n          instantSearchInstance: instantSearchInstance\n        }, true);\n      },\n      getMaxPage: function getMaxPage(_ref2) {\n        var nbPages = _ref2.nbPages;\n        return maxPages !== undefined ? Math.min(maxPages, nbPages) : nbPages;\n      },\n      render: function render(_ref3) {\n        var results = _ref3.results,\n            state = _ref3.state,\n            instantSearchInstance = _ref3.instantSearchInstance;\n        var nbPages = this.getMaxPage(results);\n        pager.currentPage = state.page;\n        pager.total = nbPages;\n        renderFn({\n          createURL: this.createURL(state),\n          currentRefinement: state.page,\n          refine: this.refine,\n          nbHits: results.nbHits,\n          nbPages: nbPages,\n          pages: pager.pages(),\n          isFirstPage: pager.isFirstPage(),\n          isLastPage: pager.isLastPage(),\n          widgetParams: widgetParams,\n          instantSearchInstance: instantSearchInstance\n        }, false);\n      },\n      dispose: function dispose() {\n        unmountFn();\n      },\n      getWidgetState: function getWidgetState(uiState, _ref4) {\n        var searchParameters = _ref4.searchParameters;\n        var page = searchParameters.page;\n        if (page === 0 || page + 1 === uiState.page) return uiState;\n        return _extends({}, uiState, {\n          page: page + 1\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n        var uiState = _ref5.uiState;\n        var uiPage = uiState.page;\n        if (uiPage) return searchParameters.setQueryParameter('page', uiState.page - 1);\n        return searchParameters.setQueryParameter('page', 0);\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/pagination/connectPagination.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","checkRendering","Paginator","usage","connectPagination","renderFn","unmountFn","widgetParams","undefined","maxPages","_widgetParams$padding","padding","pager","currentPage","total","init","_ref","helper","createURL","instantSearchInstance","refine","page","setPage","search","state","currentRefinement","getPage","nbHits","nbPages","pages","isFirstPage","isLastPage","getMaxPage","_ref2","Math","min","render","_ref3","results","dispose","getWidgetState","uiState","_ref4","searchParameters","getWidgetSearchParameters","_ref5","uiPage","setQueryParameter"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport { checkRendering } from '../../lib/utils.js';\nimport Paginator from './Paginator';\n\nvar usage = 'Usage:\\nvar customPagination = connectPagination(function render(params, isFirstRendering) {\\n  // params = {\\n  //   createURL,\\n  //   currentRefinement,\\n  //   nbHits,\\n  //   nbPages,\\n  //   pages,\\n  //   refine,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customPagination({\\n    [ maxPages ]\\n    [ padding ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectPagination.html\\n';\n\n/**\n * @typedef {Object} CustomPaginationWidgetOptions\n * @property {number} [maxPages] The max number of pages to browse.\n * @property {number} [padding=3] The padding of pages to show around the current page\n */\n\n/**\n * @typedef {Object} PaginationRenderingOptions\n * @property {function(page): string} createURL Creates URLs for the next state, the number is the page to generate the URL for.\n * @property {number} currentRefinement The number of the page currently displayed.\n * @property {number} nbHits The number of hits computed for the last query (can be approximated).\n * @property {number} nbPages The number of pages for the result set.\n * @property {number[]} pages The actual pages relevant to the current situation and padding\n * @property {boolean} isFirstPage true if the current page is also the first page\n * @property {boolean} isLastPage true if the current page is also the last page\n * @property {function(page)} refine Sets the current page and trigger a search.\n * @property {Object} widgetParams All original `CustomPaginationWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * **Pagination** connector provides the logic to build a widget that will let the user\n * choose the current page of the results.\n *\n * When using the pagination with Algolia, you should be aware that the engine won't provide you pages\n * beyond the 1000th hits by default. You can find more information on the [Algolia documentation](https://www.algolia.com/doc/guides/searching/pagination/#pagination-limitations).\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/pagination/js/\n * @param {function(PaginationRenderingOptions, boolean)} renderFn Rendering function for the custom **Pagination** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomPaginationWidgetOptions)} Re-usable widget factory for a custom **Pagination** widget.\n * @example\n * // custom `renderFn` to render the custom Pagination widget\n * function renderFn(PaginationRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     PaginationRenderingOptions.widgetParams.containerNode.html('<ul></ul>');\n *   }\n *\n *   // remove event listeners before replacing markup\n *   PaginationRenderingOptions.widgetParams.containerNode\n *     .find('a[data-page]')\n *     .each(function() { $(this).off('click'); });\n *\n *   var pages = PaginationRenderingOptions.pages\n *     .map(function(page) {\n *       return '<li style=\"display: inline-block; margin-right: 10px;\">' +\n *         '<a href=\"' + PaginationRenderingOptions.createURL(page) + '\" data-page=\"' + page + '\">' +\n *         (parseInt(page) + 1) + '</a></li>';\n *     });\n *\n *   PaginationRenderingOptions.widgetParams.containerNode\n *     .find('ul')\n *     .html(pages);\n *\n *   PaginationRenderingOptions.widgetParams.containerNode\n *     .find('a[data-page]')\n *     .each(function() {\n *       $(this).on('click', function(event) {\n *         event.preventDefault();\n *         PaginationRenderingOptions.refine($(this).data('page'));\n *       });\n *     });\n * }\n *\n * // connect `renderFn` to Pagination logic\n * var customPagination = instantsearch.connectors.connectPagination(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customPagination({\n *     containerNode: $('#custom-pagination-container'),\n *     maxPages: 20,\n *     padding: 4,\n *   })\n * );\n */\nexport default function connectPagination(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var maxPages = widgetParams.maxPages,\n        _widgetParams$padding = widgetParams.padding,\n        padding = _widgetParams$padding === undefined ? 3 : _widgetParams$padding;\n\n\n    var pager = new Paginator({\n      currentPage: 0,\n      total: 0,\n      padding: padding\n    });\n\n    return {\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            createURL = _ref.createURL,\n            instantSearchInstance = _ref.instantSearchInstance;\n\n        this.refine = function (page) {\n          helper.setPage(page);\n          helper.search();\n        };\n\n        this.createURL = function (state) {\n          return function (page) {\n            return createURL(state.setPage(page));\n          };\n        };\n\n        renderFn({\n          createURL: this.createURL(helper.state),\n          currentRefinement: helper.getPage() || 0,\n          nbHits: 0,\n          nbPages: 0,\n          pages: [],\n          isFirstPage: true,\n          isLastPage: true,\n          refine: this.refine,\n          widgetParams: widgetParams,\n          instantSearchInstance: instantSearchInstance\n        }, true);\n      },\n      getMaxPage: function getMaxPage(_ref2) {\n        var nbPages = _ref2.nbPages;\n\n        return maxPages !== undefined ? Math.min(maxPages, nbPages) : nbPages;\n      },\n      render: function render(_ref3) {\n        var results = _ref3.results,\n            state = _ref3.state,\n            instantSearchInstance = _ref3.instantSearchInstance;\n\n        var nbPages = this.getMaxPage(results);\n        pager.currentPage = state.page;\n        pager.total = nbPages;\n\n        renderFn({\n          createURL: this.createURL(state),\n          currentRefinement: state.page,\n          refine: this.refine,\n          nbHits: results.nbHits,\n          nbPages: nbPages,\n          pages: pager.pages(),\n          isFirstPage: pager.isFirstPage(),\n          isLastPage: pager.isLastPage(),\n          widgetParams: widgetParams,\n          instantSearchInstance: instantSearchInstance\n        }, false);\n      },\n      dispose: function dispose() {\n        unmountFn();\n      },\n      getWidgetState: function getWidgetState(uiState, _ref4) {\n        var searchParameters = _ref4.searchParameters;\n\n        var page = searchParameters.page;\n        if (page === 0 || page + 1 === uiState.page) return uiState;\n        return _extends({}, uiState, {\n          page: page + 1\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n        var uiState = _ref5.uiState;\n\n        var uiPage = uiState.page;\n        if (uiPage) return searchParameters.setQueryParameter('page', uiState.page - 1);\n        return searchParameters.setQueryParameter('page', 0);\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}