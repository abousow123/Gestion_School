{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customNumericSelector = connectNumericSelector(function renderFn(params, isFirstRendering) {\\n  // params = {\\n  //   currentRefinement,\\n  //   options,\\n  //   refine,\\n  //   hasNoResults,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customNumericSelector({\\n    attributeName,\\n    options,\\n    [ operator = \\'=\\' ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectNumericSelector.html\\n';\n/**\n * @typedef {Object} NumericSelectorOption\n * @property {number} value The numerical value to refine with.\n * If the value is `undefined` or `\"undefined\"`, the option resets the filter.\n * @property {string} label Label to display in the option.\n */\n\n/**\n * @typedef {Object} CustomNumericSelectorWidgetOptions\n * @property {string} attributeName Name of the attribute for faceting (eg. \"free_shipping\").\n * @property {NumericSelectorOption[]} options Array of objects defining the different values and labels.\n * @property {string} [operator = '＝'] The operator to use to refine. Supports following operators: <, <=, =, >, >= and !=.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * @typedef {Object} NumericSelectorRenderingOptions\n * @property {string} currentRefinement The currently selected value.\n * @property {NumericSelectorOption[]} options The different values and labels of the selector.\n * @property {function(option.value)} refine Updates the results with the selected value.\n * @property {boolean} hasNoResults `true` if the last search contains no result.\n * @property {Object} widgetParams All original `CustomNumericSelectorWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * **NumericSelector** connector provides the logic to build a custom widget that will let the\n * user filter the results based on a list of numerical filters.\n *\n * It provides a `refine(value)` function to trigger a new search with selected option.\n * @type {Connector}\n * @param {function(NumericSelectorRenderingOptions, boolean)} renderFn Rendering function for the custom **NumericSelector** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomNumericSelectorWidgetOptions)} Re-usable widget factory for a custom **NumericSelector** widget.\n * @example\n * // custom `renderFn` to render the custom NumericSelector widget\n * function renderFn(NumericSelectorRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     NumericSelectorRenderingOptions.widgetParams.containerNode.html('<select></select>');\n *     NumericSelectorRenderingOptions.widgetParams.containerNode\n *       .find('select')\n *       .on('change', function(event) {\n *         NumericSelectorRenderingOptions.refine(event.target.value);\n *       })\n *   }\n *\n *   var optionsHTML = NumericSelectorRenderingOptions.options.map(function(option) {\n *     return '<option value=\"' + option.value + '\"' +\n *       (NumericSelectorRenderingOptions.currentRefinement === option.value ? ' selected' : '') + '>' +\n *       option.label + '</option>';\n *   });\n *\n *   NumericSelectorRenderingOptions.widgetParams.containerNode\n *     .find('select')\n *     .html(optionsHTML);\n * }\n *\n * // connect `renderFn` to NumericSelector logic\n * var customNumericSelector = instantsearch.connectors.connectNumericSelector(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customNumericSelector({\n *     containerNode: $('#custom-numeric-selector-container'),\n *     operator: '>=',\n *     attributeName: 'popularity',\n *     options: [\n *       {label: 'Default', value: 0},\n *       {label: 'Top 10', value: 9991},\n *       {label: 'Top 100', value: 9901},\n *       {label: 'Top 500', value: 9501},\n *     ],\n *   })\n * );\n */\n\nexport default function connectNumericSelector(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var attributeName = widgetParams.attributeName,\n        options = widgetParams.options,\n        _widgetParams$operato = widgetParams.operator,\n        operator = _widgetParams$operato === undefined ? '=' : _widgetParams$operato,\n        _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n\n    if (!attributeName || !options) {\n      throw new Error(usage);\n    }\n\n    return {\n      getConfiguration: function getConfiguration(currentSearchParameters, searchParametersFromUrl) {\n        var value = this._getRefinedValue(searchParametersFromUrl);\n\n        if (value) {\n          return {\n            numericRefinements: _defineProperty({}, attributeName, _defineProperty({}, operator, [value]))\n          };\n        }\n\n        return {};\n      },\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            instantSearchInstance = _ref.instantSearchInstance;\n\n        this._refine = function (value) {\n          helper.clearRefinements(attributeName);\n\n          if (value !== undefined && value !== 'undefined') {\n            helper.addNumericRefinement(attributeName, operator, value);\n          }\n\n          helper.search();\n        };\n\n        renderFn({\n          currentRefinement: this._getRefinedValue(helper.state),\n          options: transformItems(options),\n          refine: this._refine,\n          hasNoResults: true,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var helper = _ref2.helper,\n            results = _ref2.results,\n            instantSearchInstance = _ref2.instantSearchInstance;\n        renderFn({\n          currentRefinement: this._getRefinedValue(helper.state),\n          options: transformItems(options),\n          refine: this._refine,\n          hasNoResults: results.nbHits === 0,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose(_ref3) {\n        var state = _ref3.state;\n        unmountFn();\n        return state.removeNumericRefinement(attributeName);\n      },\n      getWidgetState: function getWidgetState(uiState, _ref4) {\n        var searchParameters = _ref4.searchParameters;\n\n        var currentRefinement = this._getRefinedValue(searchParameters);\n\n        if ( // Does the current state contain the current refinement?\n        uiState.numericSelector && currentRefinement === uiState.numericSelector[attributeName] || // Is the current value the first option / default value?\n        currentRefinement === options[0].value) {\n          return uiState;\n        }\n\n        if (currentRefinement || currentRefinement === 0) return _extends({}, uiState, {\n          numericSelector: _extends({}, uiState.numericSelector, _defineProperty({}, attributeName, currentRefinement))\n        });\n        return uiState;\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n        var uiState = _ref5.uiState;\n        var value = uiState.numericSelector && uiState.numericSelector[attributeName];\n\n        var currentlyRefinedValue = this._getRefinedValue(searchParameters);\n\n        if (value) {\n          if (value === currentlyRefinedValue) return searchParameters;\n          return searchParameters.clearRefinements(attributeName).addNumericRefinement(attributeName, operator, value);\n        }\n\n        var firstItemValue = options[0] && options[0].value;\n\n        if (typeof firstItemValue === 'number') {\n          return searchParameters.clearRefinements(attributeName).addNumericRefinement(attributeName, operator, options[0].value);\n        }\n\n        return searchParameters;\n      },\n      _getRefinedValue: function _getRefinedValue(state) {\n        // This is reimplementing state.getNumericRefinement\n        // But searchParametersFromUrl is not an actual SearchParameters object\n        // It's only the object structure without the methods, because getStateFromQueryString\n        // is not sending a SearchParameters. There's no way given how we built the helper\n        // to initialize a true partial state where only the refinements are present\n        return state && state.numericRefinements && state.numericRefinements[attributeName] !== undefined && state.numericRefinements[attributeName][operator] !== undefined && state.numericRefinements[attributeName][operator][0] !== undefined // could be 0\n        ? state.numericRefinements[attributeName][operator][0] : options[0].value;\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/numeric-selector/connectNumericSelector.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","checkRendering","usage","connectNumericSelector","renderFn","unmountFn","widgetParams","undefined","attributeName","options","_widgetParams$operato","operator","_widgetParams$transfo","transformItems","items","Error","getConfiguration","currentSearchParameters","searchParametersFromUrl","_getRefinedValue","numericRefinements","init","_ref","helper","instantSearchInstance","_refine","clearRefinements","addNumericRefinement","search","currentRefinement","state","refine","hasNoResults","render","_ref2","results","nbHits","dispose","_ref3","removeNumericRefinement","getWidgetState","uiState","_ref4","searchParameters","numericSelector","getWidgetSearchParameters","_ref5","currentlyRefinedValue","firstItemValue"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { checkRendering } from '../../lib/utils.js';\n\nvar usage = 'Usage:\\nvar customNumericSelector = connectNumericSelector(function renderFn(params, isFirstRendering) {\\n  // params = {\\n  //   currentRefinement,\\n  //   options,\\n  //   refine,\\n  //   hasNoResults,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customNumericSelector({\\n    attributeName,\\n    options,\\n    [ operator = \\'=\\' ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectNumericSelector.html\\n';\n\n/**\n * @typedef {Object} NumericSelectorOption\n * @property {number} value The numerical value to refine with.\n * If the value is `undefined` or `\"undefined\"`, the option resets the filter.\n * @property {string} label Label to display in the option.\n */\n\n/**\n * @typedef {Object} CustomNumericSelectorWidgetOptions\n * @property {string} attributeName Name of the attribute for faceting (eg. \"free_shipping\").\n * @property {NumericSelectorOption[]} options Array of objects defining the different values and labels.\n * @property {string} [operator = '＝'] The operator to use to refine. Supports following operators: <, <=, =, >, >= and !=.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * @typedef {Object} NumericSelectorRenderingOptions\n * @property {string} currentRefinement The currently selected value.\n * @property {NumericSelectorOption[]} options The different values and labels of the selector.\n * @property {function(option.value)} refine Updates the results with the selected value.\n * @property {boolean} hasNoResults `true` if the last search contains no result.\n * @property {Object} widgetParams All original `CustomNumericSelectorWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * **NumericSelector** connector provides the logic to build a custom widget that will let the\n * user filter the results based on a list of numerical filters.\n *\n * It provides a `refine(value)` function to trigger a new search with selected option.\n * @type {Connector}\n * @param {function(NumericSelectorRenderingOptions, boolean)} renderFn Rendering function for the custom **NumericSelector** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomNumericSelectorWidgetOptions)} Re-usable widget factory for a custom **NumericSelector** widget.\n * @example\n * // custom `renderFn` to render the custom NumericSelector widget\n * function renderFn(NumericSelectorRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     NumericSelectorRenderingOptions.widgetParams.containerNode.html('<select></select>');\n *     NumericSelectorRenderingOptions.widgetParams.containerNode\n *       .find('select')\n *       .on('change', function(event) {\n *         NumericSelectorRenderingOptions.refine(event.target.value);\n *       })\n *   }\n *\n *   var optionsHTML = NumericSelectorRenderingOptions.options.map(function(option) {\n *     return '<option value=\"' + option.value + '\"' +\n *       (NumericSelectorRenderingOptions.currentRefinement === option.value ? ' selected' : '') + '>' +\n *       option.label + '</option>';\n *   });\n *\n *   NumericSelectorRenderingOptions.widgetParams.containerNode\n *     .find('select')\n *     .html(optionsHTML);\n * }\n *\n * // connect `renderFn` to NumericSelector logic\n * var customNumericSelector = instantsearch.connectors.connectNumericSelector(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customNumericSelector({\n *     containerNode: $('#custom-numeric-selector-container'),\n *     operator: '>=',\n *     attributeName: 'popularity',\n *     options: [\n *       {label: 'Default', value: 0},\n *       {label: 'Top 10', value: 9991},\n *       {label: 'Top 100', value: 9901},\n *       {label: 'Top 500', value: 9501},\n *     ],\n *   })\n * );\n */\nexport default function connectNumericSelector(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var attributeName = widgetParams.attributeName,\n        options = widgetParams.options,\n        _widgetParams$operato = widgetParams.operator,\n        operator = _widgetParams$operato === undefined ? '=' : _widgetParams$operato,\n        _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n\n\n    if (!attributeName || !options) {\n      throw new Error(usage);\n    }\n\n    return {\n      getConfiguration: function getConfiguration(currentSearchParameters, searchParametersFromUrl) {\n        var value = this._getRefinedValue(searchParametersFromUrl);\n        if (value) {\n          return {\n            numericRefinements: _defineProperty({}, attributeName, _defineProperty({}, operator, [value]))\n          };\n        }\n        return {};\n      },\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            instantSearchInstance = _ref.instantSearchInstance;\n\n        this._refine = function (value) {\n          helper.clearRefinements(attributeName);\n          if (value !== undefined && value !== 'undefined') {\n            helper.addNumericRefinement(attributeName, operator, value);\n          }\n          helper.search();\n        };\n\n        renderFn({\n          currentRefinement: this._getRefinedValue(helper.state),\n          options: transformItems(options),\n          refine: this._refine,\n          hasNoResults: true,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var helper = _ref2.helper,\n            results = _ref2.results,\n            instantSearchInstance = _ref2.instantSearchInstance;\n\n        renderFn({\n          currentRefinement: this._getRefinedValue(helper.state),\n          options: transformItems(options),\n          refine: this._refine,\n          hasNoResults: results.nbHits === 0,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose(_ref3) {\n        var state = _ref3.state;\n\n        unmountFn();\n        return state.removeNumericRefinement(attributeName);\n      },\n      getWidgetState: function getWidgetState(uiState, _ref4) {\n        var searchParameters = _ref4.searchParameters;\n\n        var currentRefinement = this._getRefinedValue(searchParameters);\n        if (\n        // Does the current state contain the current refinement?\n        uiState.numericSelector && currentRefinement === uiState.numericSelector[attributeName] ||\n        // Is the current value the first option / default value?\n        currentRefinement === options[0].value) {\n          return uiState;\n        }\n\n        if (currentRefinement || currentRefinement === 0) return _extends({}, uiState, {\n          numericSelector: _extends({}, uiState.numericSelector, _defineProperty({}, attributeName, currentRefinement))\n        });\n        return uiState;\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {\n        var uiState = _ref5.uiState;\n\n        var value = uiState.numericSelector && uiState.numericSelector[attributeName];\n        var currentlyRefinedValue = this._getRefinedValue(searchParameters);\n\n        if (value) {\n          if (value === currentlyRefinedValue) return searchParameters;\n          return searchParameters.clearRefinements(attributeName).addNumericRefinement(attributeName, operator, value);\n        }\n\n        var firstItemValue = options[0] && options[0].value;\n        if (typeof firstItemValue === 'number') {\n          return searchParameters.clearRefinements(attributeName).addNumericRefinement(attributeName, operator, options[0].value);\n        }\n\n        return searchParameters;\n      },\n      _getRefinedValue: function _getRefinedValue(state) {\n        // This is reimplementing state.getNumericRefinement\n        // But searchParametersFromUrl is not an actual SearchParameters object\n        // It's only the object structure without the methods, because getStateFromQueryString\n        // is not sending a SearchParameters. There's no way given how we built the helper\n        // to initialize a true partial state where only the refinements are present\n        return state && state.numericRefinements && state.numericRefinements[attributeName] !== undefined && state.numericRefinements[attributeName][operator] !== undefined && state.numericRefinements[attributeName][operator][0] !== undefined // could be 0\n        ? state.numericRefinements[attributeName][operator][0] : options[0].value;\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}