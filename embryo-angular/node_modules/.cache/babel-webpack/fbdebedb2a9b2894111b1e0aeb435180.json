{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nimport escapeHits, { tagConfig } from '../../lib/escape-highlight.js';\nimport { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customInfiniteHits = connectInfiniteHits(function render(params, isFirstRendering) {\\n  // params = {\\n  //   hits,\\n  //   results,\\n  //   showMore,\\n  //   isLastPage,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customInfiniteHits({\\n    [ escapeHits: true ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectInfiniteHits.html\\n';\n/**\n * @typedef {Object} InfiniteHitsRenderingOptions\n * @property {Array<Object>} hits The aggregated matched hits from Algolia API of all pages.\n * @property {Object} results The complete results response from Algolia API.\n * @property {function} showMore Loads the next page of hits.\n * @property {boolean} isLastPage Indicates if the last page of hits has been reached.\n * @property {Object} widgetParams All original widget options forwarded to the `renderFn`.\n */\n\n/**\n * @typedef {Object} CustomInfiniteHitsWidgetOptions\n * @property {boolean} [escapeHits = false] If true, escape HTML tags from `hits[i]._highlightResult`.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * **InfiniteHits** connector provides the logic to create custom widgets that will render an continuous list of results retrieved from Algolia.\n *\n * This connector provides a `InfiniteHitsRenderingOptions.showMore()` function to load next page of matched results.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/infinite-hits/js/\n * @param {function(InfiniteHitsRenderingOptions, boolean)} renderFn Rendering function for the custom **InfiniteHits** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomInfiniteHitsWidgetOptions)} Re-usable widget factory for a custom **InfiniteHits** widget.\n * @example\n * // custom `renderFn` to render the custom InfiniteHits widget\n * function renderFn(InfiniteHitsRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     InfiniteHitsRenderingOptions.widgetParams.containerNode\n *       .html('<div id=\"hits\"></div><button id=\"show-more\">Load more</button>');\n *\n *     InfiniteHitsRenderingOptions.widgetParams.containerNode\n *       .find('#show-more')\n *       .on('click', function(event) {\n *         event.preventDefault();\n *         InfiniteHitsRenderingOptions.showMore();\n *       });\n *   }\n *\n *   InfiniteHitsRenderingOptions.widgetParams.containerNode.find('#hits').html(\n *     InfiniteHitsRenderingOptions.hits.map(function(hit) {\n *       return '<div>' + hit._highlightResult.name.value + '</div>';\n *     })\n *   );\n * };\n *\n * // connect `renderFn` to InfiniteHits logic\n * var customInfiniteHits = instantsearch.connectors.connectInfiniteHits(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customInfiniteHits({\n *     containerNode: $('#custom-infinite-hits-container'),\n *   })\n * );\n */\n\nexport default function connectInfiniteHits(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n    var hitsCache = [];\n    var lastReceivedPage = -1;\n\n    var getShowMore = function getShowMore(helper) {\n      return function () {\n        return helper.nextPage().search();\n      };\n    };\n\n    return {\n      getConfiguration: function getConfiguration() {\n        return widgetParams.escapeHits ? tagConfig : undefined;\n      },\n      init: function init(_ref) {\n        var instantSearchInstance = _ref.instantSearchInstance,\n            helper = _ref.helper;\n        this.showMore = getShowMore(helper);\n        renderFn({\n          hits: hitsCache,\n          results: undefined,\n          showMore: this.showMore,\n          isLastPage: true,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var results = _ref2.results,\n            state = _ref2.state,\n            instantSearchInstance = _ref2.instantSearchInstance;\n\n        if (state.page === 0) {\n          hitsCache = [];\n          lastReceivedPage = -1;\n        }\n\n        results.hits = transformItems(results.hits);\n\n        if (widgetParams.escapeHits && results.hits && results.hits.length > 0) {\n          results.hits = escapeHits(results.hits);\n        }\n\n        if (lastReceivedPage < state.page) {\n          hitsCache = [].concat(_toConsumableArray(hitsCache), _toConsumableArray(results.hits));\n          lastReceivedPage = state.page;\n        }\n\n        var isLastPage = results.nbPages <= results.page + 1;\n        renderFn({\n          hits: hitsCache,\n          results: results,\n          showMore: this.showMore,\n          isLastPage: isLastPage,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose() {\n        unmountFn();\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHits.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","escapeHits","tagConfig","checkRendering","usage","connectInfiniteHits","renderFn","unmountFn","widgetParams","arguments","undefined","_widgetParams$transfo","transformItems","items","hitsCache","lastReceivedPage","getShowMore","helper","nextPage","search","getConfiguration","init","_ref","instantSearchInstance","showMore","hits","results","isLastPage","render","_ref2","state","page","concat","nbPages","dispose"],"mappings":"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","sourcesContent":["function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport escapeHits, { tagConfig } from '../../lib/escape-highlight.js';\nimport { checkRendering } from '../../lib/utils.js';\n\nvar usage = 'Usage:\\nvar customInfiniteHits = connectInfiniteHits(function render(params, isFirstRendering) {\\n  // params = {\\n  //   hits,\\n  //   results,\\n  //   showMore,\\n  //   isLastPage,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customInfiniteHits({\\n    [ escapeHits: true ],\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectInfiniteHits.html\\n';\n\n/**\n * @typedef {Object} InfiniteHitsRenderingOptions\n * @property {Array<Object>} hits The aggregated matched hits from Algolia API of all pages.\n * @property {Object} results The complete results response from Algolia API.\n * @property {function} showMore Loads the next page of hits.\n * @property {boolean} isLastPage Indicates if the last page of hits has been reached.\n * @property {Object} widgetParams All original widget options forwarded to the `renderFn`.\n */\n\n/**\n * @typedef {Object} CustomInfiniteHitsWidgetOptions\n * @property {boolean} [escapeHits = false] If true, escape HTML tags from `hits[i]._highlightResult`.\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * **InfiniteHits** connector provides the logic to create custom widgets that will render an continuous list of results retrieved from Algolia.\n *\n * This connector provides a `InfiniteHitsRenderingOptions.showMore()` function to load next page of matched results.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/infinite-hits/js/\n * @param {function(InfiniteHitsRenderingOptions, boolean)} renderFn Rendering function for the custom **InfiniteHits** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomInfiniteHitsWidgetOptions)} Re-usable widget factory for a custom **InfiniteHits** widget.\n * @example\n * // custom `renderFn` to render the custom InfiniteHits widget\n * function renderFn(InfiniteHitsRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     InfiniteHitsRenderingOptions.widgetParams.containerNode\n *       .html('<div id=\"hits\"></div><button id=\"show-more\">Load more</button>');\n *\n *     InfiniteHitsRenderingOptions.widgetParams.containerNode\n *       .find('#show-more')\n *       .on('click', function(event) {\n *         event.preventDefault();\n *         InfiniteHitsRenderingOptions.showMore();\n *       });\n *   }\n *\n *   InfiniteHitsRenderingOptions.widgetParams.containerNode.find('#hits').html(\n *     InfiniteHitsRenderingOptions.hits.map(function(hit) {\n *       return '<div>' + hit._highlightResult.name.value + '</div>';\n *     })\n *   );\n * };\n *\n * // connect `renderFn` to InfiniteHits logic\n * var customInfiniteHits = instantsearch.connectors.connectInfiniteHits(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customInfiniteHits({\n *     containerNode: $('#custom-infinite-hits-container'),\n *   })\n * );\n */\nexport default function connectInfiniteHits(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n\n    var hitsCache = [];\n    var lastReceivedPage = -1;\n\n    var getShowMore = function getShowMore(helper) {\n      return function () {\n        return helper.nextPage().search();\n      };\n    };\n\n    return {\n      getConfiguration: function getConfiguration() {\n        return widgetParams.escapeHits ? tagConfig : undefined;\n      },\n      init: function init(_ref) {\n        var instantSearchInstance = _ref.instantSearchInstance,\n            helper = _ref.helper;\n\n        this.showMore = getShowMore(helper);\n\n        renderFn({\n          hits: hitsCache,\n          results: undefined,\n          showMore: this.showMore,\n          isLastPage: true,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var results = _ref2.results,\n            state = _ref2.state,\n            instantSearchInstance = _ref2.instantSearchInstance;\n\n        if (state.page === 0) {\n          hitsCache = [];\n          lastReceivedPage = -1;\n        }\n\n        results.hits = transformItems(results.hits);\n\n        if (widgetParams.escapeHits && results.hits && results.hits.length > 0) {\n          results.hits = escapeHits(results.hits);\n        }\n\n        if (lastReceivedPage < state.page) {\n          hitsCache = [].concat(_toConsumableArray(hitsCache), _toConsumableArray(results.hits));\n          lastReceivedPage = state.page;\n        }\n\n        var isLastPage = results.nbPages <= results.page + 1;\n\n        renderFn({\n          hits: hitsCache,\n          results: results,\n          showMore: this.showMore,\n          isLastPage: isLastPage,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose() {\n        unmountFn();\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}