{"ast":null,"code":"import _createClass from \"/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, Component, Input, EventEmitter, Output, Pipe, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Check and return true if an object is type of string\r\n * @param {?} obj Analyse has to object the string type\r\n * @return {?} result of analysis\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nfunction ToastaComponent_ngx_toast_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"ngx-toast\", 2);\n    ɵngcc0.ɵɵlistener(\"closeToast\", function ToastaComponent_ngx_toast_3_Template_ngx_toast_closeToast_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var toast_r1 = ctx.$implicit;\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.closeToast(toast_r1);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var toast_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"toast\", toast_r1);\n  }\n}\n\nvar _c0 = function _c0(a0) {\n  return [a0];\n};\n\nfunction ToastComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function ToastComponent_div_3_Template_div_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.close($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ToastComponent_div_5_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 9);\n    ɵngcc0.ɵɵpipe(1, \"safeHtml\");\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r5.toast.title), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ToastComponent_div_5_br_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"br\");\n  }\n}\n\nfunction ToastComponent_div_5_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 10);\n    ɵngcc0.ɵɵpipe(1, \"safeHtml\");\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"innerHtml\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r7.toast.msg), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ToastComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\n    ɵngcc0.ɵɵtext(1, \"\\n                \");\n    ɵngcc0.ɵɵtemplate(2, ToastComponent_div_5_span_2_Template, 2, 3, \"span\", 6);\n    ɵngcc0.ɵɵtext(3, \"\\n                \");\n    ɵngcc0.ɵɵtemplate(4, ToastComponent_div_5_br_4_Template, 1, 0, \"br\", 7);\n    ɵngcc0.ɵɵtext(5, \"\\n                \");\n    ɵngcc0.ɵɵtemplate(6, ToastComponent_div_5_span_6_Template, 2, 3, \"span\", 8);\n    ɵngcc0.ɵɵtext(7, \"\\n            \");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.toast.title);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.toast.title && ctx_r1.toast.msg);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.toast.msg);\n  }\n}\n\nfunction ToastComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 11);\n    ɵngcc0.ɵɵtext(1, \"\\n                \");\n    ɵngcc0.ɵɵelementStart(2, \"div\", 12);\n    ɵngcc0.ɵɵtext(3, \"\\n                \");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(4, \"\\n            \");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r2.progressPercent, \"%\");\n  }\n}\n\nvar _c1 = function _c1(a0, a1) {\n  return [a0, a1];\n};\n\nfunction isString(obj) {\n  return typeof obj === 'string';\n}\n/**\r\n * Check and return true if an object is type of number\r\n * @param {?} obj Analyse has to object the boolean type\r\n * @return {?} result of analysis\r\n */\n\n\nfunction isNumber(obj) {\n  return typeof obj === 'number';\n}\n/**\r\n * Check and return true if an object is type of Function\r\n * @param {?} obj Analyse has to object the function type\r\n * @return {?} result of analysis\r\n */\n\n\nfunction isFunction(obj) {\n  return typeof obj === 'function';\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Options to configure a new Toast\r\n */\n\n\nvar ToastOptions = function ToastOptions() {\n  _classCallCheck(this, ToastOptions);\n};\n\nToastOptions.ɵfac = function ToastOptions_Factory(t) {\n  return new (t || ToastOptions)();\n};\n\nToastOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ToastOptions,\n  factory: ToastOptions.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToastOptions, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\r\n * Structrure of a created Toast\r\n */\n\n\nvar ToastData = function ToastData() {\n  _classCallCheck(this, ToastData);\n};\n\nToastData.ɵfac = function ToastData_Factory(t) {\n  return new (t || ToastData)();\n};\n\nToastData.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ToastData,\n  factory: ToastData.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToastData, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\r\n * Default configuration for all toasts and toasta container\r\n */\n\n\nvar ToastaConfig = function ToastaConfig() {\n  _classCallCheck(this, ToastaConfig);\n\n  // Maximum number of toasties to show at once\n  this.limit = 5; // Whether to show the 'X' icon to close the toast\n\n  this.showClose = true; // Whether to show a progress bar at the bottom of the notification\n\n  this.showDuration = true; // The window position where the toast pops up\n\n  this.position = 'bottom-right'; // How long (in miliseconds) the toasta shows before it's removed. Set to null/0 to turn off.\n\n  this.timeout = 5000; // What theme to use\n\n  this.theme = 'default';\n};\n\nToastaConfig.ɵfac = function ToastaConfig_Factory(t) {\n  return new (t || ToastaConfig)();\n};\n\nToastaConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ToastaConfig,\n  factory: ToastaConfig.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToastaConfig, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/** @enum {number} */\n\n\nvar ToastaEventType = {\n  ADD: 0,\n  CLEAR: 1,\n  CLEAR_ALL: 2\n};\nToastaEventType[ToastaEventType.ADD] = 'ADD';\nToastaEventType[ToastaEventType.CLEAR] = 'CLEAR';\nToastaEventType[ToastaEventType.CLEAR_ALL] = 'CLEAR_ALL';\n\nvar ToastaEvent =\n/**\r\n * @param {?} type\r\n * @param {?=} value\r\n */\nfunction ToastaEvent(type, value) {\n  _classCallCheck(this, ToastaEvent);\n\n  this.type = type;\n  this.value = value;\n};\n/**\r\n * @param {?} config\r\n * @return {?}\r\n */\n\n\nfunction toastaServiceFactory(config) {\n  return new ToastaService(config);\n}\n/**\r\n * Toasta service helps create different kinds of Toasts\r\n */\n\n\nvar ToastaService = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} config\r\n   */\n  function ToastaService(config) {\n    _classCallCheck(this, ToastaService);\n\n    this.config = config; // Init the counter\n\n    this.uniqueCounter = 0; // ToastData event emitter\n    // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();\n    // Clear event emitter\n    // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();\n\n    this.eventSource = new Subject();\n    this.events = this.eventSource.asObservable();\n  }\n  /**\r\n     * Get list of toats\r\n     */\n  // getToasts(): Observable<ToastData> {\n  //   return this.toastsEmitter.asObservable();\n  // }\n  // getClear(): Observable<number> {\n  //   return this.clearEmitter.asObservable();\n  // }\n\n  /**\r\n   * Create Toast of a default type\r\n   * @param {?} options\r\n   * @return {?}\r\n   */\n\n\n  _createClass(ToastaService, [{\n    key: \"default\",\n    value: function _default(options) {\n      this.add(options, 'default');\n    }\n    /**\r\n     * Create Toast of info type\r\n     * @param {?} options Individual toasta config overrides\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"info\",\n    value: function info(options) {\n      this.add(options, 'info');\n    }\n    /**\r\n     * Create Toast of success type\r\n     * @param {?} options Individual toasta config overrides\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"success\",\n    value: function success(options) {\n      this.add(options, 'success');\n    }\n    /**\r\n     * Create Toast of wait type\r\n     * @param {?} options Individual toasta config overrides\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"wait\",\n    value: function wait(options) {\n      this.add(options, 'wait');\n    }\n    /**\r\n     * Create Toast of error type\r\n     * @param {?} options Individual toasta config overrides\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(options) {\n      this.add(options, 'error');\n    }\n    /**\r\n     * Create Toast of warning type\r\n     * @param {?} options Individual toasta config overrides\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"warning\",\n    value: function warning(options) {\n      this.add(options, 'warning');\n    } // Add a new toast item\n\n    /**\r\n     * @private\r\n     * @param {?} options\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(options, type) {\n      /** @type {?} */\n      var toastaOptions;\n\n      if (isString(options) && options !== '' || isNumber(options)) {\n        toastaOptions =\n        /** @type {?} */\n        {\n          title: options.toString()\n        };\n      } else {\n        toastaOptions =\n        /** @type {?} */\n        options;\n      }\n\n      if (!toastaOptions || !toastaOptions.title && !toastaOptions.msg) {\n        throw new Error('ngx-toasta: No toast title or message specified!');\n      }\n\n      type = type || 'default'; // Set a unique counter for an id\n\n      this.uniqueCounter++; // Set the local vs global config items\n\n      /** @type {?} */\n\n      var showClose = this._checkConfigItem(this.config, toastaOptions, 'showClose'); // Set the local vs global config items\n\n      /** @type {?} */\n\n\n      var showDuration = this._checkConfigItem(this.config, toastaOptions, 'showDuration'); // If we have a theme set, make sure it's a valid one\n\n      /** @type {?} */\n\n\n      var theme;\n\n      if (toastaOptions.theme) {\n        theme = ToastaService.THEMES.indexOf(toastaOptions.theme) > -1 ? toastaOptions.theme : this.config.theme;\n      } else {\n        theme = this.config.theme;\n      }\n      /** @type {?} */\n\n\n      var toast =\n      /** @type {?} */\n      {\n        id: this.uniqueCounter,\n        title: toastaOptions.title,\n        msg: toastaOptions.msg,\n        showClose: showClose,\n        showDuration: showDuration,\n        type: 'toasta-type-' + type,\n        theme: 'toasta-theme-' + theme,\n        onAdd: toastaOptions.onAdd && isFunction(toastaOptions.onAdd) ? toastaOptions.onAdd : null,\n        onRemove: toastaOptions.onRemove && isFunction(toastaOptions.onRemove) ? toastaOptions.onRemove : null\n      }; // If there's a timeout individually or globally, set the toast to timeout\n      // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.\n\n      toast.timeout = toastaOptions.hasOwnProperty('timeout') ? toastaOptions.timeout : this.config.timeout; // Push up a new toast item\n      // this.toastsSubscriber.next(toast);\n      // this.toastsEmitter.next(toast);\n\n      this.emitEvent(new ToastaEvent(ToastaEventType.ADD, toast)); // If we have a onAdd function, call it here\n\n      if (toastaOptions.onAdd && isFunction(toastaOptions.onAdd)) {\n        toastaOptions.onAdd.call(this, toast);\n      }\n    } // Clear all toasts\n\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"clearAll\",\n    value: function clearAll() {\n      // this.clearEmitter.next(null);\n      this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR_ALL));\n    } // Clear the specific one\n\n    /**\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear(id) {\n      // this.clearEmitter.next(id);\n      this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR, id));\n    } // Checks whether the local option is set, if not,\n    // checks the global config\n\n    /**\r\n     * @private\r\n     * @param {?} config\r\n     * @param {?} options\r\n     * @param {?} property\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"_checkConfigItem\",\n    value: function _checkConfigItem(config, options, property) {\n      if (options[property] === false) {\n        return false;\n      } else if (!options[property]) {\n        return config[property];\n      } else {\n        return true;\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(event) {\n      if (this.eventSource) {\n        // Push up a new event\n        this.eventSource.next(event);\n      }\n    }\n  }]);\n\n  return ToastaService;\n}();\n\nToastaService.ɵfac = function ToastaService_Factory(t) {\n  return new (t || ToastaService)(ɵngcc0.ɵɵinject(ToastaConfig));\n};\n\nToastaService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ToastaService,\n  factory: ToastaService.ɵfac\n}); // Allowed THEMES\n\nToastaService.THEMES = ['default', 'material', 'bootstrap'];\n/** @nocollapse */\n\nToastaService.ctorParameters = function () {\n  return [{\n    type: ToastaConfig\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToastaService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ToastaConfig\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Toasta is container for Toast components\r\n */\n\n\nvar ToastaComponent = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} config\r\n   * @param {?} toastaService\r\n   */\n  function ToastaComponent(config, toastaService) {\n    _classCallCheck(this, ToastaComponent);\n\n    this.config = config;\n    this.toastaService = toastaService;\n    this._position = ''; // The storage for toasts.\n\n    this.toasts = []; // Initialise position\n\n    this.position = '';\n  } // The window position where the toast pops up. Possible values:\n  // - bottom-right (default value from ToastConfig)\n  // - bottom-left\n  // - bottom-center\n  // - bottom-fullwidth\n  // - top-right\n  // - top-left\n  // - top-center\n  // - top-fullwidth\n  // - center-center\n\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n\n\n  _createClass(ToastaComponent, [{\n    key: \"position\",\n    get:\n    /**\r\n     * @return {?}\r\n     */\n    function get() {\n      return this._position;\n    }\n    /**\r\n     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\r\n     * first time, and before any of its children have been checked. It is invoked only once when the\r\n     * directive is instantiated.\r\n     * @return {?}\r\n     */\n    ,\n    set: function set(value) {\n      if (value) {\n        /** @type {?} */\n        var notFound = true;\n\n        for (var i = 0; i < ToastaComponent.POSITIONS.length; i++) {\n          if (ToastaComponent.POSITIONS[i] === value) {\n            notFound = false;\n            break;\n          }\n        }\n\n        if (notFound) {\n          // Position was wrong - clear it here to use the one from config.\n          value = this.config.position;\n        }\n      } else {\n        value = this.config.position;\n      }\n\n      this._position = 'toasta-position-' + value;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      // We listen events from our service\n      this.toastaService.events.subscribe(\n      /**\r\n      * @param {?} event\r\n      * @return {?}\r\n      */\n      function (event) {\n        if (event.type === ToastaEventType.ADD) {\n          // Add the new one\n\n          /** @type {?} */\n          var toast = event.value;\n\n          _this.add(toast);\n        } else if (event.type === ToastaEventType.CLEAR) {\n          // Clear the one by number\n\n          /** @type {?} */\n          var id = event.value;\n\n          _this.clear(id);\n        } else if (event.type === ToastaEventType.CLEAR_ALL) {\n          // Lets clear all toasts\n          _this.clearAll();\n        }\n      });\n    }\n    /**\r\n     * Event listener of 'closeToast' event comes from ToastaComponent.\r\n     * This method removes ToastComponent assosiated with this Toast.\r\n     * @param {?} toast\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"closeToast\",\n    value: function closeToast(toast) {\n      this.clear(toast.id);\n    }\n    /**\r\n     * Add new Toast\r\n     * @param {?} toast\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(toast) {\n      // If we've gone over our limit, remove the earliest\n      // one from the array\n      if (this.config.limit && this.toasts.length >= this.config.limit) {\n        this.toasts.shift();\n      } // Add toasta to array\n\n\n      this.toasts.push(toast); //\n      // If there's a timeout individually or globally,\n      // set the toast to timeout\n\n      if (+toast.timeout) {\n        this._setTimeout(toast);\n      }\n    }\n    /**\r\n     * Clear individual toast by id\r\n     * @param {?} id is unique identifier of Toast\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear(id) {\n      var _this2 = this;\n\n      if (id) {\n        this.toasts.forEach(\n        /**\r\n        * @param {?} value\r\n        * @param {?} key\r\n        * @return {?}\r\n        */\n        function (value, key) {\n          if (value.id === id) {\n            if (value.onRemove && isFunction(value.onRemove)) {\n              value.onRemove.call(_this2, value);\n            }\n\n            _this2.toasts.splice(key, 1);\n          }\n        });\n      } else {\n        throw new Error('Please provide id of Toast to close');\n      }\n    }\n    /**\r\n     * Clear all toasts\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"clearAll\",\n    value: function clearAll() {\n      var _this3 = this;\n\n      this.toasts.forEach(\n      /**\r\n      * @param {?} value\r\n      * @param {?} key\r\n      * @return {?}\r\n      */\n      function (value, key) {\n        if (value.onRemove && isFunction(value.onRemove)) {\n          value.onRemove.call(_this3, value);\n        }\n      });\n      this.toasts = [];\n    }\n    /**\r\n     * Custom setTimeout function for specific setTimeouts on individual toasts.\r\n     * @private\r\n     * @param {?} toast\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"_setTimeout\",\n    value: function _setTimeout(toast) {\n      var _this4 = this;\n\n      window.setTimeout(\n      /**\r\n      * @return {?}\r\n      */\n      function () {\n        _this4.clear(toast.id);\n      }, toast.timeout);\n    }\n  }]);\n\n  return ToastaComponent;\n}();\n\nToastaComponent.ɵfac = function ToastaComponent_Factory(t) {\n  return new (t || ToastaComponent)(ɵngcc0.ɵɵdirectiveInject(ToastaConfig), ɵngcc0.ɵɵdirectiveInject(ToastaService));\n};\n\nToastaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ToastaComponent,\n  selectors: [[\"ngx-toasta\"]],\n  inputs: {\n    position: \"position\"\n  },\n  decls: 5,\n  vars: 4,\n  consts: [[\"id\", \"toasta\", 3, \"ngClass\"], [3, \"toast\", \"closeToast\", 4, \"ngFor\", \"ngForOf\"], [3, \"toast\", \"closeToast\"]],\n  template: function ToastaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtext(0, \"\\n    \");\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n      ɵngcc0.ɵɵtext(2, \"\\n        \");\n      ɵngcc0.ɵɵtemplate(3, ToastaComponent_ngx_toast_3_Template, 1, 1, \"ngx-toast\", 1);\n      ɵngcc0.ɵɵtext(4, \"\\n    \");\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx.position));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.toasts);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgClass, ɵngcc1.NgForOf, ToastComponent];\n  },\n  encapsulation: 2\n});\n/**\r\n * Set of constants defines position of Toasta on the page.\r\n */\n\nToastaComponent.POSITIONS = ['bottom-right', 'bottom-left', 'bottom-center', 'bottom-fullwidth', 'top-right', 'top-left', 'top-center', 'top-fullwidth', 'center-center'];\n/** @nocollapse */\n\nToastaComponent.ctorParameters = function () {\n  return [{\n    type: ToastaConfig\n  }, {\n    type: ToastaService\n  }];\n};\n\nToastaComponent.propDecorators = {\n  position: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToastaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-toasta',\n      template: \"\\n    <div id=\\\"toasta\\\" [ngClass]=\\\"[position]\\\">\\n        <ngx-toast *ngFor=\\\"let toast of toasts\\\" [toast]=\\\"toast\\\" (closeToast)=\\\"closeToast(toast)\\\"></ngx-toast>\\n    </div>\"\n    }]\n  }], function () {\n    return [{\n      type: ToastaConfig\n    }, {\n      type: ToastaService\n    }];\n  }, {\n    position: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * A Toast component shows message with title and close button.\r\n */\n\n\nvar ToastComponent = /*#__PURE__*/function () {\n  function ToastComponent() {\n    _classCallCheck(this, ToastComponent);\n\n    this.progressPercent = 0;\n    this.startTime = performance.now();\n    this.closeToastEvent = new EventEmitter();\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(ToastComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this5 = this;\n\n      if (this.toast.showDuration && this.toast.timeout > 0) {\n        this.progressInterval = window.setInterval(\n        /**\r\n        * @return {?}\r\n        */\n        function () {\n          _this5.progressPercent = 100 - (performance.now() - _this5.startTime) / _this5.toast.timeout * 100; // Descending progress\n\n          if (_this5.progressPercent <= 0) {\n            clearInterval(_this5.progressInterval);\n          }\n        }, 16.7); // 60 fps\n      }\n    }\n    /**\r\n     * Event handler invokes when user clicks on close button.\r\n     * This method emit new event into ToastaContainer to close it.\r\n     * @param {?} $event\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close($event) {\n      $event.preventDefault();\n      this.closeToastEvent.next(this.toast);\n\n      if (this.progressInterval) {\n        clearInterval(this.progressInterval);\n      }\n    }\n  }]);\n\n  return ToastComponent;\n}();\n\nToastComponent.ɵfac = function ToastComponent_Factory(t) {\n  return new (t || ToastComponent)();\n};\n\nToastComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ToastComponent,\n  selectors: [[\"ngx-toast\"]],\n  inputs: {\n    toast: \"toast\"\n  },\n  outputs: {\n    closeToastEvent: \"closeToast\"\n  },\n  decls: 9,\n  vars: 7,\n  consts: [[1, \"toast\", 3, \"ngClass\"], [\"class\", \"close-button\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"toast-text\", 4, \"ngIf\"], [\"class\", \"durationbackground\", 4, \"ngIf\"], [1, \"close-button\", 3, \"click\"], [1, \"toast-text\"], [\"class\", \"toast-title\", 3, \"innerHTML\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"toast-msg\", 3, \"innerHtml\", 4, \"ngIf\"], [1, \"toast-title\", 3, \"innerHTML\"], [1, \"toast-msg\", 3, \"innerHtml\"], [1, \"durationbackground\"], [1, \"durationbar\"]],\n  template: function ToastComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtext(0, \"\\n        \");\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n      ɵngcc0.ɵɵtext(2, \"\\n            \");\n      ɵngcc0.ɵɵtemplate(3, ToastComponent_div_3_Template, 1, 0, \"div\", 1);\n      ɵngcc0.ɵɵtext(4, \"\\n            \");\n      ɵngcc0.ɵɵtemplate(5, ToastComponent_div_5_Template, 8, 3, \"div\", 2);\n      ɵngcc0.ɵɵtext(6, \"\\n            \");\n      ɵngcc0.ɵɵtemplate(7, ToastComponent_div_7_Template, 5, 2, \"div\", 3);\n      ɵngcc0.ɵɵtext(8, \"\\n        \");\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(4, _c1, ctx.toast.type, ctx.toast.theme));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.toast.showClose);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.toast.title || ctx.toast.msg);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.toast.showDuration && ctx.toast.timeout > 0);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgClass, ɵngcc1.NgIf];\n  },\n  pipes: function pipes() {\n    return [SafeHtmlPipe];\n  },\n  encapsulation: 2\n});\nToastComponent.propDecorators = {\n  toast: [{\n    type: Input\n  }],\n  closeToastEvent: [{\n    type: Output,\n    args: ['closeToast']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToastComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-toast',\n      template: \"\\n        <div class=\\\"toast\\\" [ngClass]=\\\"[toast.type, toast.theme]\\\">\\n            <div *ngIf=\\\"toast.showClose\\\" class=\\\"close-button\\\" (click)=\\\"close($event)\\\"></div>\\n            <div *ngIf=\\\"toast.title || toast.msg\\\" class=\\\"toast-text\\\">\\n                <span *ngIf=\\\"toast.title\\\" class=\\\"toast-title\\\" [innerHTML]=\\\"toast.title | safeHtml\\\"></span>\\n                <br *ngIf=\\\"toast.title && toast.msg\\\" />\\n                <span *ngIf=\\\"toast.msg\\\" class=\\\"toast-msg\\\" [innerHtml]=\\\"toast.msg | safeHtml\\\"></span>\\n            </div>\\n            <div class=\\\"durationbackground\\\" *ngIf=\\\"toast.showDuration && toast.timeout > 0\\\">\\n                <div class=\\\"durationbar\\\" [style.width.%]=\\\"progressPercent\\\">\\n                </div>\\n            </div>\\n        </div>\"\n    }]\n  }], function () {\n    return [];\n  }, {\n    closeToastEvent: [{\n      type: Output,\n      args: ['closeToast']\n    }],\n    toast: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nvar SafeHtmlPipe = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} domSanitized\r\n   */\n  function SafeHtmlPipe(domSanitized) {\n    _classCallCheck(this, SafeHtmlPipe);\n\n    this.domSanitized = domSanitized;\n  }\n  /**\r\n   * @param {?} value\r\n   * @param {...?} args\r\n   * @return {?}\r\n   */\n\n\n  _createClass(SafeHtmlPipe, [{\n    key: \"transform\",\n    value: function transform(value) {\n      return this.domSanitized.bypassSecurityTrustHtml(value);\n    }\n  }]);\n\n  return SafeHtmlPipe;\n}();\n\nSafeHtmlPipe.ɵfac = function SafeHtmlPipe_Factory(t) {\n  return new (t || SafeHtmlPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DomSanitizer));\n};\n\nSafeHtmlPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"safeHtml\",\n  type: SafeHtmlPipe,\n  pure: true\n});\n/** @nocollapse */\n\nSafeHtmlPipe.ctorParameters = function () {\n  return [{\n    type: DomSanitizer\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SafeHtmlPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'safeHtml'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc2.DomSanitizer\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nvar ɵ0 = toastaServiceFactory;\n/** @type {?} */\n\nvar providers = [ToastaConfig, {\n  provide: ToastaService,\n  useFactory: ɵ0,\n  deps: [ToastaConfig]\n}];\n\nvar ToastaModule = /*#__PURE__*/function () {\n  function ToastaModule() {\n    _classCallCheck(this, ToastaModule);\n  }\n\n  _createClass(ToastaModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\r\n     * @return {?}\r\n     */\n    function forRoot() {\n      return {\n        ngModule: ToastaModule,\n        providers: providers\n      };\n    }\n  }]);\n\n  return ToastaModule;\n}();\n\nToastaModule.ɵfac = function ToastaModule_Factory(t) {\n  return new (t || ToastaModule)();\n};\n\nToastaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ToastaModule\n});\nToastaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: providers,\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToastaModule, {\n    declarations: function declarations() {\n      return [ToastComponent, ToastaComponent, SafeHtmlPipe];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [ToastComponent, ToastaComponent];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToastaModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ToastComponent, ToastaComponent, SafeHtmlPipe],\n      exports: [ToastComponent, ToastaComponent],\n      providers: providers\n    }]\n  }], null, null);\n})();\n\nexport { SafeHtmlPipe, ToastComponent, ToastData, ToastOptions, ToastaComponent, ToastaConfig, ToastaEvent, ToastaEventType, ToastaModule, ToastaService, providers, toastaServiceFactory };","map":{"version":3,"sources":["ngx-toasta/lib/toasta.utils.ts","ngx-toasta/lib/toasta.service.ts","ngx-toasta/lib/toasta.component.ts","ngx-toasta/lib/toast.component.ts","ngx-toasta/lib/shared.ts","ngx-toasta/lib/toasta.module.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n/**\r\n * Check and return true if an object is type of string\r\n * @param obj Analyse has to object the string type\r\n * @return result of analysis\r\n */\r\nexport function isString(obj: any): boolean {\r\n  return typeof obj === 'string';\r\n}\r\n\r\n/**\r\n * Check and return true if an object is type of number\r\n * @param obj Analyse has to object the boolean type\r\n * @return result of analysis\r\n */\r\nexport function isNumber(obj: any): boolean {\r\n  return typeof obj === 'number';\r\n}\r\n\r\n/**\r\n * Check and return true if an object is type of Function\r\n * @param obj Analyse has to object the function type\r\n * @return result of analysis\r\n */\r\nexport function isFunction(obj: any): boolean {\r\n  return typeof obj === 'function';\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { isString, isNumber, isFunction } from './toasta.utils';\r\n\r\n\r\n\r\n/**\r\n * Options to configure a new Toast\r\n */\r\n@Injectable()\r\nexport class ToastOptions {\r\n  title: string;\r\n  msg?: string;\r\n  showClose?: boolean;\r\n  showDuration?: boolean;\r\n  theme?: string;\r\n  timeout?: number;\r\n  onAdd?: Function;\r\n  onRemove?: Function;\r\n}\r\n\r\n/**\r\n * Structrure of a created Toast\r\n */\r\n@Injectable()\r\nexport class ToastData {\r\n  id: number;\r\n  title: string;\r\n  msg: string;\r\n  showClose: boolean;\r\n  showDuration: boolean;\r\n  type: string;\r\n  theme: string;\r\n  timeout: number;\r\n  onAdd: Function;\r\n  onRemove: Function;\r\n  onClick: Function;\r\n}\r\n\r\n/**\r\n * Default configuration for all toasts and toasta container\r\n */\r\n@Injectable()\r\nexport class ToastaConfig {\r\n\r\n  // Maximum number of toasties to show at once\r\n  limit = 5;\r\n\r\n  // Whether to show the 'X' icon to close the toast\r\n  showClose = true;\r\n\r\n  // Whether to show a progress bar at the bottom of the notification\r\n  showDuration = true;\r\n\r\n  // The window position where the toast pops up\r\n  position: 'bottom-right' | 'bottom-left' | 'bottom-center' | 'bottom-fullwidth' | 'top-right' | 'top-left' | 'top-center' | 'top-fullwidth' | 'center-center' = 'bottom-right';\r\n\r\n  // How long (in miliseconds) the toasta shows before it's removed. Set to null/0 to turn off.\r\n  timeout = 5000;\r\n\r\n  // What theme to use\r\n  theme: 'default' | 'material' | 'bootstrap' = 'default';\r\n}\r\n\r\nexport enum ToastaEventType {\r\n  ADD,\r\n  CLEAR,\r\n  CLEAR_ALL\r\n}\r\n\r\nexport class ToastaEvent {\r\n  constructor(public type: ToastaEventType, public value?: any) { }\r\n}\r\n\r\nexport function toastaServiceFactory(config: ToastaConfig): ToastaService {\r\n  return new ToastaService(config);\r\n}\r\n\r\n/**\r\n * Toasta service helps create different kinds of Toasts\r\n */\r\n@Injectable()\r\nexport class ToastaService {\r\n  // Allowed THEMES\r\n  static THEMES: Array<string> = ['default', 'material', 'bootstrap'];\r\n  // Init the counter\r\n  uniqueCounter = 0;\r\n  // ToastData event emitter\r\n  // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();\r\n  // Clear event emitter\r\n  // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  private eventSource: Subject<ToastaEvent> = new Subject<ToastaEvent>();\r\n  public events: Observable<ToastaEvent> = this.eventSource.asObservable();\r\n\r\n  constructor(private config: ToastaConfig) { }\r\n\r\n  /**\r\n   * Get list of toats\r\n   */\r\n  // getToasts(): Observable<ToastData> {\r\n  //   return this.toastsEmitter.asObservable();\r\n  // }\r\n\r\n  // getClear(): Observable<number> {\r\n  //   return this.clearEmitter.asObservable();\r\n  // }\r\n\r\n  /**\r\n   * Create Toast of a default type\r\n   */\r\n  default(options: ToastOptions | string | number): void {\r\n    this.add(options, 'default');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of info type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  info(options: ToastOptions | string | number): void {\r\n    this.add(options, 'info');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of success type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  success(options: ToastOptions | string | number): void {\r\n    this.add(options, 'success');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of wait type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  wait(options: ToastOptions | string | number): void {\r\n    this.add(options, 'wait');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of error type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  error(options: ToastOptions | string | number): void {\r\n    this.add(options, 'error');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of warning type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  warning(options: ToastOptions | string | number): void {\r\n    this.add(options, 'warning');\r\n  }\r\n\r\n\r\n  // Add a new toast item\r\n  private add(options: ToastOptions | string | number, type: string) {\r\n    let toastaOptions: ToastOptions;\r\n\r\n    if (isString(options) && options !== '' || isNumber(options)) {\r\n      toastaOptions = {\r\n        title: options.toString()\r\n      } as ToastOptions;\r\n    } else {\r\n      toastaOptions = options as ToastOptions;\r\n    }\r\n\r\n    if (!toastaOptions || !toastaOptions.title && !toastaOptions.msg) {\r\n      throw new Error('ngx-toasta: No toast title or message specified!');\r\n    }\r\n\r\n    type = type || 'default';\r\n\r\n    // Set a unique counter for an id\r\n    this.uniqueCounter++;\r\n\r\n    // Set the local vs global config items\r\n    const showClose = this._checkConfigItem(this.config, toastaOptions, 'showClose');\r\n\r\n    // Set the local vs global config items\r\n    const showDuration = this._checkConfigItem(this.config, toastaOptions, 'showDuration');\r\n\r\n    // If we have a theme set, make sure it's a valid one\r\n    let theme: string;\r\n    if (toastaOptions.theme) {\r\n      theme = ToastaService.THEMES.indexOf(toastaOptions.theme) > -1 ? toastaOptions.theme : this.config.theme;\r\n    } else {\r\n      theme = this.config.theme;\r\n    }\r\n\r\n    const toast: ToastData = {\r\n      id: this.uniqueCounter,\r\n      title: toastaOptions.title,\r\n      msg: toastaOptions.msg,\r\n      showClose,\r\n      showDuration,\r\n      type: 'toasta-type-' + type,\r\n      theme: 'toasta-theme-' + theme,\r\n      onAdd: toastaOptions.onAdd && isFunction(toastaOptions.onAdd) ? toastaOptions.onAdd : null,\r\n      onRemove: toastaOptions.onRemove && isFunction(toastaOptions.onRemove) ? toastaOptions.onRemove : null\r\n    } as ToastData;\r\n\r\n    // If there's a timeout individually or globally, set the toast to timeout\r\n    // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.\r\n    toast.timeout = toastaOptions.hasOwnProperty('timeout') ? toastaOptions.timeout : this.config.timeout;\r\n\r\n    // Push up a new toast item\r\n    // this.toastsSubscriber.next(toast);\r\n    // this.toastsEmitter.next(toast);\r\n    this.emitEvent(new ToastaEvent(ToastaEventType.ADD, toast));\r\n    // If we have a onAdd function, call it here\r\n    if (toastaOptions.onAdd && isFunction(toastaOptions.onAdd)) {\r\n      toastaOptions.onAdd.call(this, toast);\r\n    }\r\n  }\r\n\r\n  // Clear all toasts\r\n  clearAll() {\r\n    // this.clearEmitter.next(null);\r\n    this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR_ALL));\r\n  }\r\n\r\n  // Clear the specific one\r\n  clear(id: number) {\r\n    // this.clearEmitter.next(id);\r\n    this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR, id));\r\n  }\r\n\r\n  // Checks whether the local option is set, if not,\r\n  // checks the global config\r\n  private _checkConfigItem(config: any, options: any, property: string) {\r\n    if (options[property] === false) {\r\n      return false;\r\n    } else if (!options[property]) {\r\n      return config[property];\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  private emitEvent(event: ToastaEvent) {\r\n    if (this.eventSource) {\r\n      // Push up a new event\r\n      this.eventSource.next(event);\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { isFunction } from './toasta.utils';\r\nimport { ToastaService, ToastData, ToastaConfig, ToastaEvent, ToastaEventType } from './toasta.service';\r\n\r\n/**\r\n * Toasta is container for Toast components\r\n */\r\n@Component({\r\n  selector: 'ngx-toasta',\r\n  template: `\r\n    <div id=\"toasta\" [ngClass]=\"[position]\">\r\n        <ngx-toast *ngFor=\"let toast of toasts\" [toast]=\"toast\" (closeToast)=\"closeToast(toast)\"></ngx-toast>\r\n    </div>`\r\n})\r\nexport class ToastaComponent implements OnInit {\r\n  /**\r\n   * Set of constants defines position of Toasta on the page.\r\n   */\r\n  static POSITIONS: Array<String> = ['bottom-right', 'bottom-left', 'bottom-center', 'bottom-fullwidth', 'top-right', 'top-left', 'top-center', 'top-fullwidth', 'center-center'];\r\n\r\n  private _position = '';\r\n  // The window position where the toast pops up. Possible values:\r\n  // - bottom-right (default value from ToastConfig)\r\n  // - bottom-left\r\n  // - bottom-center\r\n  // - bottom-fullwidth\r\n  // - top-right\r\n  // - top-left\r\n  // - top-center\r\n  // - top-fullwidth\r\n  // - center-center\r\n  @Input()\r\n  set position(value: string) {\r\n    if (value) {\r\n      let notFound = true;\r\n      for (let i = 0; i < ToastaComponent.POSITIONS.length; i++) {\r\n        if (ToastaComponent.POSITIONS[i] === value) {\r\n          notFound = false;\r\n          break;\r\n        }\r\n      }\r\n      if (notFound) {\r\n        // Position was wrong - clear it here to use the one from config.\r\n        value = this.config.position;\r\n      }\r\n    } else {\r\n      value = this.config.position;\r\n    }\r\n    this._position = 'toasta-position-' + value;\r\n  }\r\n\r\n  get position(): string {\r\n    return this._position;\r\n  }\r\n\r\n  // The storage for toasts.\r\n  toasts: Array<ToastData> = [];\r\n\r\n  constructor(private config: ToastaConfig, private toastaService: ToastaService) {\r\n    // Initialise position\r\n    this.position = '';\r\n  }\r\n\r\n  /**\r\n   * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\r\n   * first time, and before any of its children have been checked. It is invoked only once when the\r\n   * directive is instantiated.\r\n   */\r\n  ngOnInit(): any {\r\n    // We listen events from our service\r\n    this.toastaService.events.subscribe((event: ToastaEvent) => {\r\n      if (event.type === ToastaEventType.ADD) {\r\n        // Add the new one\r\n        const toast: ToastData = event.value;\r\n        this.add(toast);\r\n      } else if (event.type === ToastaEventType.CLEAR) {\r\n        // Clear the one by number\r\n        const id: number = event.value;\r\n        this.clear(id);\r\n      } else if (event.type === ToastaEventType.CLEAR_ALL) {\r\n        // Lets clear all toasts\r\n        this.clearAll();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Event listener of 'closeToast' event comes from ToastaComponent.\r\n   * This method removes ToastComponent assosiated with this Toast.\r\n   */\r\n  closeToast(toast: ToastData) {\r\n    this.clear(toast.id);\r\n  }\r\n\r\n  /**\r\n   * Add new Toast\r\n   */\r\n  add(toast: ToastData) {\r\n    // If we've gone over our limit, remove the earliest\r\n    // one from the array\r\n    if (this.config.limit && this.toasts.length >= this.config.limit) {\r\n      this.toasts.shift();\r\n    }\r\n    // Add toasta to array\r\n    this.toasts.push(toast);\r\n    //\r\n    // If there's a timeout individually or globally,\r\n    // set the toast to timeout\r\n    if (+toast.timeout) {\r\n      this._setTimeout(toast);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear individual toast by id\r\n   * @param id is unique identifier of Toast\r\n   */\r\n  clear(id: number) {\r\n    if (id) {\r\n      this.toasts.forEach((value: any, key: number) => {\r\n        if (value.id === id) {\r\n          if (value.onRemove && isFunction(value.onRemove)) {\r\n            value.onRemove.call(this, value);\r\n          }\r\n          this.toasts.splice(key, 1);\r\n        }\r\n      });\r\n    } else {\r\n      throw new Error('Please provide id of Toast to close');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all toasts\r\n   */\r\n  clearAll() {\r\n    this.toasts.forEach((value: any, key: number) => {\r\n      if (value.onRemove && isFunction(value.onRemove)) {\r\n        value.onRemove.call(this, value);\r\n      }\r\n    });\r\n    this.toasts = [];\r\n  }\r\n\r\n  /**\r\n   * Custom setTimeout function for specific setTimeouts on individual toasts.\r\n   */\r\n  private _setTimeout(toast: ToastData) {\r\n    window.setTimeout(() => {\r\n      this.clear(toast.id);\r\n    }, toast.timeout);\r\n  }\r\n}\r\n","import { AfterViewInit, Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { ToastData } from './toasta.service';\r\n\r\n/**\r\n * A Toast component shows message with title and close button.\r\n */\r\n@Component({\r\n  selector: 'ngx-toast',\r\n  template: `\r\n        <div class=\"toast\" [ngClass]=\"[toast.type, toast.theme]\">\r\n            <div *ngIf=\"toast.showClose\" class=\"close-button\" (click)=\"close($event)\"></div>\r\n            <div *ngIf=\"toast.title || toast.msg\" class=\"toast-text\">\r\n                <span *ngIf=\"toast.title\" class=\"toast-title\" [innerHTML]=\"toast.title | safeHtml\"></span>\r\n                <br *ngIf=\"toast.title && toast.msg\" />\r\n                <span *ngIf=\"toast.msg\" class=\"toast-msg\" [innerHtml]=\"toast.msg | safeHtml\"></span>\r\n            </div>\r\n            <div class=\"durationbackground\" *ngIf=\"toast.showDuration && toast.timeout > 0\">\r\n                <div class=\"durationbar\" [style.width.%]=\"progressPercent\">\r\n                </div>\r\n            </div>\r\n        </div>`\r\n})\r\nexport class ToastComponent implements AfterViewInit {\r\n\r\n  progressInterval: number;\r\n  progressPercent = 0;\r\n  startTime: number = performance.now();\r\n  @Input() toast: ToastData;\r\n  @Output('closeToast') closeToastEvent = new EventEmitter();\r\n\r\n  ngAfterViewInit() {\r\n    if (this.toast.showDuration && this.toast.timeout > 0) {\r\n      this.progressInterval = window.setInterval(() => {\r\n        this.progressPercent = (100 - ((performance.now() - this.startTime) / this.toast.timeout * 100)); // Descending progress\r\n\r\n        if (this.progressPercent <= 0) {\r\n          clearInterval(this.progressInterval);\r\n        }\r\n      }, 16.7); // 60 fps\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event handler invokes when user clicks on close button.\r\n   * This method emit new event into ToastaContainer to close it.\r\n   */\r\n  close($event: any) {\r\n    $event.preventDefault();\r\n    this.closeToastEvent.next(this.toast);\r\n\r\n    if (this.progressInterval) {\r\n      clearInterval(this.progressInterval);\r\n    }\r\n  }\r\n}\r\n","import { DomSanitizer } from '@angular/platform-browser';\r\nimport { PipeTransform, Pipe } from '@angular/core';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n  constructor(private domSanitized: DomSanitizer) { }\r\n\r\n  transform(value: any, ...args: any[]): any {\r\n    return this.domSanitized.bypassSecurityTrustHtml(value);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\nimport { ToastaComponent } from './toasta.component';\r\nimport { ToastComponent } from './toast.component';\r\nimport { SafeHtmlPipe } from './shared';\r\nimport { ToastaService, ToastaConfig, toastaServiceFactory } from './toasta.service';\r\n\r\nexport let providers = [\r\n  ToastaConfig,\r\n  { provide: ToastaService, useFactory: toastaServiceFactory, deps: [ToastaConfig] }\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ToastComponent, ToastaComponent, SafeHtmlPipe],\r\n  exports: [ToastComponent, ToastaComponent],\r\n  providers\r\n})\r\nexport class ToastaModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ToastaModule,\r\n      providers\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}