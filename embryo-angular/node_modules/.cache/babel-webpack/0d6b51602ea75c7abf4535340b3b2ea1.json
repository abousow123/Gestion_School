{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport { checkRendering } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customMenu = connectMenu(function render(params, isFirstRendering) {\\n  // params = {\\n  //   items,\\n  //   createURL,\\n  //   refine,\\n  //   instantSearchInstance,\\n  //   canRefine,\\n  //   widgetParams,\\n  //   isShowingMore,\\n  //   toggleShowMore\\n  // }\\n});\\nsearch.addWidget(\\n  customMenu({\\n    attributeName,\\n    [ limit ],\\n    [ showMoreLimit ]\\n    [ sortBy = [\\'name:asc\\'] ]\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectMenu.html\\n';\n/**\n * @typedef {Object} MenuItem\n * @property {string} value The value of the menu item.\n * @property {string} label Human-readable value of the menu item.\n * @property {number} count Number of results matched after refinement is applied.\n * @property {isRefined} boolean Indicates if the refinement is applied.\n */\n\n/**\n * @typedef {Object} CustomMenuWidgetOptions\n * @property {string} attributeName Name of the attribute for faceting (eg. \"free_shipping\").\n * @property {number} [limit = 10] How many facets values to retrieve.\n * @property {number} [showMoreLimit = undefined] How many facets values to retrieve when `toggleShowMore` is called, this value is meant to be greater than `limit` option.\n * @property {string[]|function} [sortBy = ['name:asc']] How to sort refinements. Possible values: `count|isRefined|name:asc|name:desc`.\n *\n * You can also use a sort function that behaves like the standard Javascript [compareFunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Syntax).\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * @typedef {Object} MenuRenderingOptions\n * @property {MenuItem[]} items The elements that can be refined for the current search results.\n * @property {function(item.value): string} createURL Creates the URL for a single item name in the list.\n * @property {function(item.value)} refine Filter the search to item value.\n * @property {boolean} canRefine True if refinement can be applied.\n * @property {Object} widgetParams All original `CustomMenuWidgetOptions` forwarded to the `renderFn`.\n * @property {boolean} isShowingMore True if the menu is displaying all the menu items.\n * @property {function} toggleShowMore Toggles the number of values displayed between `limit` and `showMore.limit`.\n * @property {boolean} canToggleShowMore `true` if the toggleShowMore button can be activated (enough items to display more or\n * already displaying more than `limit` items)\n */\n\n/**\n * **Menu** connector provides the logic to build a widget that will give the user the ability to choose a single value for a specific facet. The typical usage of menu is for navigation in categories.\n *\n * This connector provides a `toggleShowMore()` function to display more or less items and a `refine()`\n * function to select an item. While selecting a new element, the `refine` will also unselect the\n * one that is currently selected.\n *\n * **Requirement:** the attribute passed as `attributeName` must be present in \"attributes for faceting\" on the Algolia dashboard or configured as attributesForFaceting via a set settings call to the Algolia API.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/menu/js/\n * @param {function(MenuRenderingOptions, boolean)} renderFn Rendering function for the custom **Menu** widget. widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomMenuWidgetOptions)} Re-usable widget factory for a custom **Menu** widget.\n * @example\n * // custom `renderFn` to render the custom Menu widget\n * function renderFn(MenuRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     MenuRenderingOptions.widgetParams.containerNode\n *       .html('<select></select');\n *\n *     MenuRenderingOptions.widgetParams.containerNode\n *       .find('select')\n *       .on('change', function(event) {\n *         MenuRenderingOptions.refine(event.target.value);\n *       });\n *   }\n *\n *   var options = MenuRenderingOptions.items.map(function(item) {\n *     return item.isRefined\n *       ? '<option value=\"' + item.value + '\" selected>' + item.label + '</option>'\n *       : '<option value=\"' + item.value + '\">' + item.label + '</option>';\n *   });\n *\n *   MenuRenderingOptions.widgetParams.containerNode\n *     .find('select')\n *     .html(options);\n * }\n *\n * // connect `renderFn` to Menu logic\n * var customMenu = instantsearch.connectors.connectMenu(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customMenu({\n *     containerNode: $('#custom-menu-container'),\n *     attributeName: 'categories',\n *     limit: 10,\n *   })\n * );\n */\n\nexport default function connectMenu(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var attributeName = widgetParams.attributeName,\n        _widgetParams$limit = widgetParams.limit,\n        limit = _widgetParams$limit === undefined ? 10 : _widgetParams$limit,\n        _widgetParams$sortBy = widgetParams.sortBy,\n        sortBy = _widgetParams$sortBy === undefined ? ['name:asc'] : _widgetParams$sortBy,\n        showMoreLimit = widgetParams.showMoreLimit,\n        _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n\n    if (!attributeName || !isNaN(showMoreLimit) && showMoreLimit < limit) {\n      throw new Error(usage);\n    }\n\n    return {\n      isShowingMore: false,\n      // Provide the same function to the `renderFn` so that way the user\n      // has to only bind it once when `isFirstRendering` for instance\n      toggleShowMore: function toggleShowMore() {},\n      cachedToggleShowMore: function cachedToggleShowMore() {\n        this.toggleShowMore();\n      },\n      createToggleShowMore: function createToggleShowMore(_ref) {\n        var _this = this;\n\n        var results = _ref.results,\n            instantSearchInstance = _ref.instantSearchInstance;\n        return function () {\n          _this.isShowingMore = !_this.isShowingMore;\n\n          _this.render({\n            results: results,\n            instantSearchInstance: instantSearchInstance\n          });\n        };\n      },\n      getLimit: function getLimit() {\n        return this.isShowingMore ? showMoreLimit : limit;\n      },\n      refine: function refine(helper) {\n        return function (facetValue) {\n          var _helper$getHierarchic = helper.getHierarchicalFacetBreadcrumb(attributeName),\n              _helper$getHierarchic2 = _slicedToArray(_helper$getHierarchic, 1),\n              refinedItem = _helper$getHierarchic2[0];\n\n          helper.toggleRefinement(attributeName, facetValue ? facetValue : refinedItem).search();\n        };\n      },\n      getConfiguration: function getConfiguration(configuration) {\n        var widgetConfiguration = {\n          hierarchicalFacets: [{\n            name: attributeName,\n            attributes: [attributeName]\n          }]\n        };\n        var currentMaxValuesPerFacet = configuration.maxValuesPerFacet || 0;\n        widgetConfiguration.maxValuesPerFacet = Math.max(currentMaxValuesPerFacet, showMoreLimit || limit);\n        return widgetConfiguration;\n      },\n      init: function init(_ref2) {\n        var helper = _ref2.helper,\n            createURL = _ref2.createURL,\n            instantSearchInstance = _ref2.instantSearchInstance;\n        this.cachedToggleShowMore = this.cachedToggleShowMore.bind(this);\n\n        this._createURL = function (facetValue) {\n          return createURL(helper.state.toggleRefinement(attributeName, facetValue));\n        };\n\n        this._refine = this.refine(helper);\n        renderFn({\n          items: [],\n          createURL: this._createURL,\n          refine: this._refine,\n          instantSearchInstance: instantSearchInstance,\n          canRefine: false,\n          widgetParams: widgetParams,\n          isShowingMore: this.isShowingMore,\n          toggleShowMore: this.cachedToggleShowMore,\n          canToggleShowMore: false\n        }, true);\n      },\n      render: function render(_ref3) {\n        var results = _ref3.results,\n            instantSearchInstance = _ref3.instantSearchInstance;\n        var facetItems = results.getFacetValues(attributeName, {\n          sortBy: sortBy\n        }).data || [];\n        var items = transformItems(facetItems.slice(0, this.getLimit()).map(function (_ref4) {\n          var label = _ref4.name,\n              value = _ref4.path,\n              item = _objectWithoutProperties(_ref4, ['name', 'path']);\n\n          return _extends({}, item, {\n            label: label,\n            value: value\n          });\n        }));\n        this.toggleShowMore = this.createToggleShowMore({\n          results: results,\n          instantSearchInstance: instantSearchInstance\n        });\n        renderFn({\n          items: items,\n          createURL: this._createURL,\n          refine: this._refine,\n          instantSearchInstance: instantSearchInstance,\n          canRefine: items.length > 0,\n          widgetParams: widgetParams,\n          isShowingMore: this.isShowingMore,\n          toggleShowMore: this.cachedToggleShowMore,\n          canToggleShowMore: this.isShowingMore || facetItems.length > this.getLimit()\n        }, false);\n      },\n      dispose: function dispose(_ref5) {\n        var state = _ref5.state;\n        unmountFn();\n        var nextState = state;\n\n        if (state.isHierarchicalFacetRefined(attributeName)) {\n          nextState = state.removeHierarchicalFacetRefinement(attributeName);\n        }\n\n        nextState = nextState.removeHierarchicalFacet(attributeName);\n\n        if (nextState.maxValuesPerFacet === limit || showMoreLimit && nextState.maxValuesPerFacet === showMoreLimit) {\n          nextState.setQueryParameters('maxValuesPerFacet', undefined);\n        }\n\n        return nextState;\n      },\n      getWidgetState: function getWidgetState(uiState, _ref6) {\n        var searchParameters = _ref6.searchParameters;\n\n        var _searchParameters$get = searchParameters.getHierarchicalFacetBreadcrumb(attributeName),\n            _searchParameters$get2 = _slicedToArray(_searchParameters$get, 1),\n            refinedItem = _searchParameters$get2[0];\n\n        if (!refinedItem || uiState.menu && uiState.menu[attributeName] === refinedItem) {\n          return uiState;\n        }\n\n        return _extends({}, uiState, {\n          menu: _extends({}, uiState.menu, _defineProperty({}, attributeName, refinedItem))\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref7) {\n        var uiState = _ref7.uiState;\n\n        if (uiState.menu && uiState.menu[attributeName]) {\n          var uiStateRefinedItem = uiState.menu[attributeName];\n          var isAlreadyRefined = searchParameters.isHierarchicalFacetRefined(attributeName, uiStateRefinedItem);\n          if (isAlreadyRefined) return searchParameters;\n          return searchParameters.toggleRefinement(attributeName, uiStateRefinedItem);\n        }\n\n        if (searchParameters.isHierarchicalFacetRefined(attributeName)) {\n          var _searchParameters$get3 = searchParameters.getHierarchicalFacetBreadcrumb(attributeName),\n              _searchParameters$get4 = _slicedToArray(_searchParameters$get3, 1),\n              refinedItem = _searchParameters$get4[0];\n\n          return searchParameters.toggleRefinement(attributeName, refinedItem);\n        }\n\n        return searchParameters;\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/menu/connectMenu.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","err","Array","isArray","TypeError","_defineProperty","obj","defineProperty","enumerable","configurable","writable","_objectWithoutProperties","keys","indexOf","checkRendering","usage","connectMenu","renderFn","unmountFn","widgetParams","attributeName","_widgetParams$limit","limit","_widgetParams$sortBy","sortBy","showMoreLimit","_widgetParams$transfo","transformItems","items","isNaN","Error","isShowingMore","toggleShowMore","cachedToggleShowMore","createToggleShowMore","_ref","_this","results","instantSearchInstance","render","getLimit","refine","helper","facetValue","_helper$getHierarchic","getHierarchicalFacetBreadcrumb","_helper$getHierarchic2","refinedItem","toggleRefinement","search","getConfiguration","configuration","widgetConfiguration","hierarchicalFacets","name","attributes","currentMaxValuesPerFacet","maxValuesPerFacet","Math","max","init","_ref2","createURL","bind","_createURL","state","_refine","canRefine","canToggleShowMore","_ref3","facetItems","getFacetValues","data","slice","map","_ref4","label","path","item","dispose","_ref5","nextState","isHierarchicalFacetRefined","removeHierarchicalFacetRefinement","removeHierarchicalFacet","setQueryParameters","getWidgetState","uiState","_ref6","searchParameters","_searchParameters$get","_searchParameters$get2","menu","getWidgetSearchParameters","_ref7","uiStateRefinedItem","isAlreadyRefined","_searchParameters$get3","_searchParameters$get4"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nimport { checkRendering } from '../../lib/utils.js';\n\nvar usage = 'Usage:\\nvar customMenu = connectMenu(function render(params, isFirstRendering) {\\n  // params = {\\n  //   items,\\n  //   createURL,\\n  //   refine,\\n  //   instantSearchInstance,\\n  //   canRefine,\\n  //   widgetParams,\\n  //   isShowingMore,\\n  //   toggleShowMore\\n  // }\\n});\\nsearch.addWidget(\\n  customMenu({\\n    attributeName,\\n    [ limit ],\\n    [ showMoreLimit ]\\n    [ sortBy = [\\'name:asc\\'] ]\\n    [ transformItems ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectMenu.html\\n';\n\n/**\n * @typedef {Object} MenuItem\n * @property {string} value The value of the menu item.\n * @property {string} label Human-readable value of the menu item.\n * @property {number} count Number of results matched after refinement is applied.\n * @property {isRefined} boolean Indicates if the refinement is applied.\n */\n\n/**\n * @typedef {Object} CustomMenuWidgetOptions\n * @property {string} attributeName Name of the attribute for faceting (eg. \"free_shipping\").\n * @property {number} [limit = 10] How many facets values to retrieve.\n * @property {number} [showMoreLimit = undefined] How many facets values to retrieve when `toggleShowMore` is called, this value is meant to be greater than `limit` option.\n * @property {string[]|function} [sortBy = ['name:asc']] How to sort refinements. Possible values: `count|isRefined|name:asc|name:desc`.\n *\n * You can also use a sort function that behaves like the standard Javascript [compareFunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Syntax).\n * @property {function(object[]):object[]} [transformItems] Function to transform the items passed to the templates.\n */\n\n/**\n * @typedef {Object} MenuRenderingOptions\n * @property {MenuItem[]} items The elements that can be refined for the current search results.\n * @property {function(item.value): string} createURL Creates the URL for a single item name in the list.\n * @property {function(item.value)} refine Filter the search to item value.\n * @property {boolean} canRefine True if refinement can be applied.\n * @property {Object} widgetParams All original `CustomMenuWidgetOptions` forwarded to the `renderFn`.\n * @property {boolean} isShowingMore True if the menu is displaying all the menu items.\n * @property {function} toggleShowMore Toggles the number of values displayed between `limit` and `showMore.limit`.\n * @property {boolean} canToggleShowMore `true` if the toggleShowMore button can be activated (enough items to display more or\n * already displaying more than `limit` items)\n */\n\n/**\n * **Menu** connector provides the logic to build a widget that will give the user the ability to choose a single value for a specific facet. The typical usage of menu is for navigation in categories.\n *\n * This connector provides a `toggleShowMore()` function to display more or less items and a `refine()`\n * function to select an item. While selecting a new element, the `refine` will also unselect the\n * one that is currently selected.\n *\n * **Requirement:** the attribute passed as `attributeName` must be present in \"attributes for faceting\" on the Algolia dashboard or configured as attributesForFaceting via a set settings call to the Algolia API.\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/menu/js/\n * @param {function(MenuRenderingOptions, boolean)} renderFn Rendering function for the custom **Menu** widget. widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomMenuWidgetOptions)} Re-usable widget factory for a custom **Menu** widget.\n * @example\n * // custom `renderFn` to render the custom Menu widget\n * function renderFn(MenuRenderingOptions, isFirstRendering) {\n *   if (isFirstRendering) {\n *     MenuRenderingOptions.widgetParams.containerNode\n *       .html('<select></select');\n *\n *     MenuRenderingOptions.widgetParams.containerNode\n *       .find('select')\n *       .on('change', function(event) {\n *         MenuRenderingOptions.refine(event.target.value);\n *       });\n *   }\n *\n *   var options = MenuRenderingOptions.items.map(function(item) {\n *     return item.isRefined\n *       ? '<option value=\"' + item.value + '\" selected>' + item.label + '</option>'\n *       : '<option value=\"' + item.value + '\">' + item.label + '</option>';\n *   });\n *\n *   MenuRenderingOptions.widgetParams.containerNode\n *     .find('select')\n *     .html(options);\n * }\n *\n * // connect `renderFn` to Menu logic\n * var customMenu = instantsearch.connectors.connectMenu(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customMenu({\n *     containerNode: $('#custom-menu-container'),\n *     attributeName: 'categories',\n *     limit: 10,\n *   })\n * );\n */\nexport default function connectMenu(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var attributeName = widgetParams.attributeName,\n        _widgetParams$limit = widgetParams.limit,\n        limit = _widgetParams$limit === undefined ? 10 : _widgetParams$limit,\n        _widgetParams$sortBy = widgetParams.sortBy,\n        sortBy = _widgetParams$sortBy === undefined ? ['name:asc'] : _widgetParams$sortBy,\n        showMoreLimit = widgetParams.showMoreLimit,\n        _widgetParams$transfo = widgetParams.transformItems,\n        transformItems = _widgetParams$transfo === undefined ? function (items) {\n      return items;\n    } : _widgetParams$transfo;\n\n\n    if (!attributeName || !isNaN(showMoreLimit) && showMoreLimit < limit) {\n      throw new Error(usage);\n    }\n\n    return {\n      isShowingMore: false,\n\n      // Provide the same function to the `renderFn` so that way the user\n      // has to only bind it once when `isFirstRendering` for instance\n      toggleShowMore: function toggleShowMore() {},\n      cachedToggleShowMore: function cachedToggleShowMore() {\n        this.toggleShowMore();\n      },\n      createToggleShowMore: function createToggleShowMore(_ref) {\n        var _this = this;\n\n        var results = _ref.results,\n            instantSearchInstance = _ref.instantSearchInstance;\n\n        return function () {\n          _this.isShowingMore = !_this.isShowingMore;\n          _this.render({ results: results, instantSearchInstance: instantSearchInstance });\n        };\n      },\n      getLimit: function getLimit() {\n        return this.isShowingMore ? showMoreLimit : limit;\n      },\n      refine: function refine(helper) {\n        return function (facetValue) {\n          var _helper$getHierarchic = helper.getHierarchicalFacetBreadcrumb(attributeName),\n              _helper$getHierarchic2 = _slicedToArray(_helper$getHierarchic, 1),\n              refinedItem = _helper$getHierarchic2[0];\n\n          helper.toggleRefinement(attributeName, facetValue ? facetValue : refinedItem).search();\n        };\n      },\n      getConfiguration: function getConfiguration(configuration) {\n        var widgetConfiguration = {\n          hierarchicalFacets: [{\n            name: attributeName,\n            attributes: [attributeName]\n          }]\n        };\n\n        var currentMaxValuesPerFacet = configuration.maxValuesPerFacet || 0;\n        widgetConfiguration.maxValuesPerFacet = Math.max(currentMaxValuesPerFacet, showMoreLimit || limit);\n\n        return widgetConfiguration;\n      },\n      init: function init(_ref2) {\n        var helper = _ref2.helper,\n            createURL = _ref2.createURL,\n            instantSearchInstance = _ref2.instantSearchInstance;\n\n        this.cachedToggleShowMore = this.cachedToggleShowMore.bind(this);\n\n        this._createURL = function (facetValue) {\n          return createURL(helper.state.toggleRefinement(attributeName, facetValue));\n        };\n\n        this._refine = this.refine(helper);\n\n        renderFn({\n          items: [],\n          createURL: this._createURL,\n          refine: this._refine,\n          instantSearchInstance: instantSearchInstance,\n          canRefine: false,\n          widgetParams: widgetParams,\n          isShowingMore: this.isShowingMore,\n          toggleShowMore: this.cachedToggleShowMore,\n          canToggleShowMore: false\n        }, true);\n      },\n      render: function render(_ref3) {\n        var results = _ref3.results,\n            instantSearchInstance = _ref3.instantSearchInstance;\n\n        var facetItems = results.getFacetValues(attributeName, { sortBy: sortBy }).data || [];\n        var items = transformItems(facetItems.slice(0, this.getLimit()).map(function (_ref4) {\n          var label = _ref4.name,\n              value = _ref4.path,\n              item = _objectWithoutProperties(_ref4, ['name', 'path']);\n\n          return _extends({}, item, {\n            label: label,\n            value: value\n          });\n        }));\n\n        this.toggleShowMore = this.createToggleShowMore({\n          results: results,\n          instantSearchInstance: instantSearchInstance\n        });\n\n        renderFn({\n          items: items,\n          createURL: this._createURL,\n          refine: this._refine,\n          instantSearchInstance: instantSearchInstance,\n          canRefine: items.length > 0,\n          widgetParams: widgetParams,\n          isShowingMore: this.isShowingMore,\n          toggleShowMore: this.cachedToggleShowMore,\n          canToggleShowMore: this.isShowingMore || facetItems.length > this.getLimit()\n        }, false);\n      },\n      dispose: function dispose(_ref5) {\n        var state = _ref5.state;\n\n        unmountFn();\n\n        var nextState = state;\n\n        if (state.isHierarchicalFacetRefined(attributeName)) {\n          nextState = state.removeHierarchicalFacetRefinement(attributeName);\n        }\n\n        nextState = nextState.removeHierarchicalFacet(attributeName);\n\n        if (nextState.maxValuesPerFacet === limit || showMoreLimit && nextState.maxValuesPerFacet === showMoreLimit) {\n          nextState.setQueryParameters('maxValuesPerFacet', undefined);\n        }\n\n        return nextState;\n      },\n      getWidgetState: function getWidgetState(uiState, _ref6) {\n        var searchParameters = _ref6.searchParameters;\n\n        var _searchParameters$get = searchParameters.getHierarchicalFacetBreadcrumb(attributeName),\n            _searchParameters$get2 = _slicedToArray(_searchParameters$get, 1),\n            refinedItem = _searchParameters$get2[0];\n\n        if (!refinedItem || uiState.menu && uiState.menu[attributeName] === refinedItem) {\n          return uiState;\n        }\n\n        return _extends({}, uiState, {\n          menu: _extends({}, uiState.menu, _defineProperty({}, attributeName, refinedItem))\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref7) {\n        var uiState = _ref7.uiState;\n\n        if (uiState.menu && uiState.menu[attributeName]) {\n          var uiStateRefinedItem = uiState.menu[attributeName];\n          var isAlreadyRefined = searchParameters.isHierarchicalFacetRefined(attributeName, uiStateRefinedItem);\n          if (isAlreadyRefined) return searchParameters;\n          return searchParameters.toggleRefinement(attributeName, uiStateRefinedItem);\n        }\n        if (searchParameters.isHierarchicalFacetRefined(attributeName)) {\n          var _searchParameters$get3 = searchParameters.getHierarchicalFacetBreadcrumb(attributeName),\n              _searchParameters$get4 = _slicedToArray(_searchParameters$get3, 1),\n              refinedItem = _searchParameters$get4[0];\n\n          return searchParameters.toggleRefinement(attributeName, refinedItem);\n        }\n        return searchParameters;\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}