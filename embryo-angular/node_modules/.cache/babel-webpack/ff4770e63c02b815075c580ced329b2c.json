{"ast":null,"code":"import { checkRendering, clearRefinements, getAttributesToClear } from '../../lib/utils.js';\nvar usage = 'Usage:\\nvar customClearAll = connectClearAll(function render(params, isFirstRendering) {\\n  // params = {\\n  //   refine,\\n  //   hasRefinements,\\n  //   createURL,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customClearAll({\\n    [ excludeAttributes = [] ],\\n    [ clearsQuery = false ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectClearAll.html\\n';\n/**\n * @typedef {Object} CustomClearAllWidgetOptions\n * @property {string[]} [excludeAttributes = []] Every attributes that should not be removed when calling `refine()`.\n * @property {boolean} [clearsQuery = false] If `true`, `refine()` also clears the current search query.\n */\n\n/**\n * @typedef {Object} ClearAllRenderingOptions\n * @property {function} refine Triggers the clear of all the currently refined values.\n * @property {boolean} hasRefinements Indicates if search state is refined.\n * @property {function} createURL Creates a url for the next state when refinements are cleared.\n * @property {Object} widgetParams All original `CustomClearAllWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * **ClearAll** connector provides the logic to build a custom widget that will give the user\n * the ability to reset the search state.\n *\n * This connector provides a `refine` function to remove the current refined facets.\n *\n * The behaviour of this function can be changed with widget options. If `clearsQuery`\n * is set to `true`, `refine` will also clear the query and `excludeAttributes` can\n * prevent certain attributes from being cleared.\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/clear-refinements/js/\n * @param {function(ClearAllRenderingOptions, boolean)} renderFn Rendering function for the custom **ClearAll** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomClearAllWidgetOptions)} Re-usable widget factory for a custom **ClearAll** widget.\n * @example\n * // custom `renderFn` to render the custom ClearAll widget\n * function renderFn(ClearAllRenderingOptions, isFirstRendering) {\n *   var containerNode = ClearAllRenderingOptions.widgetParams.containerNode;\n *   if (isFirstRendering) {\n *     var markup = $('<button id=\"custom-clear-all\">Clear All</button>');\n *     containerNode.append(markup);\n *\n *     markup.on('click', function(event) {\n *       event.preventDefault();\n *       ClearAllRenderingOptions.refine();\n *     })\n *   }\n *\n *   var clearAllCTA = containerNode.find('#custom-clear-all');\n *   clearAllCTA.attr('disabled', !ClearAllRenderingOptions.hasRefinements)\n * };\n *\n * // connect `renderFn` to ClearAll logic\n * var customClearAllWidget = instantsearch.connectors.connectClearAll(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customClearAllWidget({\n *     containerNode: $('#custom-clear-all-container'),\n *   })\n * );\n */\n\nexport default function connectClearAll(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _widgetParams$exclude = widgetParams.excludeAttributes,\n        excludeAttributes = _widgetParams$exclude === undefined ? [] : _widgetParams$exclude,\n        _widgetParams$clearsQ = widgetParams.clearsQuery,\n        clearsQuery = _widgetParams$clearsQ === undefined ? false : _widgetParams$clearsQ;\n    return {\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            instantSearchInstance = _ref.instantSearchInstance,\n            createURL = _ref.createURL;\n        var attributesToClear = getAttributesToClear({\n          helper: helper,\n          blackList: excludeAttributes\n        });\n        var hasRefinements = clearsQuery ? attributesToClear.length !== 0 || helper.state.query !== '' : attributesToClear.length !== 0;\n\n        this._refine = function () {\n          helper.setState(clearRefinements({\n            helper: helper,\n            blackList: excludeAttributes,\n            clearsQuery: clearsQuery\n          })).search();\n        };\n\n        this._createURL = function () {\n          return createURL(clearRefinements({\n            helper: helper,\n            blackList: excludeAttributes,\n            clearsQuery: clearsQuery\n          }));\n        };\n\n        renderFn({\n          refine: this._refine,\n          hasRefinements: hasRefinements,\n          createURL: this._createURL,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var helper = _ref2.helper,\n            instantSearchInstance = _ref2.instantSearchInstance;\n        var attributesToClear = getAttributesToClear({\n          helper: helper,\n          blackList: excludeAttributes\n        });\n        var hasRefinements = clearsQuery ? attributesToClear.length !== 0 || helper.state.query !== '' : attributesToClear.length !== 0;\n        renderFn({\n          refine: this._refine,\n          hasRefinements: hasRefinements,\n          createURL: this._createURL,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose() {\n        unmountFn();\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/home/sow/Bureau/ProjetPerso/Gestion_School/embryo-angular/node_modules/instantsearch.js/es/connectors/clear-all/connectClearAll.js"],"names":["checkRendering","clearRefinements","getAttributesToClear","usage","connectClearAll","renderFn","unmountFn","widgetParams","arguments","length","undefined","_widgetParams$exclude","excludeAttributes","_widgetParams$clearsQ","clearsQuery","init","_ref","helper","instantSearchInstance","createURL","attributesToClear","blackList","hasRefinements","state","query","_refine","setState","search","_createURL","refine","render","_ref2","dispose"],"mappings":"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","sourcesContent":["import { checkRendering, clearRefinements, getAttributesToClear } from '../../lib/utils.js';\n\nvar usage = 'Usage:\\nvar customClearAll = connectClearAll(function render(params, isFirstRendering) {\\n  // params = {\\n  //   refine,\\n  //   hasRefinements,\\n  //   createURL,\\n  //   instantSearchInstance,\\n  //   widgetParams,\\n  // }\\n});\\nsearch.addWidget(\\n  customClearAll({\\n    [ excludeAttributes = [] ],\\n    [ clearsQuery = false ]\\n  })\\n);\\nFull documentation available at https://community.algolia.com/instantsearch.js/v2/connectors/connectClearAll.html\\n';\n\n/**\n * @typedef {Object} CustomClearAllWidgetOptions\n * @property {string[]} [excludeAttributes = []] Every attributes that should not be removed when calling `refine()`.\n * @property {boolean} [clearsQuery = false] If `true`, `refine()` also clears the current search query.\n */\n\n/**\n * @typedef {Object} ClearAllRenderingOptions\n * @property {function} refine Triggers the clear of all the currently refined values.\n * @property {boolean} hasRefinements Indicates if search state is refined.\n * @property {function} createURL Creates a url for the next state when refinements are cleared.\n * @property {Object} widgetParams All original `CustomClearAllWidgetOptions` forwarded to the `renderFn`.\n */\n\n/**\n * **ClearAll** connector provides the logic to build a custom widget that will give the user\n * the ability to reset the search state.\n *\n * This connector provides a `refine` function to remove the current refined facets.\n *\n * The behaviour of this function can be changed with widget options. If `clearsQuery`\n * is set to `true`, `refine` will also clear the query and `excludeAttributes` can\n * prevent certain attributes from being cleared.\n *\n * @type {Connector}\n * @canonical https://www.algolia.com/doc/api-reference/widgets/clear-refinements/js/\n * @param {function(ClearAllRenderingOptions, boolean)} renderFn Rendering function for the custom **ClearAll** widget.\n * @param {function} unmountFn Unmount function called when the widget is disposed.\n * @return {function(CustomClearAllWidgetOptions)} Re-usable widget factory for a custom **ClearAll** widget.\n * @example\n * // custom `renderFn` to render the custom ClearAll widget\n * function renderFn(ClearAllRenderingOptions, isFirstRendering) {\n *   var containerNode = ClearAllRenderingOptions.widgetParams.containerNode;\n *   if (isFirstRendering) {\n *     var markup = $('<button id=\"custom-clear-all\">Clear All</button>');\n *     containerNode.append(markup);\n *\n *     markup.on('click', function(event) {\n *       event.preventDefault();\n *       ClearAllRenderingOptions.refine();\n *     })\n *   }\n *\n *   var clearAllCTA = containerNode.find('#custom-clear-all');\n *   clearAllCTA.attr('disabled', !ClearAllRenderingOptions.hasRefinements)\n * };\n *\n * // connect `renderFn` to ClearAll logic\n * var customClearAllWidget = instantsearch.connectors.connectClearAll(renderFn);\n *\n * // mount widget on the page\n * search.addWidget(\n *   customClearAllWidget({\n *     containerNode: $('#custom-clear-all-container'),\n *   })\n * );\n */\nexport default function connectClearAll(renderFn, unmountFn) {\n  checkRendering(renderFn, usage);\n\n  return function () {\n    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _widgetParams$exclude = widgetParams.excludeAttributes,\n        excludeAttributes = _widgetParams$exclude === undefined ? [] : _widgetParams$exclude,\n        _widgetParams$clearsQ = widgetParams.clearsQuery,\n        clearsQuery = _widgetParams$clearsQ === undefined ? false : _widgetParams$clearsQ;\n\n\n    return {\n      init: function init(_ref) {\n        var helper = _ref.helper,\n            instantSearchInstance = _ref.instantSearchInstance,\n            createURL = _ref.createURL;\n\n        var attributesToClear = getAttributesToClear({\n          helper: helper,\n          blackList: excludeAttributes\n        });\n\n        var hasRefinements = clearsQuery ? attributesToClear.length !== 0 || helper.state.query !== '' : attributesToClear.length !== 0;\n\n        this._refine = function () {\n          helper.setState(clearRefinements({\n            helper: helper,\n            blackList: excludeAttributes,\n            clearsQuery: clearsQuery\n          })).search();\n        };\n\n        this._createURL = function () {\n          return createURL(clearRefinements({\n            helper: helper,\n            blackList: excludeAttributes,\n            clearsQuery: clearsQuery\n          }));\n        };\n\n        renderFn({\n          refine: this._refine,\n          hasRefinements: hasRefinements,\n          createURL: this._createURL,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, true);\n      },\n      render: function render(_ref2) {\n        var helper = _ref2.helper,\n            instantSearchInstance = _ref2.instantSearchInstance;\n\n        var attributesToClear = getAttributesToClear({\n          helper: helper,\n          blackList: excludeAttributes\n        });\n\n        var hasRefinements = clearsQuery ? attributesToClear.length !== 0 || helper.state.query !== '' : attributesToClear.length !== 0;\n\n        renderFn({\n          refine: this._refine,\n          hasRefinements: hasRefinements,\n          createURL: this._createURL,\n          instantSearchInstance: instantSearchInstance,\n          widgetParams: widgetParams\n        }, false);\n      },\n      dispose: function dispose() {\n        unmountFn();\n      }\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}