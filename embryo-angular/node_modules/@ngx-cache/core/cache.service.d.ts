import { InjectionToken, Injector } from '@angular/core';
import { Cache } from './cache';
import { CacheLoader } from './cache.loader';
import { CacheValue } from './models/cache-value';
import { LifeSpan } from './models/life-span';
import { ReturnType } from './models/return-type';
import * as i0 from "@angular/core";
export declare const CACHE: InjectionToken<Cache>;
export declare class CacheService {
    readonly loader: CacheLoader;
    private readonly platformId;
    private readonly injector;
    private static instance;
    protected readonly cache: Cache;
    protected readonly lifeSpan: LifeSpan;
    static getInstance(loader?: CacheLoader, platformId?: any, injector?: Injector): CacheService;
    static normalizeKey(key: string | number): string;
    private static validateKey;
    private static validateValue;
    constructor(loader: CacheLoader, platformId: any, injector: Injector);
    get key(): string;
    has(key: string | number): boolean;
    set(key: string | number, value: any, returnType?: ReturnType, lifeSpan?: LifeSpan): boolean;
    get(key: string | number): any;
    getWithMetadata(key: string | number): CacheValue | undefined;
    remove(key: string | number, wild?: boolean): void;
    clear(): void;
    dehydrate(): any;
    rehydrate(json: any): void;
    private parseLifeSpan;
    static ɵfac: i0.ɵɵFactoryDef<CacheService, never>;
    static ɵprov: i0.ɵɵInjectableDef<CacheService>;
}
