import { Inject, Injectable, InjectionToken, Injector, PLATFORM_ID } from '@angular/core';
import { CacheLoader } from './cache.loader';
import { ReturnType } from './models/return-type';
import * as i0 from "@angular/core";
import * as i1 from "./cache.loader";
export var CACHE = new InjectionToken('CACHE');
var CacheService = (function () {
    function CacheService(loader, platformId, injector) {
        this.loader = loader;
        this.platformId = platformId;
        this.injector = injector;
        CacheService.instance = this;
        this.cache = this.injector.get(CACHE);
        this.lifeSpan = loader.lifeSpan;
    }
    CacheService.getInstance = function (loader, platformId, injector) {
        return CacheService.instance;
    };
    CacheService.normalizeKey = function (key) {
        if (CacheService.validateKey(key)) {
            throw new Error('Please provide a valid key to save in the CacheService');
        }
        return "" + key;
    };
    CacheService.validateKey = function (key) {
        return !key || typeof key === 'boolean' || Number.isNaN(key);
    };
    CacheService.validateValue = function (value) {
        return value.lifeSpan.expiry && value.lifeSpan.expiry > Date.now();
    };
    Object.defineProperty(CacheService.prototype, "key", {
        get: function () {
            return this.loader.key;
        },
        enumerable: true,
        configurable: true
    });
    CacheService.prototype.has = function (key) {
        var normalized = CacheService.normalizeKey(key);
        return this.cache.keys.indexOf(normalized) !== -1 && CacheService.validateValue(this.cache.getItem(normalized));
    };
    CacheService.prototype.set = function (key, value, returnType, lifeSpan) {
        if (returnType === void 0) { returnType = ReturnType.Scalar; }
        var normalized = CacheService.normalizeKey(key);
        return this.cache.setItem(normalized, {
            data: value,
            returnType: returnType,
            lifeSpan: this.parseLifeSpan(lifeSpan ? lifeSpan : this.lifeSpan)
        });
    };
    CacheService.prototype.get = function (key) {
        var normalized = CacheService.normalizeKey(key);
        var cached = this.cache.getItem(normalized);
        if (Object.entries(cached).length !== 0 && cached.constructor === Object) {
            if (CacheService.validateValue(cached)) {
                return cached.data;
            }
            this.remove(normalized);
        }
        return undefined;
    };
    CacheService.prototype.getWithMetadata = function (key) {
        var normalized = CacheService.normalizeKey(key);
        var cached = this.cache.getItem(normalized);
        if (Object.entries(cached).length !== 0 && cached.constructor === Object) {
            if (CacheService.validateValue(cached)) {
                return cached;
            }
            this.remove(key);
        }
        return undefined;
    };
    CacheService.prototype.remove = function (key, wild) {
        if (wild === void 0) { wild = false; }
        var normalized = CacheService.normalizeKey(key);
        this.cache.removeItem(normalized, wild);
    };
    CacheService.prototype.clear = function () {
        this.cache.clear();
    };
    CacheService.prototype.dehydrate = function () {
        var _this = this;
        var keys = this.cache.keys.length ? this.cache.keys : [];
        var res = {};
        keys.forEach(function (key) {
            res[key] = _this.cache.getItem(key);
        });
        return res;
    };
    CacheService.prototype.rehydrate = function (json) {
        var _this = this;
        Object.keys(json).forEach(function (key) {
            var normalized = CacheService.normalizeKey(key);
            _this.cache.setItem(normalized, json[normalized]);
        });
    };
    CacheService.prototype.parseLifeSpan = function (lifeSpan) {
        return {
            expiry: lifeSpan.expiry || (lifeSpan.TTL ? Date.now() + lifeSpan.TTL * 1000 : this.lifeSpan.expiry),
            TTL: lifeSpan.TTL || this.lifeSpan.TTL
        };
    };
    CacheService.instance = undefined;
    CacheService.ɵfac = function CacheService_Factory(t) { return new (t || CacheService)(i0.ɵɵinject(i1.CacheLoader), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.Injector)); };
    CacheService.ɵprov = i0.ɵɵdefineInjectable({ token: CacheService, factory: CacheService.ɵfac });
    return CacheService;
}());
export { CacheService };
(function () { i0.ɵsetClassMetadata(CacheService, [{
        type: Injectable
    }], function () { return [{ type: i1.CacheLoader }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: i0.Injector }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtY2FjaGUvY29yZS8iLCJzb3VyY2VzIjpbImNhY2hlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHMUYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7O0FBRWxELE1BQU0sQ0FBQyxJQUFNLEtBQUssR0FBRyxJQUFJLGNBQWMsQ0FBUSxPQUFPLENBQUMsQ0FBQztBQUV4RDtJQTJCRSxzQkFBcUIsTUFBbUIsRUFBd0MsVUFBZSxFQUFtQixRQUFrQjtRQUEvRyxXQUFNLEdBQU4sTUFBTSxDQUFhO1FBQXdDLGVBQVUsR0FBVixVQUFVLENBQUs7UUFBbUIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsSSxZQUFZLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUU3QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNsQyxDQUFDO0lBekJNLHdCQUFXLEdBQWxCLFVBQW1CLE1BQW9CLEVBQUUsVUFBZ0IsRUFBRSxRQUFtQjtRQUM1RSxPQUFPLFlBQVksQ0FBQyxRQUFRLENBQUM7SUFDL0IsQ0FBQztJQUVNLHlCQUFZLEdBQW5CLFVBQW9CLEdBQW9CO1FBQ3RDLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLHdEQUF3RCxDQUFDLENBQUM7U0FDM0U7UUFFRCxPQUFPLEtBQUcsR0FBSyxDQUFDO0lBQ2xCLENBQUM7SUFFYyx3QkFBVyxHQUExQixVQUEyQixHQUFvQjtRQUM3QyxPQUFPLENBQUMsR0FBRyxJQUFJLE9BQU8sR0FBRyxLQUFLLFNBQVMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQWEsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFYywwQkFBYSxHQUE1QixVQUE2QixLQUFpQjtRQUM1QyxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNyRSxDQUFDO0lBU0Qsc0JBQUksNkJBQUc7YUFBUDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDekIsQ0FBQzs7O09BQUE7SUFFRCwwQkFBRyxHQUFILFVBQUksR0FBb0I7UUFDdEIsSUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVsRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxZQUFZLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDbEgsQ0FBQztJQUVELDBCQUFHLEdBQUgsVUFBSSxHQUFvQixFQUFFLEtBQVUsRUFBRSxVQUEwQyxFQUFFLFFBQW1CO1FBQS9ELDJCQUFBLEVBQUEsYUFBeUIsVUFBVSxDQUFDLE1BQU07UUFDOUUsSUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVsRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUNwQyxJQUFJLEVBQUUsS0FBSztZQUNYLFVBQVUsWUFBQTtZQUNWLFFBQVEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ2xFLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCwwQkFBRyxHQUFILFVBQUksR0FBb0I7UUFDdEIsSUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsRCxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU5QyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsV0FBVyxLQUFLLE1BQU0sRUFBRTtZQUN4RSxJQUFJLFlBQVksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3RDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQzthQUNwQjtZQUVELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDekI7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsc0NBQWUsR0FBZixVQUFnQixHQUFvQjtRQUNsQyxJQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xELElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTlDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEtBQUssTUFBTSxFQUFFO1lBQ3hFLElBQUksWUFBWSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDdEMsT0FBTyxNQUFNLENBQUM7YUFDZjtZQUVELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbEI7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsNkJBQU0sR0FBTixVQUFPLEdBQW9CLEVBQUUsSUFBWTtRQUFaLHFCQUFBLEVBQUEsWUFBWTtRQUN2QyxJQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsNEJBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELGdDQUFTLEdBQVQ7UUFBQSxpQkFTQztRQVJDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMzRCxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFFZixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBVztZQUN2QixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxnQ0FBUyxHQUFULFVBQVUsSUFBUztRQUFuQixpQkFLQztRQUpDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBVztZQUNwQyxJQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xELEtBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxvQ0FBYSxHQUFyQixVQUFzQixRQUFrQjtRQUN0QyxPQUFPO1lBQ0wsTUFBTSxFQUFFLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsUUFBUSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ25HLEdBQUcsRUFBRSxRQUFRLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRztTQUN2QyxDQUFDO0lBQ0osQ0FBQztJQW5IYyxxQkFBUSxHQUFpQixTQUFTLENBQUM7NEVBRHZDLFlBQVksMkNBMEIyQixXQUFXO3dEQTFCbEQsWUFBWSxXQUFaLFlBQVk7dUJBWHpCO0NBZ0lDLEFBdEhELElBc0hDO1NBckhZLFlBQVk7b0NBQVosWUFBWTtjQUR4QixVQUFVOztzQkEyQmtDLE1BQU07dUJBQUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yLCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDYWNoZSB9IGZyb20gJy4vY2FjaGUnO1xuaW1wb3J0IHsgQ2FjaGVMb2FkZXIgfSBmcm9tICcuL2NhY2hlLmxvYWRlcic7XG5pbXBvcnQgeyBDYWNoZVZhbHVlIH0gZnJvbSAnLi9tb2RlbHMvY2FjaGUtdmFsdWUnO1xuaW1wb3J0IHsgTGlmZVNwYW4gfSBmcm9tICcuL21vZGVscy9saWZlLXNwYW4nO1xuaW1wb3J0IHsgUmV0dXJuVHlwZSB9IGZyb20gJy4vbW9kZWxzL3JldHVybi10eXBlJztcblxuZXhwb3J0IGNvbnN0IENBQ0hFID0gbmV3IEluamVjdGlvblRva2VuPENhY2hlPignQ0FDSEUnKTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhY2hlU2VydmljZSB7XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBDYWNoZVNlcnZpY2UgPSB1bmRlZmluZWQ7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGNhY2hlOiBDYWNoZTtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGxpZmVTcGFuOiBMaWZlU3BhbjtcblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UobG9hZGVyPzogQ2FjaGVMb2FkZXIsIHBsYXRmb3JtSWQ/OiBhbnksIGluamVjdG9yPzogSW5qZWN0b3IpOiBDYWNoZVNlcnZpY2Uge1xuICAgIHJldHVybiBDYWNoZVNlcnZpY2UuaW5zdGFuY2U7XG4gIH1cblxuICBzdGF0aWMgbm9ybWFsaXplS2V5KGtleTogc3RyaW5nIHwgbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoQ2FjaGVTZXJ2aWNlLnZhbGlkYXRlS2V5KGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBrZXkgdG8gc2F2ZSBpbiB0aGUgQ2FjaGVTZXJ2aWNlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAke2tleX1gO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgdmFsaWRhdGVLZXkoa2V5OiBzdHJpbmcgfCBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIWtleSB8fCB0eXBlb2Yga2V5ID09PSAnYm9vbGVhbicgfHwgTnVtYmVyLmlzTmFOKGtleSBhcyBudW1iZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgdmFsaWRhdGVWYWx1ZSh2YWx1ZTogQ2FjaGVWYWx1ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB2YWx1ZS5saWZlU3Bhbi5leHBpcnkgJiYgdmFsdWUubGlmZVNwYW4uZXhwaXJ5ID4gRGF0ZS5ub3coKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGxvYWRlcjogQ2FjaGVMb2FkZXIsIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcmVhZG9ubHkgcGxhdGZvcm1JZDogYW55LCBwcml2YXRlIHJlYWRvbmx5IGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIENhY2hlU2VydmljZS5pbnN0YW5jZSA9IHRoaXM7XG5cbiAgICB0aGlzLmNhY2hlID0gdGhpcy5pbmplY3Rvci5nZXQoQ0FDSEUpO1xuICAgIHRoaXMubGlmZVNwYW4gPSBsb2FkZXIubGlmZVNwYW47XG4gIH1cblxuICBnZXQga2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubG9hZGVyLmtleTtcbiAgfVxuXG4gIGhhcyhrZXk6IHN0cmluZyB8IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBDYWNoZVNlcnZpY2Uubm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICByZXR1cm4gdGhpcy5jYWNoZS5rZXlzLmluZGV4T2Yobm9ybWFsaXplZCkgIT09IC0xICYmIENhY2hlU2VydmljZS52YWxpZGF0ZVZhbHVlKHRoaXMuY2FjaGUuZ2V0SXRlbShub3JtYWxpemVkKSk7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcgfCBudW1iZXIsIHZhbHVlOiBhbnksIHJldHVyblR5cGU6IFJldHVyblR5cGUgPSBSZXR1cm5UeXBlLlNjYWxhciwgbGlmZVNwYW4/OiBMaWZlU3Bhbik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBDYWNoZVNlcnZpY2Uubm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICByZXR1cm4gdGhpcy5jYWNoZS5zZXRJdGVtKG5vcm1hbGl6ZWQsIHtcbiAgICAgIGRhdGE6IHZhbHVlLFxuICAgICAgcmV0dXJuVHlwZSxcbiAgICAgIGxpZmVTcGFuOiB0aGlzLnBhcnNlTGlmZVNwYW4obGlmZVNwYW4gPyBsaWZlU3BhbiA6IHRoaXMubGlmZVNwYW4pXG4gICAgfSk7XG4gIH1cblxuICBnZXQoa2V5OiBzdHJpbmcgfCBudW1iZXIpOiBhbnkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBDYWNoZVNlcnZpY2Uubm9ybWFsaXplS2V5KGtleSk7XG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5jYWNoZS5nZXRJdGVtKG5vcm1hbGl6ZWQpO1xuXG4gICAgaWYgKE9iamVjdC5lbnRyaWVzKGNhY2hlZCkubGVuZ3RoICE9PSAwICYmIGNhY2hlZC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICBpZiAoQ2FjaGVTZXJ2aWNlLnZhbGlkYXRlVmFsdWUoY2FjaGVkKSkge1xuICAgICAgICByZXR1cm4gY2FjaGVkLmRhdGE7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVtb3ZlKG5vcm1hbGl6ZWQpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBnZXRXaXRoTWV0YWRhdGEoa2V5OiBzdHJpbmcgfCBudW1iZXIpOiBDYWNoZVZhbHVlIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0gQ2FjaGVTZXJ2aWNlLm5vcm1hbGl6ZUtleShrZXkpO1xuICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuY2FjaGUuZ2V0SXRlbShub3JtYWxpemVkKTtcblxuICAgIGlmIChPYmplY3QuZW50cmllcyhjYWNoZWQpLmxlbmd0aCAhPT0gMCAmJiBjYWNoZWQuY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgaWYgKENhY2hlU2VydmljZS52YWxpZGF0ZVZhbHVlKGNhY2hlZCkpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW1vdmUoa2V5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmVtb3ZlKGtleTogc3RyaW5nIHwgbnVtYmVyLCB3aWxkID0gZmFsc2UpOiB2b2lkIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0gQ2FjaGVTZXJ2aWNlLm5vcm1hbGl6ZUtleShrZXkpO1xuXG4gICAgdGhpcy5jYWNoZS5yZW1vdmVJdGVtKG5vcm1hbGl6ZWQsIHdpbGQpO1xuICB9XG5cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5jYWNoZS5jbGVhcigpO1xuICB9XG5cbiAgZGVoeWRyYXRlKCk6IGFueSB7XG4gICAgY29uc3Qga2V5cyA9IHRoaXMuY2FjaGUua2V5cy5sZW5ndGggPyB0aGlzLmNhY2hlLmtleXMgOiBbXTtcbiAgICBjb25zdCByZXMgPSB7fTtcblxuICAgIGtleXMuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHJlc1trZXldID0gdGhpcy5jYWNoZS5nZXRJdGVtKGtleSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgcmVoeWRyYXRlKGpzb246IGFueSk6IHZvaWQge1xuICAgIE9iamVjdC5rZXlzKGpzb24pLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBub3JtYWxpemVkID0gQ2FjaGVTZXJ2aWNlLm5vcm1hbGl6ZUtleShrZXkpO1xuICAgICAgdGhpcy5jYWNoZS5zZXRJdGVtKG5vcm1hbGl6ZWQsIGpzb25bbm9ybWFsaXplZF0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZUxpZmVTcGFuKGxpZmVTcGFuOiBMaWZlU3Bhbik6IExpZmVTcGFuIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXhwaXJ5OiBsaWZlU3Bhbi5leHBpcnkgfHwgKGxpZmVTcGFuLlRUTCA/IERhdGUubm93KCkgKyBsaWZlU3Bhbi5UVEwgKiAxMDAwIDogdGhpcy5saWZlU3Bhbi5leHBpcnkpLFxuICAgICAgVFRMOiBsaWZlU3Bhbi5UVEwgfHwgdGhpcy5saWZlU3Bhbi5UVExcbiAgICB9O1xuICB9XG59XG4iXX0=