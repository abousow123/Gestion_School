import { of as observableOf } from 'rxjs';
import { map } from 'rxjs/operators';
import { CacheService } from './cache.service';
import { ReturnType } from './models/return-type';
import { isObservable, isPromise } from './util';
export function CacheKey(target, propertyKey, index) {
    var metadataKey = "__cache_" + propertyKey + "_keys";
    Array.isArray(target[metadataKey]) ? target[metadataKey].push(index) : (target[metadataKey] = [index]);
}
export function Cached(key) {
    return function (target, propertyKey, descriptor) {
        var method = descriptor.value;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var cache = CacheService.getInstance();
            var metadataKey = "__cache_" + propertyKey + "_keys";
            var indices = target[metadataKey];
            var keyParts = '';
            if (Array.isArray(indices)) {
                for (var i = 0; i < args.length; i++) {
                    if (indices.indexOf(i) !== -1) {
                        keyParts = !keyParts ? String(args[i]) : keyParts + "_" + String(args[i]);
                    }
                }
            }
            var cacheKey = !keyParts ? key : key + "_" + keyParts;
            cacheKey = CacheService.normalizeKey(cacheKey);
            if (!cache || !cacheKey) {
                return method.apply(this, args);
            }
            if (cache.has(cacheKey)) {
                var cached = cache.getWithMetadata(cacheKey);
                if (cached && cached.data) {
                    switch (cached.returnType) {
                        case ReturnType.Observable:
                            return observableOf(cached.data);
                        case ReturnType.Promise:
                            return Promise.resolve(cached.data);
                        default:
                            return cached.data;
                    }
                }
            }
            var value = method.apply(this, args);
            if (isObservable(value)) {
                return value.pipe(map(function (res) {
                    cache.set(cacheKey, res, ReturnType.Observable);
                    return res;
                }));
            }
            else if (isPromise(value)) {
                return (value).then(function (res) {
                    cache.set(cacheKey, res, ReturnType.Promise);
                    return res;
                });
            }
            cache.set(cacheKey, value);
            return value;
        };
        return descriptor;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVkLmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtY2FjaGUvY29yZS8iLCJzb3VyY2VzIjpbImNhY2hlZC5kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLEVBQUUsSUFBSSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHakQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxNQUFXLEVBQUUsV0FBbUIsRUFBRSxLQUFhO0lBQ3RFLElBQU0sV0FBVyxHQUFHLGFBQVcsV0FBVyxVQUFPLENBQUM7SUFFbEQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3pHLENBQUM7QUFHRCxNQUFNLFVBQVUsTUFBTSxDQUFDLEdBQVc7SUFFaEMsT0FBTyxVQUFTLE1BQWdCLEVBQUUsV0FBbUIsRUFBRSxVQUF3QztRQUM3RixJQUFNLE1BQU0sR0FBYSxVQUFVLENBQUMsS0FBSyxDQUFDO1FBQzFDLFVBQVUsQ0FBQyxLQUFLLEdBQUc7WUFBUyxjQUFtQjtpQkFBbkIsVUFBbUIsRUFBbkIscUJBQW1CLEVBQW5CLElBQW1CO2dCQUFuQix5QkFBbUI7O1lBQzdDLElBQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUV6QyxJQUFNLFdBQVcsR0FBRyxhQUFXLFdBQVcsVUFBTyxDQUFDO1lBQ2xELElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUVwQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFFbEIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUMxQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDcEMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO3dCQUM3QixRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUksUUFBUSxTQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUcsQ0FBQztxQkFDM0U7aUJBQ0Y7YUFDRjtZQUVELElBQUksUUFBUSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFJLEdBQUcsU0FBSSxRQUFVLENBQUM7WUFFdEQsUUFBUSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFHL0MsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFFdkIsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQzthQUNqQztZQUVELElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDdkIsSUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFFL0MsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtvQkFDekIsUUFBUSxNQUFNLENBQUMsVUFBVSxFQUFFO3dCQUN6QixLQUFLLFVBQVUsQ0FBQyxVQUFVOzRCQUN4QixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ25DLEtBQUssVUFBVSxDQUFDLE9BQU87NEJBQ3JCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ3RDOzRCQUNFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQztxQkFDdEI7aUJBQ0Y7YUFDRjtZQUdELElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBRXZDLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN2QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQ2YsR0FBRyxDQUFDLFVBQUMsR0FBUTtvQkFDWCxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUVoRCxPQUFPLEdBQUcsQ0FBQztnQkFDYixDQUFDLENBQUMsQ0FDSCxDQUFDO2FBQ0g7aUJBQU0sSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzNCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFRO29CQUMzQixLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUU3QyxPQUFPLEdBQUcsQ0FBQztnQkFDYixDQUFDLENBQUMsQ0FBQzthQUNKO1lBRUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFM0IsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUM7UUFFRixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgYXMgb2JzZXJ2YWJsZU9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IENhY2hlU2VydmljZSB9IGZyb20gJy4vY2FjaGUuc2VydmljZSc7XG5pbXBvcnQgeyBSZXR1cm5UeXBlIH0gZnJvbSAnLi9tb2RlbHMvcmV0dXJuLXR5cGUnO1xuaW1wb3J0IHsgaXNPYnNlcnZhYmxlLCBpc1Byb21pc2UgfSBmcm9tICcuL3V0aWwnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCBmdW5jdGlvbiBDYWNoZUtleSh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICBjb25zdCBtZXRhZGF0YUtleSA9IGBfX2NhY2hlXyR7cHJvcGVydHlLZXl9X2tleXNgO1xuXG4gIEFycmF5LmlzQXJyYXkodGFyZ2V0W21ldGFkYXRhS2V5XSkgPyB0YXJnZXRbbWV0YWRhdGFLZXldLnB1c2goaW5kZXgpIDogKHRhcmdldFttZXRhZGF0YUtleV0gPSBbaW5kZXhdKTtcbn1cblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG5leHBvcnQgZnVuY3Rpb24gQ2FjaGVkKGtleTogc3RyaW5nKTogYW55IHwgT2JzZXJ2YWJsZTxhbnk+IHwgUHJvbWlzZTxhbnk+IHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IEZ1bmN0aW9uLCBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxhbnk+KTogYW55IHwgT2JzZXJ2YWJsZTxhbnk+IHwgUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCBtZXRob2Q6IEZ1bmN0aW9uID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24oLi4uYXJnczogQXJyYXk8YW55Pik6IGFueSB8IE9ic2VydmFibGU8YW55PiB8IFByb21pc2U8YW55PiB7XG4gICAgICBjb25zdCBjYWNoZSA9IENhY2hlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICBjb25zdCBtZXRhZGF0YUtleSA9IGBfX2NhY2hlXyR7cHJvcGVydHlLZXl9X2tleXNgO1xuICAgICAgY29uc3QgaW5kaWNlcyA9IHRhcmdldFttZXRhZGF0YUtleV07XG5cbiAgICAgIGxldCBrZXlQYXJ0cyA9ICcnO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShpbmRpY2VzKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoaW5kaWNlcy5pbmRleE9mKGkpICE9PSAtMSkge1xuICAgICAgICAgICAga2V5UGFydHMgPSAha2V5UGFydHMgPyBTdHJpbmcoYXJnc1tpXSkgOiBgJHtrZXlQYXJ0c31fJHtTdHJpbmcoYXJnc1tpXSl9YDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IGNhY2hlS2V5ID0gIWtleVBhcnRzID8ga2V5IDogYCR7a2V5fV8ke2tleVBhcnRzfWA7XG5cbiAgICAgIGNhY2hlS2V5ID0gQ2FjaGVTZXJ2aWNlLm5vcm1hbGl6ZUtleShjYWNoZUtleSk7XG5cbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKCFjYWNoZSB8fCAhY2FjaGVLZXkpIHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWNoZS5oYXMoY2FjaGVLZXkpKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldFdpdGhNZXRhZGF0YShjYWNoZUtleSk7XG5cbiAgICAgICAgaWYgKGNhY2hlZCAmJiBjYWNoZWQuZGF0YSkge1xuICAgICAgICAgIHN3aXRjaCAoY2FjaGVkLnJldHVyblR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgUmV0dXJuVHlwZS5PYnNlcnZhYmxlOlxuICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZU9mKGNhY2hlZC5kYXRhKTtcbiAgICAgICAgICAgIGNhc2UgUmV0dXJuVHlwZS5Qcm9taXNlOlxuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNhY2hlZC5kYXRhKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHJldHVybiBjYWNoZWQuZGF0YTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICBjb25zdCB2YWx1ZSA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcblxuICAgICAgaWYgKGlzT2JzZXJ2YWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnBpcGUoXG4gICAgICAgICAgbWFwKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgY2FjaGUuc2V0KGNhY2hlS2V5LCByZXMsIFJldHVyblR5cGUuT2JzZXJ2YWJsZSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlKS50aGVuKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgcmVzLCBSZXR1cm5UeXBlLlByb21pc2UpO1xuXG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgdmFsdWUpO1xuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcblxuICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICB9O1xufVxuIl19