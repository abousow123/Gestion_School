import { InjectionToken, Injector, NgModule, Optional, PLATFORM_ID, SkipSelf } from '@angular/core';
import { CacheLoader, CacheStaticLoader } from './cache.loader';
import { CacheService } from './cache.service';
import * as i0 from "@angular/core";
export var STORAGE = new InjectionToken('STORAGE');
export var cacheFactory = function () { return new CacheStaticLoader(); };
export var cacheServiceFactory = function (loader, platformId, injector) {
    return new CacheService(loader, platformId, injector);
};
var CacheModule = (function () {
    function CacheModule(parentModule) {
        if (parentModule) {
            throw new Error('CacheModule already loaded; import in root module only.');
        }
    }
    CacheModule.forRoot = function (configuredProvider) {
        if (configuredProvider === void 0) { configuredProvider = {
            provide: CacheLoader,
            useFactory: cacheFactory
        }; }
        return {
            ngModule: CacheModule,
            providers: [
                configuredProvider,
                {
                    provide: CacheService,
                    useFactory: cacheServiceFactory,
                    deps: [CacheLoader, PLATFORM_ID, Injector]
                }
            ]
        };
    };
    CacheModule.ɵmod = i0.ɵɵdefineNgModule({ type: CacheModule });
    CacheModule.ɵinj = i0.ɵɵdefineInjector({ factory: function CacheModule_Factory(t) { return new (t || CacheModule)(i0.ɵɵinject(CacheModule, 12)); } });
    return CacheModule;
}());
export { CacheModule };
(function () { i0.ɵsetClassMetadata(CacheModule, [{
        type: NgModule
    }], function () { return [{ type: CacheModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1jYWNoZS9jb3JlLyIsInNvdXJjZXMiOlsiY2FjaGUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekgsT0FBTyxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFHL0MsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLElBQUksY0FBYyxDQUFVLFNBQVMsQ0FBQyxDQUFDO0FBRTlELE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FBRyxjQUFNLE9BQUEsSUFBSSxpQkFBaUIsRUFBRSxFQUF2QixDQUF1QixDQUFDO0FBRTFELE1BQU0sQ0FBQyxJQUFNLG1CQUFtQixHQUFHLFVBQUMsTUFBbUIsRUFBRSxVQUFlLEVBQUUsUUFBa0I7SUFDMUYsT0FBQSxJQUFJLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQztBQUE5QyxDQUE4QyxDQUFDO0FBRWpEO0lBcUJFLHFCQUFvQyxZQUEwQjtRQUM1RCxJQUFJLFlBQVksRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxDQUFDLENBQUM7U0FDNUU7SUFDSCxDQUFDO0lBdkJNLG1CQUFPLEdBQWQsVUFDRSxrQkFHQztRQUhELG1DQUFBLEVBQUE7WUFDRSxPQUFPLEVBQUUsV0FBVztZQUNwQixVQUFVLEVBQUUsWUFBWTtTQUN6QjtRQUVELE9BQU87WUFDTCxRQUFRLEVBQUUsV0FBVztZQUNyQixTQUFTLEVBQUU7Z0JBQ1Qsa0JBQWtCO2dCQUNsQjtvQkFDRSxPQUFPLEVBQUUsWUFBWTtvQkFDckIsVUFBVSxFQUFFLG1CQUFtQjtvQkFDL0IsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUM7aUJBQzNDO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzttREFsQlUsV0FBVzt5R0FBWCxXQUFXLGNBb0I2QixXQUFXO3NCQWxDaEU7Q0F1Q0MsQUExQkQsSUEwQkM7U0F6QlksV0FBVztvQ0FBWCxXQUFXO2NBRHZCLFFBQVE7c0NBcUI0QyxXQUFXO3NCQUFqRCxRQUFROztzQkFBSSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgT3B0aW9uYWwsIFBMQVRGT1JNX0lELCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDYWNoZUxvYWRlciwgQ2FjaGVTdGF0aWNMb2FkZXIgfSBmcm9tICcuL2NhY2hlLmxvYWRlcic7XG5pbXBvcnQgeyBDYWNoZVNlcnZpY2UgfSBmcm9tICcuL2NhY2hlLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZSB9IGZyb20gJy4vc3RvcmFnZSc7XG5cbmV4cG9ydCBjb25zdCBTVE9SQUdFID0gbmV3IEluamVjdGlvblRva2VuPFN0b3JhZ2U+KCdTVE9SQUdFJyk7XG5cbmV4cG9ydCBjb25zdCBjYWNoZUZhY3RvcnkgPSAoKSA9PiBuZXcgQ2FjaGVTdGF0aWNMb2FkZXIoKTtcblxuZXhwb3J0IGNvbnN0IGNhY2hlU2VydmljZUZhY3RvcnkgPSAobG9hZGVyOiBDYWNoZUxvYWRlciwgcGxhdGZvcm1JZDogYW55LCBpbmplY3RvcjogSW5qZWN0b3IpID0+XG4gIG5ldyBDYWNoZVNlcnZpY2UobG9hZGVyLCBwbGF0Zm9ybUlkLCBpbmplY3Rvcik7XG5cbkBOZ01vZHVsZSgpXG5leHBvcnQgY2xhc3MgQ2FjaGVNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChcbiAgICBjb25maWd1cmVkUHJvdmlkZXI6IGFueSA9IHtcbiAgICAgIHByb3ZpZGU6IENhY2hlTG9hZGVyLFxuICAgICAgdXNlRmFjdG9yeTogY2FjaGVGYWN0b3J5XG4gICAgfVxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzPENhY2hlTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBDYWNoZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBjb25maWd1cmVkUHJvdmlkZXIsXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBDYWNoZVNlcnZpY2UsXG4gICAgICAgICAgdXNlRmFjdG9yeTogY2FjaGVTZXJ2aWNlRmFjdG9yeSxcbiAgICAgICAgICBkZXBzOiBbQ2FjaGVMb2FkZXIsIFBMQVRGT1JNX0lELCBJbmplY3Rvcl1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwYXJlbnRNb2R1bGU/OiBDYWNoZU1vZHVsZSkge1xuICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FjaGVNb2R1bGUgYWxyZWFkeSBsb2FkZWQ7IGltcG9ydCBpbiByb290IG1vZHVsZSBvbmx5LicpO1xuICAgIH1cbiAgfVxufVxuIl19