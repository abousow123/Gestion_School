import { of as observableOf } from 'rxjs';
import { map } from 'rxjs/operators';
import { CacheService } from './cache.service';
import { ReturnType } from './models/return-type';
import { isObservable, isPromise } from './util';
export function CacheKey(target, propertyKey, index) {
    const metadataKey = `__cache_${propertyKey}_keys`;
    Array.isArray(target[metadataKey]) ? target[metadataKey].push(index) : (target[metadataKey] = [index]);
}
export function Cached(key) {
    return function (target, propertyKey, descriptor) {
        const method = descriptor.value;
        descriptor.value = function (...args) {
            const cache = CacheService.getInstance();
            const metadataKey = `__cache_${propertyKey}_keys`;
            const indices = target[metadataKey];
            let keyParts = '';
            if (Array.isArray(indices)) {
                for (let i = 0; i < args.length; i++) {
                    if (indices.indexOf(i) !== -1) {
                        keyParts = !keyParts ? String(args[i]) : `${keyParts}_${String(args[i])}`;
                    }
                }
            }
            let cacheKey = !keyParts ? key : `${key}_${keyParts}`;
            cacheKey = CacheService.normalizeKey(cacheKey);
            if (!cache || !cacheKey) {
                return method.apply(this, args);
            }
            if (cache.has(cacheKey)) {
                const cached = cache.getWithMetadata(cacheKey);
                if (cached && cached.data) {
                    switch (cached.returnType) {
                        case ReturnType.Observable:
                            return observableOf(cached.data);
                        case ReturnType.Promise:
                            return Promise.resolve(cached.data);
                        default:
                            return cached.data;
                    }
                }
            }
            const value = method.apply(this, args);
            if (isObservable(value)) {
                return value.pipe(map((res) => {
                    cache.set(cacheKey, res, ReturnType.Observable);
                    return res;
                }));
            }
            else if (isPromise(value)) {
                return (value).then((res) => {
                    cache.set(cacheKey, res, ReturnType.Promise);
                    return res;
                });
            }
            cache.set(cacheKey, value);
            return value;
        };
        return descriptor;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVkLmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtY2FjaGUvY29yZS8iLCJzb3VyY2VzIjpbImNhY2hlZC5kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLEVBQUUsSUFBSSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHakQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxNQUFXLEVBQUUsV0FBbUIsRUFBRSxLQUFhO0lBQ3RFLE1BQU0sV0FBVyxHQUFHLFdBQVcsV0FBVyxPQUFPLENBQUM7SUFFbEQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3pHLENBQUM7QUFHRCxNQUFNLFVBQVUsTUFBTSxDQUFDLEdBQVc7SUFFaEMsT0FBTyxVQUFTLE1BQWdCLEVBQUUsV0FBbUIsRUFBRSxVQUF3QztRQUM3RixNQUFNLE1BQU0sR0FBYSxVQUFVLENBQUMsS0FBSyxDQUFDO1FBQzFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsVUFBUyxHQUFHLElBQWdCO1lBQzdDLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUV6QyxNQUFNLFdBQVcsR0FBRyxXQUFXLFdBQVcsT0FBTyxDQUFDO1lBQ2xELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUVwQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFFbEIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUMxQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDcEMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO3dCQUM3QixRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7cUJBQzNFO2lCQUNGO2FBQ0Y7WUFFRCxJQUFJLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUV0RCxRQUFRLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUcvQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUV2QixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ2pDO1lBRUQsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUN2QixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUUvQyxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO29CQUN6QixRQUFRLE1BQU0sQ0FBQyxVQUFVLEVBQUU7d0JBQ3pCLEtBQUssVUFBVSxDQUFDLFVBQVU7NEJBQ3hCLE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDbkMsS0FBSyxVQUFVLENBQUMsT0FBTzs0QkFDckIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDdEM7NEJBQ0UsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDO3FCQUN0QjtpQkFDRjthQUNGO1lBR0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFdkMsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3ZCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FDZixHQUFHLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtvQkFDZixLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUVoRCxPQUFPLEdBQUcsQ0FBQztnQkFDYixDQUFDLENBQUMsQ0FDSCxDQUFDO2FBQ0g7aUJBQU0sSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzNCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtvQkFDL0IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFFN0MsT0FBTyxHQUFHLENBQUM7Z0JBQ2IsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUVELEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRTNCLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDO1FBRUYsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIG9mIGFzIG9ic2VydmFibGVPZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBDYWNoZVNlcnZpY2UgfSBmcm9tICcuL2NhY2hlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUmV0dXJuVHlwZSB9IGZyb20gJy4vbW9kZWxzL3JldHVybi10eXBlJztcbmltcG9ydCB7IGlzT2JzZXJ2YWJsZSwgaXNQcm9taXNlIH0gZnJvbSAnLi91dGlsJztcblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG5leHBvcnQgZnVuY3Rpb24gQ2FjaGVLZXkodGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgY29uc3QgbWV0YWRhdGFLZXkgPSBgX19jYWNoZV8ke3Byb3BlcnR5S2V5fV9rZXlzYDtcblxuICBBcnJheS5pc0FycmF5KHRhcmdldFttZXRhZGF0YUtleV0pID8gdGFyZ2V0W21ldGFkYXRhS2V5XS5wdXNoKGluZGV4KSA6ICh0YXJnZXRbbWV0YWRhdGFLZXldID0gW2luZGV4XSk7XG59XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuZXhwb3J0IGZ1bmN0aW9uIENhY2hlZChrZXk6IHN0cmluZyk6IGFueSB8IE9ic2VydmFibGU8YW55PiB8IFByb21pc2U8YW55PiB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0OiBGdW5jdGlvbiwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8YW55Pik6IGFueSB8IE9ic2VydmFibGU8YW55PiB8IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgbWV0aG9kOiBGdW5jdGlvbiA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uKC4uLmFyZ3M6IEFycmF5PGFueT4pOiBhbnkgfCBPYnNlcnZhYmxlPGFueT4gfCBQcm9taXNlPGFueT4ge1xuICAgICAgY29uc3QgY2FjaGUgPSBDYWNoZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgY29uc3QgbWV0YWRhdGFLZXkgPSBgX19jYWNoZV8ke3Byb3BlcnR5S2V5fV9rZXlzYDtcbiAgICAgIGNvbnN0IGluZGljZXMgPSB0YXJnZXRbbWV0YWRhdGFLZXldO1xuXG4gICAgICBsZXQga2V5UGFydHMgPSAnJztcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5kaWNlcykpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGluZGljZXMuaW5kZXhPZihpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGtleVBhcnRzID0gIWtleVBhcnRzID8gU3RyaW5nKGFyZ3NbaV0pIDogYCR7a2V5UGFydHN9XyR7U3RyaW5nKGFyZ3NbaV0pfWA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBjYWNoZUtleSA9ICFrZXlQYXJ0cyA/IGtleSA6IGAke2tleX1fJHtrZXlQYXJ0c31gO1xuXG4gICAgICBjYWNoZUtleSA9IENhY2hlU2VydmljZS5ub3JtYWxpemVLZXkoY2FjaGVLZXkpO1xuXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmICghY2FjaGUgfHwgIWNhY2hlS2V5KSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FjaGUuaGFzKGNhY2hlS2V5KSkge1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXRXaXRoTWV0YWRhdGEoY2FjaGVLZXkpO1xuXG4gICAgICAgIGlmIChjYWNoZWQgJiYgY2FjaGVkLmRhdGEpIHtcbiAgICAgICAgICBzd2l0Y2ggKGNhY2hlZC5yZXR1cm5UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIFJldHVyblR5cGUuT2JzZXJ2YWJsZTpcbiAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGVPZihjYWNoZWQuZGF0YSk7XG4gICAgICAgICAgICBjYXNlIFJldHVyblR5cGUuUHJvbWlzZTpcbiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjYWNoZWQuZGF0YSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkLmRhdGE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgY29uc3QgdmFsdWUgPSBtZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG5cbiAgICAgIGlmIChpc09ic2VydmFibGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5waXBlKFxuICAgICAgICAgIG1hcCgocmVzOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgcmVzLCBSZXR1cm5UeXBlLk9ic2VydmFibGUpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSkudGhlbigocmVzOiBhbnkpID0+IHtcbiAgICAgICAgICBjYWNoZS5zZXQoY2FjaGVLZXksIHJlcywgUmV0dXJuVHlwZS5Qcm9taXNlKTtcblxuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjYWNoZS5zZXQoY2FjaGVLZXksIHZhbHVlKTtcblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgfTtcbn1cbiJdfQ==