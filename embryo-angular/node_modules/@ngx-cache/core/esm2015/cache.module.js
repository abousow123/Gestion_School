import { InjectionToken, Injector, NgModule, Optional, PLATFORM_ID, SkipSelf } from '@angular/core';
import { CacheLoader, CacheStaticLoader } from './cache.loader';
import { CacheService } from './cache.service';
import * as i0 from "@angular/core";
export const STORAGE = new InjectionToken('STORAGE');
export const cacheFactory = () => new CacheStaticLoader();
export const cacheServiceFactory = (loader, platformId, injector) => new CacheService(loader, platformId, injector);
export class CacheModule {
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('CacheModule already loaded; import in root module only.');
        }
    }
    static forRoot(configuredProvider = {
        provide: CacheLoader,
        useFactory: cacheFactory
    }) {
        return {
            ngModule: CacheModule,
            providers: [
                configuredProvider,
                {
                    provide: CacheService,
                    useFactory: cacheServiceFactory,
                    deps: [CacheLoader, PLATFORM_ID, Injector]
                }
            ]
        };
    }
}
CacheModule.ɵmod = i0.ɵɵdefineNgModule({ type: CacheModule });
CacheModule.ɵinj = i0.ɵɵdefineInjector({ factory: function CacheModule_Factory(t) { return new (t || CacheModule)(i0.ɵɵinject(CacheModule, 12)); } });
(function () { i0.ɵsetClassMetadata(CacheModule, [{
        type: NgModule
    }], function () { return [{ type: CacheModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1jYWNoZS9jb3JlLyIsInNvdXJjZXMiOlsiY2FjaGUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekgsT0FBTyxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFHL0MsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLElBQUksY0FBYyxDQUFVLFNBQVMsQ0FBQyxDQUFDO0FBRTlELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLGlCQUFpQixFQUFFLENBQUM7QUFFMUQsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxNQUFtQixFQUFFLFVBQWUsRUFBRSxRQUFrQixFQUFFLEVBQUUsQ0FDOUYsSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUdqRCxNQUFNLE9BQU8sV0FBVztJQW9CdEIsWUFBb0MsWUFBMEI7UUFDNUQsSUFBSSxZQUFZLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFDO1NBQzVFO0lBQ0gsQ0FBQztJQXZCRCxNQUFNLENBQUMsT0FBTyxDQUNaLHFCQUEwQjtRQUN4QixPQUFPLEVBQUUsV0FBVztRQUNwQixVQUFVLEVBQUUsWUFBWTtLQUN6QjtRQUVELE9BQU87WUFDTCxRQUFRLEVBQUUsV0FBVztZQUNyQixTQUFTLEVBQUU7Z0JBQ1Qsa0JBQWtCO2dCQUNsQjtvQkFDRSxPQUFPLEVBQUUsWUFBWTtvQkFDckIsVUFBVSxFQUFFLG1CQUFtQjtvQkFDL0IsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUM7aUJBQzNDO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7K0NBbEJVLFdBQVc7cUdBQVgsV0FBVyxjQW9CNkIsV0FBVztvQ0FwQm5ELFdBQVc7Y0FEdkIsUUFBUTtzQ0FxQjRDLFdBQVc7c0JBQWpELFFBQVE7O3NCQUFJLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0b3IsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlLCBPcHRpb25hbCwgUExBVEZPUk1fSUQsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENhY2hlTG9hZGVyLCBDYWNoZVN0YXRpY0xvYWRlciB9IGZyb20gJy4vY2FjaGUubG9hZGVyJztcbmltcG9ydCB7IENhY2hlU2VydmljZSB9IGZyb20gJy4vY2FjaGUuc2VydmljZSc7XG5pbXBvcnQgeyBTdG9yYWdlIH0gZnJvbSAnLi9zdG9yYWdlJztcblxuZXhwb3J0IGNvbnN0IFNUT1JBR0UgPSBuZXcgSW5qZWN0aW9uVG9rZW48U3RvcmFnZT4oJ1NUT1JBR0UnKTtcblxuZXhwb3J0IGNvbnN0IGNhY2hlRmFjdG9yeSA9ICgpID0+IG5ldyBDYWNoZVN0YXRpY0xvYWRlcigpO1xuXG5leHBvcnQgY29uc3QgY2FjaGVTZXJ2aWNlRmFjdG9yeSA9IChsb2FkZXI6IENhY2hlTG9hZGVyLCBwbGF0Zm9ybUlkOiBhbnksIGluamVjdG9yOiBJbmplY3RvcikgPT5cbiAgbmV3IENhY2hlU2VydmljZShsb2FkZXIsIHBsYXRmb3JtSWQsIGluamVjdG9yKTtcblxuQE5nTW9kdWxlKClcbmV4cG9ydCBjbGFzcyBDYWNoZU1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KFxuICAgIGNvbmZpZ3VyZWRQcm92aWRlcjogYW55ID0ge1xuICAgICAgcHJvdmlkZTogQ2FjaGVMb2FkZXIsXG4gICAgICB1c2VGYWN0b3J5OiBjYWNoZUZhY3RvcnlcbiAgICB9XG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Q2FjaGVNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IENhY2hlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIGNvbmZpZ3VyZWRQcm92aWRlcixcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IENhY2hlU2VydmljZSxcbiAgICAgICAgICB1c2VGYWN0b3J5OiBjYWNoZVNlcnZpY2VGYWN0b3J5LFxuICAgICAgICAgIGRlcHM6IFtDYWNoZUxvYWRlciwgUExBVEZPUk1fSUQsIEluamVjdG9yXVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZT86IENhY2hlTW9kdWxlKSB7XG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWNoZU1vZHVsZSBhbHJlYWR5IGxvYWRlZDsgaW1wb3J0IGluIHJvb3QgbW9kdWxlIG9ubHkuJyk7XG4gICAgfVxuICB9XG59XG4iXX0=