/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { isString, isNumber, isFunction } from './toasta.utils';
/**
 * Options to configure a new Toast
 */
var ToastOptions = /** @class */ (function () {
    function ToastOptions() {
    }
    ToastOptions.decorators = [
        { type: Injectable }
    ];
    return ToastOptions;
}());
export { ToastOptions };
if (false) {
    /** @type {?} */
    ToastOptions.prototype.title;
    /** @type {?} */
    ToastOptions.prototype.msg;
    /** @type {?} */
    ToastOptions.prototype.showClose;
    /** @type {?} */
    ToastOptions.prototype.showDuration;
    /** @type {?} */
    ToastOptions.prototype.theme;
    /** @type {?} */
    ToastOptions.prototype.timeout;
    /** @type {?} */
    ToastOptions.prototype.onAdd;
    /** @type {?} */
    ToastOptions.prototype.onRemove;
}
/**
 * Structrure of a created Toast
 */
var ToastData = /** @class */ (function () {
    function ToastData() {
    }
    ToastData.decorators = [
        { type: Injectable }
    ];
    return ToastData;
}());
export { ToastData };
if (false) {
    /** @type {?} */
    ToastData.prototype.id;
    /** @type {?} */
    ToastData.prototype.title;
    /** @type {?} */
    ToastData.prototype.msg;
    /** @type {?} */
    ToastData.prototype.showClose;
    /** @type {?} */
    ToastData.prototype.showDuration;
    /** @type {?} */
    ToastData.prototype.type;
    /** @type {?} */
    ToastData.prototype.theme;
    /** @type {?} */
    ToastData.prototype.timeout;
    /** @type {?} */
    ToastData.prototype.onAdd;
    /** @type {?} */
    ToastData.prototype.onRemove;
    /** @type {?} */
    ToastData.prototype.onClick;
}
/**
 * Default configuration for all toasts and toasta container
 */
var ToastaConfig = /** @class */ (function () {
    function ToastaConfig() {
        // Maximum number of toasties to show at once
        this.limit = 5;
        // Whether to show the 'X' icon to close the toast
        this.showClose = true;
        // Whether to show a progress bar at the bottom of the notification
        this.showDuration = true;
        // The window position where the toast pops up
        this.position = 'bottom-right';
        // How long (in miliseconds) the toasta shows before it's removed. Set to null/0 to turn off.
        this.timeout = 5000;
        // What theme to use
        this.theme = 'default';
    }
    ToastaConfig.decorators = [
        { type: Injectable }
    ];
    return ToastaConfig;
}());
export { ToastaConfig };
if (false) {
    /** @type {?} */
    ToastaConfig.prototype.limit;
    /** @type {?} */
    ToastaConfig.prototype.showClose;
    /** @type {?} */
    ToastaConfig.prototype.showDuration;
    /** @type {?} */
    ToastaConfig.prototype.position;
    /** @type {?} */
    ToastaConfig.prototype.timeout;
    /** @type {?} */
    ToastaConfig.prototype.theme;
}
/** @enum {number} */
var ToastaEventType = {
    ADD: 0,
    CLEAR: 1,
    CLEAR_ALL: 2,
};
export { ToastaEventType };
ToastaEventType[ToastaEventType.ADD] = 'ADD';
ToastaEventType[ToastaEventType.CLEAR] = 'CLEAR';
ToastaEventType[ToastaEventType.CLEAR_ALL] = 'CLEAR_ALL';
var ToastaEvent = /** @class */ (function () {
    function ToastaEvent(type, value) {
        this.type = type;
        this.value = value;
    }
    return ToastaEvent;
}());
export { ToastaEvent };
if (false) {
    /** @type {?} */
    ToastaEvent.prototype.type;
    /** @type {?} */
    ToastaEvent.prototype.value;
}
/**
 * @param {?} config
 * @return {?}
 */
export function toastaServiceFactory(config) {
    return new ToastaService(config);
}
/**
 * Toasta service helps create different kinds of Toasts
 */
var ToastaService = /** @class */ (function () {
    function ToastaService(config) {
        this.config = config;
        // Init the counter
        this.uniqueCounter = 0;
        // ToastData event emitter
        // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();
        // Clear event emitter
        // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();
        this.eventSource = new Subject();
        this.events = this.eventSource.asObservable();
    }
    /**
     * Get list of toats
     */
    // getToasts(): Observable<ToastData> {
    //   return this.toastsEmitter.asObservable();
    // }
    // getClear(): Observable<number> {
    //   return this.clearEmitter.asObservable();
    // }
    /**
     * Create Toast of a default type
     */
    /**
       * Get list of toats
       */
    // getToasts(): Observable<ToastData> {
    //   return this.toastsEmitter.asObservable();
    // }
    // getClear(): Observable<number> {
    //   return this.clearEmitter.asObservable();
    // }
    /**
     * Create Toast of a default type
     * @param {?} options
     * @return {?}
     */
    ToastaService.prototype.default = /**
       * Get list of toats
       */
    // getToasts(): Observable<ToastData> {
    //   return this.toastsEmitter.asObservable();
    // }
    // getClear(): Observable<number> {
    //   return this.clearEmitter.asObservable();
    // }
    /**
     * Create Toast of a default type
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.add(options, 'default');
    };
    /**
     * Create Toast of info type
     * @param options Individual toasta config overrides
     */
    /**
     * Create Toast of info type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    ToastaService.prototype.info = /**
     * Create Toast of info type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    function (options) {
        this.add(options, 'info');
    };
    /**
     * Create Toast of success type
     * @param options Individual toasta config overrides
     */
    /**
     * Create Toast of success type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    ToastaService.prototype.success = /**
     * Create Toast of success type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    function (options) {
        this.add(options, 'success');
    };
    /**
     * Create Toast of wait type
     * @param options Individual toasta config overrides
     */
    /**
     * Create Toast of wait type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    ToastaService.prototype.wait = /**
     * Create Toast of wait type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    function (options) {
        this.add(options, 'wait');
    };
    /**
     * Create Toast of error type
     * @param options Individual toasta config overrides
     */
    /**
     * Create Toast of error type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    ToastaService.prototype.error = /**
     * Create Toast of error type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    function (options) {
        this.add(options, 'error');
    };
    /**
     * Create Toast of warning type
     * @param options Individual toasta config overrides
     */
    /**
     * Create Toast of warning type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    ToastaService.prototype.warning = /**
     * Create Toast of warning type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    function (options) {
        this.add(options, 'warning');
    };
    // Add a new toast item
    // Add a new toast item
    /**
     * @private
     * @param {?} options
     * @param {?} type
     * @return {?}
     */
    ToastaService.prototype.add = 
    // Add a new toast item
    /**
     * @private
     * @param {?} options
     * @param {?} type
     * @return {?}
     */
    function (options, type) {
        /** @type {?} */
        var toastaOptions;
        if (isString(options) && options !== '' || isNumber(options)) {
            toastaOptions = (/** @type {?} */ ({
                title: options.toString()
            }));
        }
        else {
            toastaOptions = (/** @type {?} */ (options));
        }
        if (!toastaOptions || !toastaOptions.title && !toastaOptions.msg) {
            throw new Error('ngx-toasta: No toast title or message specified!');
        }
        type = type || 'default';
        // Set a unique counter for an id
        this.uniqueCounter++;
        // Set the local vs global config items
        /** @type {?} */
        var showClose = this._checkConfigItem(this.config, toastaOptions, 'showClose');
        // Set the local vs global config items
        /** @type {?} */
        var showDuration = this._checkConfigItem(this.config, toastaOptions, 'showDuration');
        // If we have a theme set, make sure it's a valid one
        /** @type {?} */
        var theme;
        if (toastaOptions.theme) {
            theme = ToastaService.THEMES.indexOf(toastaOptions.theme) > -1 ? toastaOptions.theme : this.config.theme;
        }
        else {
            theme = this.config.theme;
        }
        /** @type {?} */
        var toast = (/** @type {?} */ ({
            id: this.uniqueCounter,
            title: toastaOptions.title,
            msg: toastaOptions.msg,
            showClose: showClose,
            showDuration: showDuration,
            type: 'toasta-type-' + type,
            theme: 'toasta-theme-' + theme,
            onAdd: toastaOptions.onAdd && isFunction(toastaOptions.onAdd) ? toastaOptions.onAdd : null,
            onRemove: toastaOptions.onRemove && isFunction(toastaOptions.onRemove) ? toastaOptions.onRemove : null
        }));
        // If there's a timeout individually or globally, set the toast to timeout
        // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.
        toast.timeout = toastaOptions.hasOwnProperty('timeout') ? toastaOptions.timeout : this.config.timeout;
        // Push up a new toast item
        // this.toastsSubscriber.next(toast);
        // this.toastsEmitter.next(toast);
        this.emitEvent(new ToastaEvent(ToastaEventType.ADD, toast));
        // If we have a onAdd function, call it here
        if (toastaOptions.onAdd && isFunction(toastaOptions.onAdd)) {
            toastaOptions.onAdd.call(this, toast);
        }
    };
    // Clear all toasts
    // Clear all toasts
    /**
     * @return {?}
     */
    ToastaService.prototype.clearAll = 
    // Clear all toasts
    /**
     * @return {?}
     */
    function () {
        // this.clearEmitter.next(null);
        this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR_ALL));
    };
    // Clear the specific one
    // Clear the specific one
    /**
     * @param {?} id
     * @return {?}
     */
    ToastaService.prototype.clear = 
    // Clear the specific one
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        // this.clearEmitter.next(id);
        this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR, id));
    };
    // Checks whether the local option is set, if not,
    // checks the global config
    // Checks whether the local option is set, if not,
    // checks the global config
    /**
     * @private
     * @param {?} config
     * @param {?} options
     * @param {?} property
     * @return {?}
     */
    ToastaService.prototype._checkConfigItem = 
    // Checks whether the local option is set, if not,
    // checks the global config
    /**
     * @private
     * @param {?} config
     * @param {?} options
     * @param {?} property
     * @return {?}
     */
    function (config, options, property) {
        if (options[property] === false) {
            return false;
        }
        else if (!options[property]) {
            return config[property];
        }
        else {
            return true;
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ToastaService.prototype.emitEvent = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.eventSource) {
            // Push up a new event
            this.eventSource.next(event);
        }
    };
    // Allowed THEMES
    ToastaService.THEMES = ['default', 'material', 'bootstrap'];
    ToastaService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ToastaService.ctorParameters = function () { return [
        { type: ToastaConfig }
    ]; };
    return ToastaService;
}());
export { ToastaService };
if (false) {
    /** @type {?} */
    ToastaService.THEMES;
    /** @type {?} */
    ToastaService.prototype.uniqueCounter;
    /**
     * @type {?}
     * @private
     */
    ToastaService.prototype.eventSource;
    /** @type {?} */
    ToastaService.prototype.events;
    /**
     * @type {?}
     * @private
     */
    ToastaService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,