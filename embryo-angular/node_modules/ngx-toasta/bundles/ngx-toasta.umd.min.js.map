{"version":3,"sources":["ng://ngx-toasta/lib/toasta.utils.ts","ng://ngx-toasta/lib/toasta.service.ts","ng://ngx-toasta/lib/toasta.component.ts","ng://ngx-toasta/lib/toast.component.ts","ng://ngx-toasta/lib/shared.ts","ng://ngx-toasta/lib/toasta.module.ts"],"names":["isFunction","obj","ToastOptions","Injectable","ToastData","ToastaConfig","this","limit","showClose","showDuration","position","timeout","theme","ADD","CLEAR","CLEAR_ALL","ToastaEvent","type","value","toastaServiceFactory","config","ToastaService","uniqueCounter","eventSource","Subject","events","asObservable","prototype","default","options","add","info","success","wait","error","warning","toastaOptions","isNumber","title","toString","msg","Error","_checkConfigItem","THEMES","indexOf","toast","id","onAdd","onRemove","hasOwnProperty","emitEvent","ToastaEventType","call","clearAll","clear","property","event","next","ToastaComponent","toastaService","_position","toasts","Object","defineProperty","notFound","i","POSITIONS","length","ngOnInit","_this","subscribe","closeToast","shift","push","_setTimeout","forEach","key","splice","window","setTimeout","Component","args","selector","template","Input","ToastComponent","progressPercent","startTime","performance","now","closeToastEvent","EventEmitter","ngAfterViewInit","progressInterval","setInterval","clearInterval","close","$event","preventDefault","Output","SafeHtmlPipe","domSanitized","transform","_i","arguments","bypassSecurityTrustHtml","Pipe","name","DomSanitizer","providers","provide","useFactory","deps","ToastaModule","forRoot","ngModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["\r\n/**\r\n * Check and return true if an object is type of string\r\n * @param obj Analyse has to object the string type\r\n * @return result of analysis\r\n */\r\nexport function isString(obj: any): boolean {\r\n  return typeof obj === 'string';\r\n}\r\n\r\n/**\r\n * Check and return true if an object is type of number\r\n * @param obj Analyse has to object the boolean type\r\n * @return result of analysis\r\n */\r\nexport function isNumber(obj: any): boolean {\r\n  return typeof obj === 'number';\r\n}\r\n\r\n/**\r\n * Check and return true if an object is type of Function\r\n * @param obj Analyse has to object the function type\r\n * @return result of analysis\r\n */\r\nexport function isFunction(obj: any): boolean {\r\n  return typeof obj === 'function';\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { isString, isNumber, isFunction } from './toasta.utils';\r\n\r\n\r\n\r\n/**\r\n * Options to configure a new Toast\r\n */\r\n@Injectable()\r\nexport class ToastOptions {\r\n  title: string;\r\n  msg?: string;\r\n  showClose?: boolean;\r\n  showDuration?: boolean;\r\n  theme?: string;\r\n  timeout?: number;\r\n  onAdd?: Function;\r\n  onRemove?: Function;\r\n}\r\n\r\n/**\r\n * Structrure of a created Toast\r\n */\r\n@Injectable()\r\nexport class ToastData {\r\n  id: number;\r\n  title: string;\r\n  msg: string;\r\n  showClose: boolean;\r\n  showDuration: boolean;\r\n  type: string;\r\n  theme: string;\r\n  timeout: number;\r\n  onAdd: Function;\r\n  onRemove: Function;\r\n  onClick: Function;\r\n}\r\n\r\n/**\r\n * Default configuration for all toasts and toasta container\r\n */\r\n@Injectable()\r\nexport class ToastaConfig {\r\n\r\n  // Maximum number of toasties to show at once\r\n  limit = 5;\r\n\r\n  // Whether to show the 'X' icon to close the toast\r\n  showClose = true;\r\n\r\n  // Whether to show a progress bar at the bottom of the notification\r\n  showDuration = true;\r\n\r\n  // The window position where the toast pops up\r\n  position: 'bottom-right' | 'bottom-left' | 'bottom-center' | 'bottom-fullwidth' | 'top-right' | 'top-left' | 'top-center' | 'top-fullwidth' | 'center-center' = 'bottom-right';\r\n\r\n  // How long (in miliseconds) the toasta shows before it's removed. Set to null/0 to turn off.\r\n  timeout = 5000;\r\n\r\n  // What theme to use\r\n  theme: 'default' | 'material' | 'bootstrap' = 'default';\r\n}\r\n\r\nexport enum ToastaEventType {\r\n  ADD,\r\n  CLEAR,\r\n  CLEAR_ALL\r\n}\r\n\r\nexport class ToastaEvent {\r\n  constructor(public type: ToastaEventType, public value?: any) { }\r\n}\r\n\r\nexport function toastaServiceFactory(config: ToastaConfig): ToastaService {\r\n  return new ToastaService(config);\r\n}\r\n\r\n/**\r\n * Toasta service helps create different kinds of Toasts\r\n */\r\n@Injectable()\r\nexport class ToastaService {\r\n  // Allowed THEMES\r\n  static THEMES: Array<string> = ['default', 'material', 'bootstrap'];\r\n  // Init the counter\r\n  uniqueCounter = 0;\r\n  // ToastData event emitter\r\n  // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();\r\n  // Clear event emitter\r\n  // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  private eventSource: Subject<ToastaEvent> = new Subject<ToastaEvent>();\r\n  public events: Observable<ToastaEvent> = this.eventSource.asObservable();\r\n\r\n  constructor(private config: ToastaConfig) { }\r\n\r\n  /**\r\n   * Get list of toats\r\n   */\r\n  // getToasts(): Observable<ToastData> {\r\n  //   return this.toastsEmitter.asObservable();\r\n  // }\r\n\r\n  // getClear(): Observable<number> {\r\n  //   return this.clearEmitter.asObservable();\r\n  // }\r\n\r\n  /**\r\n   * Create Toast of a default type\r\n   */\r\n  default(options: ToastOptions | string | number): void {\r\n    this.add(options, 'default');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of info type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  info(options: ToastOptions | string | number): void {\r\n    this.add(options, 'info');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of success type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  success(options: ToastOptions | string | number): void {\r\n    this.add(options, 'success');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of wait type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  wait(options: ToastOptions | string | number): void {\r\n    this.add(options, 'wait');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of error type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  error(options: ToastOptions | string | number): void {\r\n    this.add(options, 'error');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of warning type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  warning(options: ToastOptions | string | number): void {\r\n    this.add(options, 'warning');\r\n  }\r\n\r\n\r\n  // Add a new toast item\r\n  private add(options: ToastOptions | string | number, type: string) {\r\n    let toastaOptions: ToastOptions;\r\n\r\n    if (isString(options) && options !== '' || isNumber(options)) {\r\n      toastaOptions = {\r\n        title: options.toString()\r\n      } as ToastOptions;\r\n    } else {\r\n      toastaOptions = options as ToastOptions;\r\n    }\r\n\r\n    if (!toastaOptions || !toastaOptions.title && !toastaOptions.msg) {\r\n      throw new Error('ngx-toasta: No toast title or message specified!');\r\n    }\r\n\r\n    type = type || 'default';\r\n\r\n    // Set a unique counter for an id\r\n    this.uniqueCounter++;\r\n\r\n    // Set the local vs global config items\r\n    const showClose = this._checkConfigItem(this.config, toastaOptions, 'showClose');\r\n\r\n    // Set the local vs global config items\r\n    const showDuration = this._checkConfigItem(this.config, toastaOptions, 'showDuration');\r\n\r\n    // If we have a theme set, make sure it's a valid one\r\n    let theme: string;\r\n    if (toastaOptions.theme) {\r\n      theme = ToastaService.THEMES.indexOf(toastaOptions.theme) > -1 ? toastaOptions.theme : this.config.theme;\r\n    } else {\r\n      theme = this.config.theme;\r\n    }\r\n\r\n    const toast: ToastData = {\r\n      id: this.uniqueCounter,\r\n      title: toastaOptions.title,\r\n      msg: toastaOptions.msg,\r\n      showClose,\r\n      showDuration,\r\n      type: 'toasta-type-' + type,\r\n      theme: 'toasta-theme-' + theme,\r\n      onAdd: toastaOptions.onAdd && isFunction(toastaOptions.onAdd) ? toastaOptions.onAdd : null,\r\n      onRemove: toastaOptions.onRemove && isFunction(toastaOptions.onRemove) ? toastaOptions.onRemove : null\r\n    } as ToastData;\r\n\r\n    // If there's a timeout individually or globally, set the toast to timeout\r\n    // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.\r\n    toast.timeout = toastaOptions.hasOwnProperty('timeout') ? toastaOptions.timeout : this.config.timeout;\r\n\r\n    // Push up a new toast item\r\n    // this.toastsSubscriber.next(toast);\r\n    // this.toastsEmitter.next(toast);\r\n    this.emitEvent(new ToastaEvent(ToastaEventType.ADD, toast));\r\n    // If we have a onAdd function, call it here\r\n    if (toastaOptions.onAdd && isFunction(toastaOptions.onAdd)) {\r\n      toastaOptions.onAdd.call(this, toast);\r\n    }\r\n  }\r\n\r\n  // Clear all toasts\r\n  clearAll() {\r\n    // this.clearEmitter.next(null);\r\n    this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR_ALL));\r\n  }\r\n\r\n  // Clear the specific one\r\n  clear(id: number) {\r\n    // this.clearEmitter.next(id);\r\n    this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR, id));\r\n  }\r\n\r\n  // Checks whether the local option is set, if not,\r\n  // checks the global config\r\n  private _checkConfigItem(config: any, options: any, property: string) {\r\n    if (options[property] === false) {\r\n      return false;\r\n    } else if (!options[property]) {\r\n      return config[property];\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  private emitEvent(event: ToastaEvent) {\r\n    if (this.eventSource) {\r\n      // Push up a new event\r\n      this.eventSource.next(event);\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { isFunction } from './toasta.utils';\r\nimport { ToastaService, ToastData, ToastaConfig, ToastaEvent, ToastaEventType } from './toasta.service';\r\n\r\n/**\r\n * Toasta is container for Toast components\r\n */\r\n@Component({\r\n  selector: 'ngx-toasta',\r\n  template: `\r\n    <div id=\"toasta\" [ngClass]=\"[position]\">\r\n        <ngx-toast *ngFor=\"let toast of toasts\" [toast]=\"toast\" (closeToast)=\"closeToast(toast)\"></ngx-toast>\r\n    </div>`\r\n})\r\nexport class ToastaComponent implements OnInit {\r\n  /**\r\n   * Set of constants defines position of Toasta on the page.\r\n   */\r\n  static POSITIONS: Array<String> = ['bottom-right', 'bottom-left', 'bottom-center', 'bottom-fullwidth', 'top-right', 'top-left', 'top-center', 'top-fullwidth', 'center-center'];\r\n\r\n  private _position = '';\r\n  // The window position where the toast pops up. Possible values:\r\n  // - bottom-right (default value from ToastConfig)\r\n  // - bottom-left\r\n  // - bottom-center\r\n  // - bottom-fullwidth\r\n  // - top-right\r\n  // - top-left\r\n  // - top-center\r\n  // - top-fullwidth\r\n  // - center-center\r\n  @Input()\r\n  set position(value: string) {\r\n    if (value) {\r\n      let notFound = true;\r\n      for (let i = 0; i < ToastaComponent.POSITIONS.length; i++) {\r\n        if (ToastaComponent.POSITIONS[i] === value) {\r\n          notFound = false;\r\n          break;\r\n        }\r\n      }\r\n      if (notFound) {\r\n        // Position was wrong - clear it here to use the one from config.\r\n        value = this.config.position;\r\n      }\r\n    } else {\r\n      value = this.config.position;\r\n    }\r\n    this._position = 'toasta-position-' + value;\r\n  }\r\n\r\n  get position(): string {\r\n    return this._position;\r\n  }\r\n\r\n  // The storage for toasts.\r\n  toasts: Array<ToastData> = [];\r\n\r\n  constructor(private config: ToastaConfig, private toastaService: ToastaService) {\r\n    // Initialise position\r\n    this.position = '';\r\n  }\r\n\r\n  /**\r\n   * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\r\n   * first time, and before any of its children have been checked. It is invoked only once when the\r\n   * directive is instantiated.\r\n   */\r\n  ngOnInit(): any {\r\n    // We listen events from our service\r\n    this.toastaService.events.subscribe((event: ToastaEvent) => {\r\n      if (event.type === ToastaEventType.ADD) {\r\n        // Add the new one\r\n        const toast: ToastData = event.value;\r\n        this.add(toast);\r\n      } else if (event.type === ToastaEventType.CLEAR) {\r\n        // Clear the one by number\r\n        const id: number = event.value;\r\n        this.clear(id);\r\n      } else if (event.type === ToastaEventType.CLEAR_ALL) {\r\n        // Lets clear all toasts\r\n        this.clearAll();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Event listener of 'closeToast' event comes from ToastaComponent.\r\n   * This method removes ToastComponent assosiated with this Toast.\r\n   */\r\n  closeToast(toast: ToastData) {\r\n    this.clear(toast.id);\r\n  }\r\n\r\n  /**\r\n   * Add new Toast\r\n   */\r\n  add(toast: ToastData) {\r\n    // If we've gone over our limit, remove the earliest\r\n    // one from the array\r\n    if (this.config.limit && this.toasts.length >= this.config.limit) {\r\n      this.toasts.shift();\r\n    }\r\n    // Add toasta to array\r\n    this.toasts.push(toast);\r\n    //\r\n    // If there's a timeout individually or globally,\r\n    // set the toast to timeout\r\n    if (+toast.timeout) {\r\n      this._setTimeout(toast);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear individual toast by id\r\n   * @param id is unique identifier of Toast\r\n   */\r\n  clear(id: number) {\r\n    if (id) {\r\n      this.toasts.forEach((value: any, key: number) => {\r\n        if (value.id === id) {\r\n          if (value.onRemove && isFunction(value.onRemove)) {\r\n            value.onRemove.call(this, value);\r\n          }\r\n          this.toasts.splice(key, 1);\r\n        }\r\n      });\r\n    } else {\r\n      throw new Error('Please provide id of Toast to close');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all toasts\r\n   */\r\n  clearAll() {\r\n    this.toasts.forEach((value: any, key: number) => {\r\n      if (value.onRemove && isFunction(value.onRemove)) {\r\n        value.onRemove.call(this, value);\r\n      }\r\n    });\r\n    this.toasts = [];\r\n  }\r\n\r\n  /**\r\n   * Custom setTimeout function for specific setTimeouts on individual toasts.\r\n   */\r\n  private _setTimeout(toast: ToastData) {\r\n    window.setTimeout(() => {\r\n      this.clear(toast.id);\r\n    }, toast.timeout);\r\n  }\r\n}\r\n","import { AfterViewInit, Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { ToastData } from './toasta.service';\r\n\r\n/**\r\n * A Toast component shows message with title and close button.\r\n */\r\n@Component({\r\n  selector: 'ngx-toast',\r\n  template: `\r\n        <div class=\"toast\" [ngClass]=\"[toast.type, toast.theme]\">\r\n            <div *ngIf=\"toast.showClose\" class=\"close-button\" (click)=\"close($event)\"></div>\r\n            <div *ngIf=\"toast.title || toast.msg\" class=\"toast-text\">\r\n                <span *ngIf=\"toast.title\" class=\"toast-title\" [innerHTML]=\"toast.title | safeHtml\"></span>\r\n                <br *ngIf=\"toast.title && toast.msg\" />\r\n                <span *ngIf=\"toast.msg\" class=\"toast-msg\" [innerHtml]=\"toast.msg | safeHtml\"></span>\r\n            </div>\r\n            <div class=\"durationbackground\" *ngIf=\"toast.showDuration && toast.timeout > 0\">\r\n                <div class=\"durationbar\" [style.width.%]=\"progressPercent\">\r\n                </div>\r\n            </div>\r\n        </div>`\r\n})\r\nexport class ToastComponent implements AfterViewInit {\r\n\r\n  progressInterval: number;\r\n  progressPercent = 0;\r\n  startTime: number = performance.now();\r\n  @Input() toast: ToastData;\r\n  @Output('closeToast') closeToastEvent = new EventEmitter();\r\n\r\n  ngAfterViewInit() {\r\n    if (this.toast.showDuration && this.toast.timeout > 0) {\r\n      this.progressInterval = window.setInterval(() => {\r\n        this.progressPercent = (100 - ((performance.now() - this.startTime) / this.toast.timeout * 100)); // Descending progress\r\n\r\n        if (this.progressPercent <= 0) {\r\n          clearInterval(this.progressInterval);\r\n        }\r\n      }, 16.7); // 60 fps\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event handler invokes when user clicks on close button.\r\n   * This method emit new event into ToastaContainer to close it.\r\n   */\r\n  close($event: any) {\r\n    $event.preventDefault();\r\n    this.closeToastEvent.next(this.toast);\r\n\r\n    if (this.progressInterval) {\r\n      clearInterval(this.progressInterval);\r\n    }\r\n  }\r\n}\r\n","import { DomSanitizer } from '@angular/platform-browser';\r\nimport { PipeTransform, Pipe } from '@angular/core';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n  constructor(private domSanitized: DomSanitizer) { }\r\n\r\n  transform(value: any, ...args: any[]): any {\r\n    return this.domSanitized.bypassSecurityTrustHtml(value);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\nimport { ToastaComponent } from './toasta.component';\r\nimport { ToastComponent } from './toast.component';\r\nimport { SafeHtmlPipe } from './shared';\r\nimport { ToastaService, ToastaConfig, toastaServiceFactory } from './toasta.service';\r\n\r\nexport let providers = [\r\n  ToastaConfig,\r\n  { provide: ToastaService, useFactory: toastaServiceFactory, deps: [ToastaConfig] }\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ToastComponent, ToastaComponent, SafeHtmlPipe],\r\n  exports: [ToastComponent, ToastaComponent],\r\n  providers\r\n})\r\nexport class ToastaModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ToastaModule,\r\n      providers\r\n    };\r\n  }\r\n}\r\n"]}