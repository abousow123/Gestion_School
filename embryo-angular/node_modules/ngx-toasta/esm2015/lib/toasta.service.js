/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { isString, isNumber, isFunction } from './toasta.utils';
/**
 * Options to configure a new Toast
 */
export class ToastOptions {
}
ToastOptions.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    ToastOptions.prototype.title;
    /** @type {?} */
    ToastOptions.prototype.msg;
    /** @type {?} */
    ToastOptions.prototype.showClose;
    /** @type {?} */
    ToastOptions.prototype.showDuration;
    /** @type {?} */
    ToastOptions.prototype.theme;
    /** @type {?} */
    ToastOptions.prototype.timeout;
    /** @type {?} */
    ToastOptions.prototype.onAdd;
    /** @type {?} */
    ToastOptions.prototype.onRemove;
}
/**
 * Structrure of a created Toast
 */
export class ToastData {
}
ToastData.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    ToastData.prototype.id;
    /** @type {?} */
    ToastData.prototype.title;
    /** @type {?} */
    ToastData.prototype.msg;
    /** @type {?} */
    ToastData.prototype.showClose;
    /** @type {?} */
    ToastData.prototype.showDuration;
    /** @type {?} */
    ToastData.prototype.type;
    /** @type {?} */
    ToastData.prototype.theme;
    /** @type {?} */
    ToastData.prototype.timeout;
    /** @type {?} */
    ToastData.prototype.onAdd;
    /** @type {?} */
    ToastData.prototype.onRemove;
    /** @type {?} */
    ToastData.prototype.onClick;
}
/**
 * Default configuration for all toasts and toasta container
 */
export class ToastaConfig {
    constructor() {
        // Maximum number of toasties to show at once
        this.limit = 5;
        // Whether to show the 'X' icon to close the toast
        this.showClose = true;
        // Whether to show a progress bar at the bottom of the notification
        this.showDuration = true;
        // The window position where the toast pops up
        this.position = 'bottom-right';
        // How long (in miliseconds) the toasta shows before it's removed. Set to null/0 to turn off.
        this.timeout = 5000;
        // What theme to use
        this.theme = 'default';
    }
}
ToastaConfig.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    ToastaConfig.prototype.limit;
    /** @type {?} */
    ToastaConfig.prototype.showClose;
    /** @type {?} */
    ToastaConfig.prototype.showDuration;
    /** @type {?} */
    ToastaConfig.prototype.position;
    /** @type {?} */
    ToastaConfig.prototype.timeout;
    /** @type {?} */
    ToastaConfig.prototype.theme;
}
/** @enum {number} */
const ToastaEventType = {
    ADD: 0,
    CLEAR: 1,
    CLEAR_ALL: 2,
};
export { ToastaEventType };
ToastaEventType[ToastaEventType.ADD] = 'ADD';
ToastaEventType[ToastaEventType.CLEAR] = 'CLEAR';
ToastaEventType[ToastaEventType.CLEAR_ALL] = 'CLEAR_ALL';
export class ToastaEvent {
    /**
     * @param {?} type
     * @param {?=} value
     */
    constructor(type, value) {
        this.type = type;
        this.value = value;
    }
}
if (false) {
    /** @type {?} */
    ToastaEvent.prototype.type;
    /** @type {?} */
    ToastaEvent.prototype.value;
}
/**
 * @param {?} config
 * @return {?}
 */
export function toastaServiceFactory(config) {
    return new ToastaService(config);
}
/**
 * Toasta service helps create different kinds of Toasts
 */
export class ToastaService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        // Init the counter
        this.uniqueCounter = 0;
        // ToastData event emitter
        // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();
        // Clear event emitter
        // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();
        this.eventSource = new Subject();
        this.events = this.eventSource.asObservable();
    }
    /**
       * Get list of toats
       */
    // getToasts(): Observable<ToastData> {
    //   return this.toastsEmitter.asObservable();
    // }
    // getClear(): Observable<number> {
    //   return this.clearEmitter.asObservable();
    // }
    /**
     * Create Toast of a default type
     * @param {?} options
     * @return {?}
     */
    default(options) {
        this.add(options, 'default');
    }
    /**
     * Create Toast of info type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    info(options) {
        this.add(options, 'info');
    }
    /**
     * Create Toast of success type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    success(options) {
        this.add(options, 'success');
    }
    /**
     * Create Toast of wait type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    wait(options) {
        this.add(options, 'wait');
    }
    /**
     * Create Toast of error type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    error(options) {
        this.add(options, 'error');
    }
    /**
     * Create Toast of warning type
     * @param {?} options Individual toasta config overrides
     * @return {?}
     */
    warning(options) {
        this.add(options, 'warning');
    }
    // Add a new toast item
    /**
     * @private
     * @param {?} options
     * @param {?} type
     * @return {?}
     */
    add(options, type) {
        /** @type {?} */
        let toastaOptions;
        if (isString(options) && options !== '' || isNumber(options)) {
            toastaOptions = (/** @type {?} */ ({
                title: options.toString()
            }));
        }
        else {
            toastaOptions = (/** @type {?} */ (options));
        }
        if (!toastaOptions || !toastaOptions.title && !toastaOptions.msg) {
            throw new Error('ngx-toasta: No toast title or message specified!');
        }
        type = type || 'default';
        // Set a unique counter for an id
        this.uniqueCounter++;
        // Set the local vs global config items
        /** @type {?} */
        const showClose = this._checkConfigItem(this.config, toastaOptions, 'showClose');
        // Set the local vs global config items
        /** @type {?} */
        const showDuration = this._checkConfigItem(this.config, toastaOptions, 'showDuration');
        // If we have a theme set, make sure it's a valid one
        /** @type {?} */
        let theme;
        if (toastaOptions.theme) {
            theme = ToastaService.THEMES.indexOf(toastaOptions.theme) > -1 ? toastaOptions.theme : this.config.theme;
        }
        else {
            theme = this.config.theme;
        }
        /** @type {?} */
        const toast = (/** @type {?} */ ({
            id: this.uniqueCounter,
            title: toastaOptions.title,
            msg: toastaOptions.msg,
            showClose,
            showDuration,
            type: 'toasta-type-' + type,
            theme: 'toasta-theme-' + theme,
            onAdd: toastaOptions.onAdd && isFunction(toastaOptions.onAdd) ? toastaOptions.onAdd : null,
            onRemove: toastaOptions.onRemove && isFunction(toastaOptions.onRemove) ? toastaOptions.onRemove : null
        }));
        // If there's a timeout individually or globally, set the toast to timeout
        // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.
        toast.timeout = toastaOptions.hasOwnProperty('timeout') ? toastaOptions.timeout : this.config.timeout;
        // Push up a new toast item
        // this.toastsSubscriber.next(toast);
        // this.toastsEmitter.next(toast);
        this.emitEvent(new ToastaEvent(ToastaEventType.ADD, toast));
        // If we have a onAdd function, call it here
        if (toastaOptions.onAdd && isFunction(toastaOptions.onAdd)) {
            toastaOptions.onAdd.call(this, toast);
        }
    }
    // Clear all toasts
    /**
     * @return {?}
     */
    clearAll() {
        // this.clearEmitter.next(null);
        this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR_ALL));
    }
    // Clear the specific one
    /**
     * @param {?} id
     * @return {?}
     */
    clear(id) {
        // this.clearEmitter.next(id);
        this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR, id));
    }
    // Checks whether the local option is set, if not,
    // checks the global config
    /**
     * @private
     * @param {?} config
     * @param {?} options
     * @param {?} property
     * @return {?}
     */
    _checkConfigItem(config, options, property) {
        if (options[property] === false) {
            return false;
        }
        else if (!options[property]) {
            return config[property];
        }
        else {
            return true;
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    emitEvent(event) {
        if (this.eventSource) {
            // Push up a new event
            this.eventSource.next(event);
        }
    }
}
// Allowed THEMES
ToastaService.THEMES = ['default', 'material', 'bootstrap'];
ToastaService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ToastaService.ctorParameters = () => [
    { type: ToastaConfig }
];
if (false) {
    /** @type {?} */
    ToastaService.THEMES;
    /** @type {?} */
    ToastaService.prototype.uniqueCounter;
    /**
     * @type {?}
     * @private
     */
    ToastaService.prototype.eventSource;
    /** @type {?} */
    ToastaService.prototype.events;
    /**
     * @type {?}
     * @private
     */
    ToastaService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,