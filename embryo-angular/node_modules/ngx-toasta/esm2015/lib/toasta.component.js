/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { isFunction } from './toasta.utils';
import { ToastaService, ToastaConfig, ToastaEventType } from './toasta.service';
/**
 * Toasta is container for Toast components
 */
export class ToastaComponent {
    /**
     * @param {?} config
     * @param {?} toastaService
     */
    constructor(config, toastaService) {
        this.config = config;
        this.toastaService = toastaService;
        this._position = '';
        // The storage for toasts.
        this.toasts = [];
        // Initialise position
        this.position = '';
    }
    // The window position where the toast pops up. Possible values:
    // - bottom-right (default value from ToastConfig)
    // - bottom-left
    // - bottom-center
    // - bottom-fullwidth
    // - top-right
    // - top-left
    // - top-center
    // - top-fullwidth
    // - center-center
    /**
     * @param {?} value
     * @return {?}
     */
    set position(value) {
        if (value) {
            /** @type {?} */
            let notFound = true;
            for (let i = 0; i < ToastaComponent.POSITIONS.length; i++) {
                if (ToastaComponent.POSITIONS[i] === value) {
                    notFound = false;
                    break;
                }
            }
            if (notFound) {
                // Position was wrong - clear it here to use the one from config.
                value = this.config.position;
            }
        }
        else {
            value = this.config.position;
        }
        this._position = 'toasta-position-' + value;
    }
    /**
     * @return {?}
     */
    get position() {
        return this._position;
    }
    /**
     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the
     * first time, and before any of its children have been checked. It is invoked only once when the
     * directive is instantiated.
     * @return {?}
     */
    ngOnInit() {
        // We listen events from our service
        this.toastaService.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event.type === ToastaEventType.ADD) {
                // Add the new one
                /** @type {?} */
                const toast = event.value;
                this.add(toast);
            }
            else if (event.type === ToastaEventType.CLEAR) {
                // Clear the one by number
                /** @type {?} */
                const id = event.value;
                this.clear(id);
            }
            else if (event.type === ToastaEventType.CLEAR_ALL) {
                // Lets clear all toasts
                this.clearAll();
            }
        }));
    }
    /**
     * Event listener of 'closeToast' event comes from ToastaComponent.
     * This method removes ToastComponent assosiated with this Toast.
     * @param {?} toast
     * @return {?}
     */
    closeToast(toast) {
        this.clear(toast.id);
    }
    /**
     * Add new Toast
     * @param {?} toast
     * @return {?}
     */
    add(toast) {
        // If we've gone over our limit, remove the earliest
        // one from the array
        if (this.config.limit && this.toasts.length >= this.config.limit) {
            this.toasts.shift();
        }
        // Add toasta to array
        this.toasts.push(toast);
        //
        // If there's a timeout individually or globally,
        // set the toast to timeout
        if (+toast.timeout) {
            this._setTimeout(toast);
        }
    }
    /**
     * Clear individual toast by id
     * @param {?} id is unique identifier of Toast
     * @return {?}
     */
    clear(id) {
        if (id) {
            this.toasts.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            (value, key) => {
                if (value.id === id) {
                    if (value.onRemove && isFunction(value.onRemove)) {
                        value.onRemove.call(this, value);
                    }
                    this.toasts.splice(key, 1);
                }
            }));
        }
        else {
            throw new Error('Please provide id of Toast to close');
        }
    }
    /**
     * Clear all toasts
     * @return {?}
     */
    clearAll() {
        this.toasts.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            if (value.onRemove && isFunction(value.onRemove)) {
                value.onRemove.call(this, value);
            }
        }));
        this.toasts = [];
    }
    /**
     * Custom setTimeout function for specific setTimeouts on individual toasts.
     * @private
     * @param {?} toast
     * @return {?}
     */
    _setTimeout(toast) {
        window.setTimeout((/**
         * @return {?}
         */
        () => {
            this.clear(toast.id);
        }), toast.timeout);
    }
}
/**
 * Set of constants defines position of Toasta on the page.
 */
ToastaComponent.POSITIONS = ['bottom-right', 'bottom-left', 'bottom-center', 'bottom-fullwidth', 'top-right', 'top-left', 'top-center', 'top-fullwidth', 'center-center'];
ToastaComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-toasta',
                template: `
    <div id="toasta" [ngClass]="[position]">
        <ngx-toast *ngFor="let toast of toasts" [toast]="toast" (closeToast)="closeToast(toast)"></ngx-toast>
    </div>`
            }] }
];
/** @nocollapse */
ToastaComponent.ctorParameters = () => [
    { type: ToastaConfig },
    { type: ToastaService }
];
ToastaComponent.propDecorators = {
    position: [{ type: Input }]
};
if (false) {
    /**
     * Set of constants defines position of Toasta on the page.
     * @type {?}
     */
    ToastaComponent.POSITIONS;
    /**
     * @type {?}
     * @private
     */
    ToastaComponent.prototype._position;
    /** @type {?} */
    ToastaComponent.prototype.toasts;
    /**
     * @type {?}
     * @private
     */
    ToastaComponent.prototype.config;
    /**
     * @type {?}
     * @private
     */
    ToastaComponent.prototype.toastaService;
}
//# sourceMappingURL=data:application/json;base64,