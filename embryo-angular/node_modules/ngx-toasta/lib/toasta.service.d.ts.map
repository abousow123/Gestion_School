{"version":3,"file":"toasta.service.d.ts","sources":["toasta.service.d.ts"],"names":[],"mappingssourcesContent":["import { Observable } from 'rxjs';\r\n/**\r\n * Options to configure a new Toast\r\n */\r\nexport declare class ToastOptions {\r\n    title: string;\r\n    msg?: string;\r\n    showClose?: boolean;\r\n    showDuration?: boolean;\r\n    theme?: string;\r\n    timeout?: number;\r\n    onAdd?: Function;\r\n    onRemove?: Function;\r\n}\r\n/**\r\n * Structrure of a created Toast\r\n */\r\nexport declare class ToastData {\r\n    id: number;\r\n    title: string;\r\n    msg: string;\r\n    showClose: boolean;\r\n    showDuration: boolean;\r\n    type: string;\r\n    theme: string;\r\n    timeout: number;\r\n    onAdd: Function;\r\n    onRemove: Function;\r\n    onClick: Function;\r\n}\r\n/**\r\n * Default configuration for all toasts and toasta container\r\n */\r\nexport declare class ToastaConfig {\r\n    limit: number;\r\n    showClose: boolean;\r\n    showDuration: boolean;\r\n    position: 'bottom-right' | 'bottom-left' | 'bottom-center' | 'bottom-fullwidth' | 'top-right' | 'top-left' | 'top-center' | 'top-fullwidth' | 'center-center';\r\n    timeout: number;\r\n    theme: 'default' | 'material' | 'bootstrap';\r\n}\r\nexport declare enum ToastaEventType {\r\n    ADD = 0,\r\n    CLEAR = 1,\r\n    CLEAR_ALL = 2\r\n}\r\nexport declare class ToastaEvent {\r\n    type: ToastaEventType;\r\n    value?: any;\r\n    constructor(type: ToastaEventType, value?: any);\r\n}\r\nexport declare function toastaServiceFactory(config: ToastaConfig): ToastaService;\r\n/**\r\n * Toasta service helps create different kinds of Toasts\r\n */\r\nexport declare class ToastaService {\r\n    private config;\r\n    static THEMES: Array<string>;\r\n    uniqueCounter: number;\r\n    private eventSource;\r\n    events: Observable<ToastaEvent>;\r\n    constructor(config: ToastaConfig);\r\n    /**\r\n     * Get list of toats\r\n     */\r\n    /**\r\n     * Create Toast of a default type\r\n     */\r\n    default(options: ToastOptions | string | number): void;\r\n    /**\r\n     * Create Toast of info type\r\n     * @param options Individual toasta config overrides\r\n     */\r\n    info(options: ToastOptions | string | number): void;\r\n    /**\r\n     * Create Toast of success type\r\n     * @param options Individual toasta config overrides\r\n     */\r\n    success(options: ToastOptions | string | number): void;\r\n    /**\r\n     * Create Toast of wait type\r\n     * @param options Individual toasta config overrides\r\n     */\r\n    wait(options: ToastOptions | string | number): void;\r\n    /**\r\n     * Create Toast of error type\r\n     * @param options Individual toasta config overrides\r\n     */\r\n    error(options: ToastOptions | string | number): void;\r\n    /**\r\n     * Create Toast of warning type\r\n     * @param options Individual toasta config overrides\r\n     */\r\n    warning(options: ToastOptions | string | number): void;\r\n    private add;\r\n    clearAll(): void;\r\n    clear(id: number): void;\r\n    private _checkConfigItem;\r\n    private emitEvent;\r\n}\r\n"]}